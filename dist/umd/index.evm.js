(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@depay/web3-blockchains'), require('ethers'), require('@depay/web3-assets-evm'), require('@depay/web3-exchanges-evm'), require('@depay/web3-tokens-evm')) :
  typeof define === 'function' && define.amd ? define(['exports', '@depay/web3-blockchains', 'ethers', '@depay/web3-assets-evm', '@depay/web3-exchanges-evm', '@depay/web3-tokens-evm'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Web3Payments = {}, global.Web3Blockchains, global.ethers, global.Web3Assets, global.Web3Exchanges, global.Web3Tokens));
})(this, (function (exports, Blockchains, ethers, web3AssetsEvm, Exchanges, Token$1) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Blockchains__default = /*#__PURE__*/_interopDefaultLegacy(Blockchains);
  var Exchanges__default = /*#__PURE__*/_interopDefaultLegacy(Exchanges);
  var Token__default = /*#__PURE__*/_interopDefaultLegacy(Token$1);

  var _global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});
  if(_global$1.XMLHttpRequest == undefined) { _global$1.XMLHttpRequest = class XMLHttpRequest { open() {} }; }
  if(_global$1.location == undefined) { _global$1.location = {}; }
  if(_global$1.crypto == undefined) { _global$1.crypto = {}; }
  if(_global$1.crypto.getRandomValues == undefined) { _global$1.crypto.getRandomValues = function(abv) { var l = abv.length; while (l--) { abv[l] = parseInt(Math.random().toString().replace('0.', ''), 10); } return abv }; }
  if(_global$1.crypto.randomBytes == undefined) { _global$1.crypto.randomBytes = function(size) { let array = new Uint8Array(size); _global$1.crypto.getRandomValues(array); return array }; }
  if(_global$1.fetch == undefined) { throw('Please polyfill .fetch | See: https://github.com/DePayFi/solana-web3.js#polyfill-fetch') }
        
  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function () {
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _regeneratorRuntime() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

    _regeneratorRuntime = function () {
      return exports;
    };

    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
      return generator._invoke = function (innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");

          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }

          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);

            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }

            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if ("throw" !== record.type) {
          var result = record.arg,
              value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }

        reject(record.arg);
      }

      var previousPromise;

      this._invoke = function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (undefined === method) {
        if (context.delegate = null, "throw" === context.method) {
          if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
          context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

            return next.value = undefined, next.done = !0, next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }

    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (object) {
      var keys = [];

      for (var key in object) keys.push(key);

      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }

        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;

        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
              record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }

    return _get.apply(this, arguments);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var cjs$3 = {};

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer$1.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$1 (arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer$1.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer$1.alloc(+length)
  }
  Buffer$1.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$1.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer$1.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$1.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes$3(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes$3(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$1.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$1.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer$1.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer$1.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer$1.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer$1.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer$1.compare(this, b) === 0
  };

  Buffer$1.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$1.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes$3(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$1.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$1.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes$3(new Buffer$1(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes$3 (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	Buffer: Buffer$1,
  	INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
  	SlowBuffer: SlowBuffer,
  	isBuffer: isBuffer,
  	kMaxLength: _kMaxLength
  });

  function number$2(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error("positive integer expected, not ".concat(n));
  }


  function isBytes$3(a) {
    return a instanceof Uint8Array || a != null && _typeof(a) === 'object' && a.constructor.name === 'Uint8Array';
  }

  function bytes$1(b) {
    if (!isBytes$3(b)) throw new Error('Uint8Array expected');

    for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      lengths[_key - 1] = arguments[_key];
    }

    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error("Uint8Array expected of length ".concat(lengths, ", not of length=").concat(b.length));
  }

  function hash$1(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number$2(h.outputLen);
    number$2(h.blockLen);
  }

  function exists$1(instance) {
    var checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (instance.destroyed) throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
  }

  function output$1(out, instance) {
    bytes$1(out);
    var min = instance.outputLen;

    if (out.length < min) {
      throw new Error("digestInto() expects output buffer of length at least ".concat(min));
    }
  }

  var crypto$2 = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

  var u32$1 = function u32(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  }; // Cast array to view

  var createView = function createView(arr) {
    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  }; // The rotate right (circular right shift) operation for uint32

  var rotr = function rotr(word, shift) {
    return word << 32 - shift | word >>> shift;
  }; // The rotate left (circular left shift) operation for uint32
  var isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44; // The byte swap operation for uint32

  var byteSwap = function byteSwap(word) {
    return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;
  }; // Conditionally byte swap if on a big-endian platform

  function byteSwap32(arr) {
    for (var i = 0; i < arr.length; i++) {
      arr[i] = byteSwap(arr[i]);
    }
  } // Array where index 0xf0 (240) is mapped to string 'f0'

  function utf8ToBytes$2(str) {
    if (typeof str !== 'string') throw new Error("utf8ToBytes expected string, got ".concat(_typeof(str)));
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
  }
  /**
   * Normalizes (non-hex) string or Uint8Array to Uint8Array.
   * Warning: when Uint8Array is passed, it would NOT get copied.
   * Keep in mind for future mutable operations.
   */

  function toBytes(data) {
    if (typeof data === 'string') data = utf8ToBytes$2(data);
    bytes$1(data);
    return data;
  }
  /**
   * Copies several Uint8Arrays into one.
   */

  function concatBytes$2() {
    var sum = 0;

    for (var i = 0; i < arguments.length; i++) {
      var a = i < 0 || arguments.length <= i ? undefined : arguments[i];
      bytes$1(a);
      sum += a.length;
    }

    var res = new Uint8Array(sum);

    for (var _i2 = 0, pad = 0; _i2 < arguments.length; _i2++) {
      var _a = _i2 < 0 || arguments.length <= _i2 ? undefined : arguments[_i2];

      res.set(_a, pad);
      pad += _a.length;
    }

    return res;
  } // For runtime check if class implements interface

  var Hash = /*#__PURE__*/function () {
    function Hash() {
      _classCallCheck(this, Hash);
    }

    _createClass(Hash, [{
      key: "clone",
      value: // Safe version that clones internal state
      function clone() {
        return this._cloneInto();
      }
    }]);

    return Hash;
  }();
  function wrapConstructor(hashCons) {
    var hashC = function hashC(msg) {
      return hashCons().update(toBytes(msg)).digest();
    };

    var tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;

    hashC.create = function () {
      return hashCons();
    };

    return hashC;
  }
  /**
   * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
   */

  function randomBytes() {
    var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;

    if (crypto$2 && typeof crypto$2.getRandomValues === 'function') {
      return crypto$2.getRandomValues(new Uint8Array(bytesLength));
    } // Legacy Node.js compatibility


    if (crypto$2 && typeof crypto$2.randomBytes === 'function') {
      return crypto$2.randomBytes(bytesLength);
    }

    throw new Error('crypto.getRandomValues must be defined');
  }

  /**
   * Polyfill for Safari 14
   */

  function setBigUint64$1(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);

    var _32n = BigInt(32);

    var _u32_max = BigInt(0xffffffff);

    var wh = Number(value >> _32n & _u32_max);
    var wl = Number(value & _u32_max);
    var h = isLE ? 4 : 0;
    var l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
  }
  /**
   * Choice: a ? b : c
   */


  var Chi$1 = function Chi(a, b, c) {
    return a & b ^ ~a & c;
  };
  /**
   * Majority function, true if any two inputs is true
   */

  var Maj$1 = function Maj(a, b, c) {
    return a & b ^ a & c ^ b & c;
  };
  /**
   * Merkle-Damgard hash construction base class.
   * Could be used to create MD5, RIPEMD, SHA1, SHA2.
   */

  var HashMD$1 = /*#__PURE__*/function (_Hash) {
    _inherits(HashMD, _Hash);

    var _super = _createSuper(HashMD);

    function HashMD(blockLen, outputLen, padOffset, isLE) {
      var _this;

      _classCallCheck(this, HashMD);

      _this = _super.call(this);
      _this.blockLen = blockLen;
      _this.outputLen = outputLen;
      _this.padOffset = padOffset;
      _this.isLE = isLE;
      _this.finished = false;
      _this.length = 0;
      _this.pos = 0;
      _this.destroyed = false;
      _this.buffer = new Uint8Array(blockLen);
      _this.view = createView(_this.buffer);
      return _this;
    }

    _createClass(HashMD, [{
      key: "update",
      value: function update(data) {
        exists$1(this);
        var view = this.view,
            buffer = this.buffer,
            blockLen = this.blockLen;
        data = toBytes(data);
        var len = data.length;

        for (var pos = 0; pos < len;) {
          var take = Math.min(blockLen - this.pos, len - pos); // Fast path: we have at least one block in input, cast it to view and process

          if (take === blockLen) {
            var dataView = createView(data);

            for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);

            continue;
          }

          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;

          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }

        this.length += data.length;
        this.roundClean();
        return this;
      }
    }, {
      key: "digestInto",
      value: function digestInto(out) {
        exists$1(this);
        output$1(out, this);
        this.finished = true; // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.

        var buffer = this.buffer,
            view = this.view,
            blockLen = this.blockLen,
            isLE = this.isLE;
        var pos = this.pos; // append the bit '1' to the message

        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0); // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again

        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        } // Pad until full block byte with zeros


        for (var i = pos; i < blockLen; i++) buffer[i] = 0; // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.


        setBigUint64$1(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        var oview = createView(out);
        var len = this.outputLen; // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT

        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
        var outLen = len / 4;
        var state = this.get();
        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');

        for (var _i2 = 0; _i2 < outLen; _i2++) oview.setUint32(4 * _i2, state[_i2], isLE);
      }
    }, {
      key: "digest",
      value: function digest() {
        var buffer = this.buffer,
            outputLen = this.outputLen;
        this.digestInto(buffer);
        var res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
    }, {
      key: "_cloneInto",
      value: function _cloneInto(to) {
        var _to;

        to || (to = new this.constructor());

        (_to = to).set.apply(_to, _toConsumableArray(this.get()));

        var blockLen = this.blockLen,
            buffer = this.buffer,
            length = this.length,
            finished = this.finished,
            destroyed = this.destroyed,
            pos = this.pos;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
      }
    }]);

    return HashMD;
  }(Hash);

  var U32_MASK64$1 = /* @__PURE__ */BigInt(Math.pow(2, 32) - 1);

  var _32n$1 = /* @__PURE__ */BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022


  function fromBig$1(n) {
    var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (le) return {
      h: Number(n & U32_MASK64$1),
      l: Number(n >> _32n$1 & U32_MASK64$1)
    };
    return {
      h: Number(n >> _32n$1 & U32_MASK64$1) | 0,
      l: Number(n & U32_MASK64$1) | 0
    };
  }

  function split$1(lst) {
    var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var Ah = new Uint32Array(lst.length);
    var Al = new Uint32Array(lst.length);

    for (var i = 0; i < lst.length; i++) {
      var _fromBig2 = fromBig$1(lst[i], le),
          h = _fromBig2.h,
          l = _fromBig2.l;

      var _ref = [h, l];
      Ah[i] = _ref[0];
      Al[i] = _ref[1];
    }

    return [Ah, Al];
  }

  var toBig$1 = function toBig(h, l) {
    return BigInt(h >>> 0) << _32n$1 | BigInt(l >>> 0);
  }; // for Shift in [0, 32)


  var shrSH$1 = function shrSH(h, _l, s) {
    return h >>> s;
  };

  var shrSL$1 = function shrSL(h, l, s) {
    return h << 32 - s | l >>> s;
  }; // Right rotate for Shift in [1, 32)


  var rotrSH$1 = function rotrSH(h, l, s) {
    return h >>> s | l << 32 - s;
  };

  var rotrSL$1 = function rotrSL(h, l, s) {
    return h << 32 - s | l >>> s;
  }; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.


  var rotrBH$1 = function rotrBH(h, l, s) {
    return h << 64 - s | l >>> s - 32;
  };

  var rotrBL$1 = function rotrBL(h, l, s) {
    return h >>> s - 32 | l << 64 - s;
  }; // Right rotate for shift===32 (just swaps l&h)


  var rotr32H$1 = function rotr32H(_h, l) {
    return l;
  };

  var rotr32L$1 = function rotr32L(h, _l) {
    return h;
  }; // Left rotate for Shift in [1, 32)


  var rotlSH$1 = function rotlSH(h, l, s) {
    return h << s | l >>> 32 - s;
  };

  var rotlSL$1 = function rotlSL(h, l, s) {
    return l << s | h >>> 32 - s;
  }; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.


  var rotlBH$1 = function rotlBH(h, l, s) {
    return l << s - 32 | h >>> 64 - s;
  };

  var rotlBL$1 = function rotlBL(h, l, s) {
    return h << s - 32 | l >>> 64 - s;
  }; // JS uses 32-bit signed integers for bitwise operations which means we cannot
  // simple take carry out of low bit sum by shift, we need to use division.


  function add$1(Ah, Al, Bh, Bl) {
    var l = (Al >>> 0) + (Bl >>> 0);
    return {
      h: Ah + Bh + (l / Math.pow(2, 32) | 0) | 0,
      l: l | 0
    };
  } // Addition with more than 2 elements


  var add3L$1 = function add3L(Al, Bl, Cl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  };

  var add3H$1 = function add3H(low, Ah, Bh, Ch) {
    return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;
  };

  var add4L$1 = function add4L(Al, Bl, Cl, Dl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  };

  var add4H$1 = function add4H(low, Ah, Bh, Ch, Dh) {
    return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;
  };

  var add5L$1 = function add5L(Al, Bl, Cl, Dl, El) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  };

  var add5H$1 = function add5H(low, Ah, Bh, Ch, Dh, Eh) {
    return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;
  }; // prettier-ignore

  var u64$2 = {
    fromBig: fromBig$1,
    split: split$1,
    toBig: toBig$1,
    shrSH: shrSH$1,
    shrSL: shrSL$1,
    rotrSH: rotrSH$1,
    rotrSL: rotrSL$1,
    rotrBH: rotrBH$1,
    rotrBL: rotrBL$1,
    rotr32H: rotr32H$1,
    rotr32L: rotr32L$1,
    rotlSH: rotlSH$1,
    rotlSL: rotlSL$1,
    rotlBH: rotlBH$1,
    rotlBL: rotlBL$1,
    add: add$1,
    add3L: add3L$1,
    add3H: add3H$1,
    add4L: add4L$1,
    add4H: add4H$1,
    add5H: add5H$1,
    add5L: add5L$1
  };

  // prettier-ignore

  var _ref$2 = /* @__PURE__ */function () {
    return u64$2.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(function (n) {
      return BigInt(n);
    }));
  }(),
      _ref2$1 = _slicedToArray(_ref$2, 2),
      SHA512_Kh$1 = _ref2$1[0],
      SHA512_Kl$1 = _ref2$1[1]; // Temporary buffer, not used to store anything between runs


  var SHA512_W_H$1 = /* @__PURE__ */new Uint32Array(80);
  var SHA512_W_L$1 = /* @__PURE__ */new Uint32Array(80);
  var SHA512$1 = /*#__PURE__*/function (_HashMD) {
    _inherits(SHA512, _HashMD);

    var _super = _createSuper(SHA512);

    function SHA512() {
      var _this;

      _classCallCheck(this, SHA512);

      _this = _super.call(this, 128, 64, 16, false); // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
      // Also looks cleaner and easier to verify with spec.
      // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
      // h -- high 32 bits, l -- low 32 bits

      _this.Ah = 0x6a09e667 | 0;
      _this.Al = 0xf3bcc908 | 0;
      _this.Bh = 0xbb67ae85 | 0;
      _this.Bl = 0x84caa73b | 0;
      _this.Ch = 0x3c6ef372 | 0;
      _this.Cl = 0xfe94f82b | 0;
      _this.Dh = 0xa54ff53a | 0;
      _this.Dl = 0x5f1d36f1 | 0;
      _this.Eh = 0x510e527f | 0;
      _this.El = 0xade682d1 | 0;
      _this.Fh = 0x9b05688c | 0;
      _this.Fl = 0x2b3e6c1f | 0;
      _this.Gh = 0x1f83d9ab | 0;
      _this.Gl = 0xfb41bd6b | 0;
      _this.Hh = 0x5be0cd19 | 0;
      _this.Hl = 0x137e2179 | 0;
      return _this;
    } // prettier-ignore


    _createClass(SHA512, [{
      key: "get",
      value: function get() {
        var Ah = this.Ah,
            Al = this.Al,
            Bh = this.Bh,
            Bl = this.Bl,
            Ch = this.Ch,
            Cl = this.Cl,
            Dh = this.Dh,
            Dl = this.Dl,
            Eh = this.Eh,
            El = this.El,
            Fh = this.Fh,
            Fl = this.Fl,
            Gh = this.Gh,
            Gl = this.Gl,
            Hh = this.Hh,
            Hl = this.Hl;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      } // prettier-ignore

    }, {
      key: "set",
      value: function set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
    }, {
      key: "process",
      value: function process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (var i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H$1[i] = view.getUint32(offset);
          SHA512_W_L$1[i] = view.getUint32(offset += 4);
        }

        for (var _i2 = 16; _i2 < 80; _i2++) {
          // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
          var W15h = SHA512_W_H$1[_i2 - 15] | 0;
          var W15l = SHA512_W_L$1[_i2 - 15] | 0;
          var s0h = u64$2.rotrSH(W15h, W15l, 1) ^ u64$2.rotrSH(W15h, W15l, 8) ^ u64$2.shrSH(W15h, W15l, 7);
          var s0l = u64$2.rotrSL(W15h, W15l, 1) ^ u64$2.rotrSL(W15h, W15l, 8) ^ u64$2.shrSL(W15h, W15l, 7); // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)

          var W2h = SHA512_W_H$1[_i2 - 2] | 0;
          var W2l = SHA512_W_L$1[_i2 - 2] | 0;
          var s1h = u64$2.rotrSH(W2h, W2l, 19) ^ u64$2.rotrBH(W2h, W2l, 61) ^ u64$2.shrSH(W2h, W2l, 6);
          var s1l = u64$2.rotrSL(W2h, W2l, 19) ^ u64$2.rotrBL(W2h, W2l, 61) ^ u64$2.shrSL(W2h, W2l, 6); // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];

          var SUMl = u64$2.add4L(s0l, s1l, SHA512_W_L$1[_i2 - 7], SHA512_W_L$1[_i2 - 16]);
          var SUMh = u64$2.add4H(SUMl, s0h, s1h, SHA512_W_H$1[_i2 - 7], SHA512_W_H$1[_i2 - 16]);
          SHA512_W_H$1[_i2] = SUMh | 0;
          SHA512_W_L$1[_i2] = SUMl | 0;
        }

        var Ah = this.Ah,
            Al = this.Al,
            Bh = this.Bh,
            Bl = this.Bl,
            Ch = this.Ch,
            Cl = this.Cl,
            Dh = this.Dh,
            Dl = this.Dl,
            Eh = this.Eh,
            El = this.El,
            Fh = this.Fh,
            Fl = this.Fl,
            Gh = this.Gh,
            Gl = this.Gl,
            Hh = this.Hh,
            Hl = this.Hl; // Compression function main loop, 80 rounds

        for (var _i4 = 0; _i4 < 80; _i4++) {
          // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
          var sigma1h = u64$2.rotrSH(Eh, El, 14) ^ u64$2.rotrSH(Eh, El, 18) ^ u64$2.rotrBH(Eh, El, 41);
          var sigma1l = u64$2.rotrSL(Eh, El, 14) ^ u64$2.rotrSL(Eh, El, 18) ^ u64$2.rotrBL(Eh, El, 41); //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;

          var CHIh = Eh & Fh ^ ~Eh & Gh;
          var CHIl = El & Fl ^ ~El & Gl; // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
          // prettier-ignore

          var T1ll = u64$2.add5L(Hl, sigma1l, CHIl, SHA512_Kl$1[_i4], SHA512_W_L$1[_i4]);
          var T1h = u64$2.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh$1[_i4], SHA512_W_H$1[_i4]);
          var T1l = T1ll | 0; // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)

          var sigma0h = u64$2.rotrSH(Ah, Al, 28) ^ u64$2.rotrBH(Ah, Al, 34) ^ u64$2.rotrBH(Ah, Al, 39);
          var sigma0l = u64$2.rotrSL(Ah, Al, 28) ^ u64$2.rotrBL(Ah, Al, 34) ^ u64$2.rotrBL(Ah, Al, 39);
          var MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          var MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;

          var _u64$add = u64$2.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0);

          Eh = _u64$add.h;
          El = _u64$add.l;
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          var All = u64$2.add3L(T1l, sigma0l, MAJl);
          Ah = u64$2.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        } // Add the compressed chunk to the current hash value


        var _u64$add2 = u64$2.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0);

        Ah = _u64$add2.h;
        Al = _u64$add2.l;

        var _u64$add3 = u64$2.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0);

        Bh = _u64$add3.h;
        Bl = _u64$add3.l;

        var _u64$add4 = u64$2.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0);

        Ch = _u64$add4.h;
        Cl = _u64$add4.l;

        var _u64$add5 = u64$2.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0);

        Dh = _u64$add5.h;
        Dl = _u64$add5.l;

        var _u64$add6 = u64$2.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0);

        Eh = _u64$add6.h;
        El = _u64$add6.l;

        var _u64$add7 = u64$2.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0);

        Fh = _u64$add7.h;
        Fl = _u64$add7.l;

        var _u64$add8 = u64$2.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0);

        Gh = _u64$add8.h;
        Gl = _u64$add8.l;

        var _u64$add9 = u64$2.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0);

        Hh = _u64$add9.h;
        Hl = _u64$add9.l;
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
    }, {
      key: "roundClean",
      value: function roundClean() {
        SHA512_W_H$1.fill(0);
        SHA512_W_L$1.fill(0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    }]);

    return SHA512;
  }(HashMD$1);
  var sha512$1 = /* @__PURE__ */wrapConstructor(function () {
    return new SHA512$1();
  });

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // 100 lines of code in the file are duplicated from noble-hashes (utils).
  // This is OK: `abstract` directory does not use noble-hashes.
  // User may opt-in into using different hashing library. This way, noble-hashes
  // won't be included into their bundle.
  var _0n$a = /* @__PURE__ */BigInt(0);

  var _1n$c = /* @__PURE__ */BigInt(1);

  var _2n$8 = /* @__PURE__ */BigInt(2);

  function isBytes$2(a) {
    return a instanceof Uint8Array || a != null && _typeof(a) === 'object' && a.constructor.name === 'Uint8Array';
  }
  function abytes$1(item) {
    if (!isBytes$2(item)) throw new Error('Uint8Array expected');
  }
  function abool$1(title, value) {
    if (typeof value !== 'boolean') throw new Error("".concat(title, " must be valid boolean, got \"").concat(value, "\"."));
  } // Array where index 0xf0 (240) is mapped to string 'f0'

  var hexes$1 = /* @__PURE__ */Array.from({
    length: 256
  }, function (_, i) {
    return i.toString(16).padStart(2, '0');
  });
  /**
   * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
   */

  function bytesToHex$1(bytes) {
    abytes$1(bytes); // pre-caching improves the speed 6x

    var hex = '';

    for (var i = 0; i < bytes.length; i++) {
      hex += hexes$1[bytes[i]];
    }

    return hex;
  }
  function numberToHexUnpadded$1(num) {
    var hex = num.toString(16);
    return hex.length & 1 ? "0".concat(hex) : hex;
  }
  function hexToNumber$1(hex) {
    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + _typeof(hex)); // Big Endian

    return BigInt(hex === '' ? '0' : "0x".concat(hex));
  } // We use optimized technique to convert hex string to byte array

  var asciis$1 = {
    _0: 48,
    _9: 57,
    _A: 65,
    _F: 70,
    _a: 97,
    _f: 102
  };

  function asciiToBase16$1(_char) {
    if (_char >= asciis$1._0 && _char <= asciis$1._9) return _char - asciis$1._0;
    if (_char >= asciis$1._A && _char <= asciis$1._F) return _char - (asciis$1._A - 10);
    if (_char >= asciis$1._a && _char <= asciis$1._f) return _char - (asciis$1._a - 10);
    return;
  }
  /**
   * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
   */


  function hexToBytes$1(hex) {
    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + _typeof(hex));
    var hl = hex.length;
    var al = hl / 2;
    if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
    var array = new Uint8Array(al);

    for (var ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      var n1 = asciiToBase16$1(hex.charCodeAt(hi));
      var n2 = asciiToBase16$1(hex.charCodeAt(hi + 1));

      if (n1 === undefined || n2 === undefined) {
        var _char2 = hex[hi] + hex[hi + 1];

        throw new Error('hex string expected, got non-hex character "' + _char2 + '" at index ' + hi);
      }

      array[ai] = n1 * 16 + n2;
    }

    return array;
  } // BE: Big Endian, LE: Little Endian

  function bytesToNumberBE$1(bytes) {
    return hexToNumber$1(bytesToHex$1(bytes));
  }
  function bytesToNumberLE$1(bytes) {
    abytes$1(bytes);
    return hexToNumber$1(bytesToHex$1(Uint8Array.from(bytes).reverse()));
  }
  function numberToBytesBE$1(n, len) {
    return hexToBytes$1(n.toString(16).padStart(len * 2, '0'));
  }
  function numberToBytesLE$1(n, len) {
    return numberToBytesBE$1(n, len).reverse();
  } // Unpadded, rarely used

  function numberToVarBytesBE$1(n) {
    return hexToBytes$1(numberToHexUnpadded$1(n));
  }
  /**
   * Takes hex string or Uint8Array, converts to Uint8Array.
   * Validates output length.
   * Will throw error for other types.
   * @param title descriptive title for an error e.g. 'private key'
   * @param hex hex string or Uint8Array
   * @param expectedLength optional, will compare to result array's length
   * @returns
   */

  function ensureBytes$1(title, hex, expectedLength) {
    var res;

    if (typeof hex === 'string') {
      try {
        res = hexToBytes$1(hex);
      } catch (e) {
        throw new Error("".concat(title, " must be valid hex string, got \"").concat(hex, "\". Cause: ").concat(e));
      }
    } else if (isBytes$2(hex)) {
      // Uint8Array.from() instead of hash.slice() because node.js Buffer
      // is instance of Uint8Array, and its slice() creates **mutable** copy
      res = Uint8Array.from(hex);
    } else {
      throw new Error("".concat(title, " must be hex string or Uint8Array"));
    }

    var len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error("".concat(title, " expected ").concat(expectedLength, " bytes, got ").concat(len));
    return res;
  }
  /**
   * Copies several Uint8Arrays into one.
   */

  function concatBytes$1() {
    var sum = 0;

    for (var i = 0; i < arguments.length; i++) {
      var a = i < 0 || arguments.length <= i ? undefined : arguments[i];
      abytes$1(a);
      sum += a.length;
    }

    var res = new Uint8Array(sum);

    for (var _i2 = 0, pad = 0; _i2 < arguments.length; _i2++) {
      var _a = _i2 < 0 || arguments.length <= _i2 ? undefined : arguments[_i2];

      res.set(_a, pad);
      pad += _a.length;
    }

    return res;
  } // Compares 2 u8a-s in kinda constant time

  function equalBytes$1(a, b) {
    if (a.length !== b.length) return false;
    var diff = 0;

    for (var i = 0; i < a.length; i++) diff |= a[i] ^ b[i];

    return diff === 0;
  }
  /**
   * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
   */

  function utf8ToBytes$1(str) {
    if (typeof str !== 'string') throw new Error("utf8ToBytes expected string, got ".concat(_typeof(str)));
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
  } // Is positive bigint

  var isPosBig$1 = function isPosBig(n) {
    return typeof n === 'bigint' && _0n$a <= n;
  };

  function inRange$2(n, min, max) {
    return isPosBig$1(n) && isPosBig$1(min) && isPosBig$1(max) && min <= n && n < max;
  }
  /**
   * Asserts min <= n < max. NOTE: It's < max and not <= max.
   * @example
   * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)
   */

  function aInRange$1(title, n, min, max) {
    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?
    // consider P=256n, min=0n, max=P
    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`
    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`
    // - our way is the cleanest:               `inRange('x', x, 0n, P)
    if (!inRange$2(n, min, max)) throw new Error("expected valid ".concat(title, ": ").concat(min, " <= n < ").concat(max, ", got ").concat(_typeof(n), " ").concat(n));
  } // Bit operations

  /**
   * Calculates amount of bits in a bigint.
   * Same as `n.toString(2).length`
   */

  function bitLen$1(n) {
    var len;

    for (len = 0; n > _0n$a; n >>= _1n$c, len += 1);

    return len;
  }
  /**
   * Gets single bit at position.
   * NOTE: first bit position is 0 (same as arrays)
   * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
   */

  function bitGet$1(n, pos) {
    return n >> BigInt(pos) & _1n$c;
  }
  /**
   * Sets single bit at position.
   */

  function bitSet$1(n, pos, value) {
    return n | (value ? _1n$c : _0n$a) << BigInt(pos);
  }
  /**
   * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
   * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
   */

  var bitMask$1 = function bitMask(n) {
    return (_2n$8 << BigInt(n - 1)) - _1n$c;
  }; // DRBG

  var u8n$1 = function u8n(data) {
    return new Uint8Array(data);
  }; // creates Uint8Array


  var u8fr$1 = function u8fr(arr) {
    return Uint8Array.from(arr);
  }; // another shortcut

  /**
   * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
   * @returns function that will call DRBG until 2nd arg returns something meaningful
   * @example
   *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
   *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
   */


  function createHmacDrbg$1(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function'); // Step B, Step C: set hashLen to 8*ceil(hlen/8)

    var v = u8n$1(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.

    var k = u8n$1(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same

    var i = 0; // Iterations counter, will throw when over 1000

    var reset = function reset() {
      v.fill(1);
      k.fill(0);
      i = 0;
    };

    var h = function h() {
      for (var _len = arguments.length, b = new Array(_len), _key = 0; _key < _len; _key++) {
        b[_key] = arguments[_key];
      }

      return hmacFn.apply(void 0, [k, v].concat(b));
    }; // hmac(k)(v, ...values)


    var reseed = function reseed() {
      var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : u8n$1();
      // HMAC-DRBG reseed() function. Steps D-G
      k = h(u8fr$1([0x00]), seed); // k = hmac(k || v || 0x00 || seed)

      v = h(); // v = hmac(k || v)

      if (seed.length === 0) return;
      k = h(u8fr$1([0x01]), seed); // k = hmac(k || v || 0x01 || seed)

      v = h(); // v = hmac(k || v)
    };

    var gen = function gen() {
      // HMAC-DRBG generate() function
      if (i++ >= 1000) throw new Error('drbg: tried 1000 values');
      var len = 0;
      var out = [];

      while (len < qByteLen) {
        v = h();
        var sl = v.slice();
        out.push(sl);
        len += v.length;
      }

      return concatBytes$1.apply(void 0, out);
    };

    var genUntil = function genUntil(seed, pred) {
      reset();
      reseed(seed); // Steps D-G

      var res = undefined; // Step H: grind until k is in [1..n-1]

      while (!(res = pred(gen()))) reseed();

      reset();
      return res;
    };

    return genUntil;
  } // Validating curves and fields

  var validatorFns$1 = {
    bigint: function bigint(val) {
      return typeof val === 'bigint';
    },
    "function": function _function(val) {
      return typeof val === 'function';
    },
    "boolean": function boolean(val) {
      return typeof val === 'boolean';
    },
    string: function string(val) {
      return typeof val === 'string';
    },
    stringOrUint8Array: function stringOrUint8Array(val) {
      return typeof val === 'string' || isBytes$2(val);
    },
    isSafeInteger: function isSafeInteger(val) {
      return Number.isSafeInteger(val);
    },
    array: function array(val) {
      return Array.isArray(val);
    },
    field: function field(val, object) {
      return object.Fp.isValid(val);
    },
    hash: function hash(val) {
      return typeof val === 'function' && Number.isSafeInteger(val.outputLen);
    }
  }; // type Record<K extends string | number | symbol, T> = { [P in K]: T; }

  function validateObject$1(object, validators) {
    var optValidators = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var checkField = function checkField(fieldName, type, isOptional) {
      var checkVal = validatorFns$1[type];
      if (typeof checkVal !== 'function') throw new Error("Invalid validator \"".concat(type, "\", expected function"));
      var val = object[fieldName];
      if (isOptional && val === undefined) return;

      if (!checkVal(val, object)) {
        throw new Error("Invalid param ".concat(String(fieldName), "=").concat(val, " (").concat(_typeof(val), "), expected ").concat(type));
      }
    };

    for (var _i3 = 0, _Object$entries = Object.entries(validators); _i3 < _Object$entries.length; _i3++) {
      var _Object$entries$_i2 = _slicedToArray(_Object$entries[_i3], 2),
          fieldName = _Object$entries$_i2[0],
          type = _Object$entries$_i2[1];

      checkField(fieldName, type, false);
    }

    for (var _i4 = 0, _Object$entries2 = Object.entries(optValidators); _i4 < _Object$entries2.length; _i4++) {
      var _Object$entries2$_i2 = _slicedToArray(_Object$entries2[_i4], 2),
          _fieldName = _Object$entries2$_i2[0],
          _type = _Object$entries2$_i2[1];

      checkField(_fieldName, _type, true);
    }

    return object;
  } // validate type tests
  // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
  // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
  // // Should fail type-check
  // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
  // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
  // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
  // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

  /**
   * throws not implemented error
   */

  var notImplemented$1 = function notImplemented() {
    throw new Error('not implemented');
  };
  /**
   * Memoizes (caches) computation result.
   * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.
   */

  function memoized$1(fn) {
    var map = new WeakMap();
    return function (arg) {
      var val = map.get(arg);
      if (val !== undefined) return val;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var computed = fn.apply(void 0, [arg].concat(args));
      map.set(arg, computed);
      return computed;
    };
  }

  var ut$1 = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	isBytes: isBytes$2,
  	abytes: abytes$1,
  	abool: abool$1,
  	bytesToHex: bytesToHex$1,
  	numberToHexUnpadded: numberToHexUnpadded$1,
  	hexToNumber: hexToNumber$1,
  	hexToBytes: hexToBytes$1,
  	bytesToNumberBE: bytesToNumberBE$1,
  	bytesToNumberLE: bytesToNumberLE$1,
  	numberToBytesBE: numberToBytesBE$1,
  	numberToBytesLE: numberToBytesLE$1,
  	numberToVarBytesBE: numberToVarBytesBE$1,
  	ensureBytes: ensureBytes$1,
  	concatBytes: concatBytes$1,
  	equalBytes: equalBytes$1,
  	utf8ToBytes: utf8ToBytes$1,
  	inRange: inRange$2,
  	aInRange: aInRange$1,
  	bitLen: bitLen$1,
  	bitGet: bitGet$1,
  	bitSet: bitSet$1,
  	bitMask: bitMask$1,
  	createHmacDrbg: createHmacDrbg$1,
  	validateObject: validateObject$1,
  	notImplemented: notImplemented$1,
  	memoized: memoized$1
  });

  var _0n$9 = BigInt(0),
      _1n$b = BigInt(1),
      _2n$7 = BigInt(2),
      _3n$2 = BigInt(3); // prettier-ignore


  var _4n$1 = BigInt(4),
      _5n$2 = BigInt(5),
      _8n$4 = BigInt(8); // prettier-ignore


  BigInt(9);
      BigInt(16); // Calculates a modulo b


  function mod$1(a, b) {
    var result = a % b;
    return result >= _0n$9 ? result : b + result;
  }
  /**
   * Efficiently raise num to power and do modular division.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   * @example
   * pow(2n, 6n, 11n) // 64n % 11n == 9n
   */
  // TODO: use field version && remove

  function pow$1(num, power, modulo) {
    if (modulo <= _0n$9 || power < _0n$9) throw new Error('Expected power/modulo > 0');
    if (modulo === _1n$b) return _0n$9;
    var res = _1n$b;

    while (power > _0n$9) {
      if (power & _1n$b) res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n$b;
    }

    return res;
  } // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)

  function pow2$1(x, power, modulo) {
    var res = x;

    while (power-- > _0n$9) {
      res *= res;
      res %= modulo;
    }

    return res;
  } // Inverses number over modulo

  function invert$1(number, modulo) {
    if (number === _0n$9 || modulo <= _0n$9) {
      throw new Error("invert: expected positive integers, got n=".concat(number, " mod=").concat(modulo));
    } // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.


    var a = mod$1(number, modulo);
    var b = modulo; // prettier-ignore

    var x = _0n$9,
        u = _1n$b;

    while (a !== _0n$9) {
      // JIT applies optimization if those two lines follow each other
      var q = b / a;
      var r = b % a;
      var m = x - u * q;

      b = a, a = r, x = u, u = m;
    }

    var gcd = b;
    if (gcd !== _1n$b) throw new Error('invert: does not exist');
    return mod$1(x, modulo);
  }
  /**
   * Tonelli-Shanks square root search algorithm.
   * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
   * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
   * Will start an infinite loop if field order P is not prime.
   * @param P field order
   * @returns function that takes field Fp (created from P) and number n
   */

  function tonelliShanks$1(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    var legendreC = (P - _1n$b) / _2n$7;
    var Q, S, Z; // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd

    for (Q = P - _1n$b, S = 0; Q % _2n$7 === _0n$9; Q /= _2n$7, S++); // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq


    for (Z = _2n$7; Z < P && pow$1(Z, legendreC, P) !== P - _1n$b; Z++); // Fast-path


    if (S === 1) {
      var p1div4 = (P + _1n$b) / _4n$1;
      return function tonelliFast(Fp, n) {
        var root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // Slow-path


    var Q1div2 = (Q + _1n$b) / _2n$7;
    return function tonelliSlow(Fp, n) {
      // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');
      var r = S; // TODO: will fail at Fp2/etc

      var g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b

      var x = Fp.pow(n, Q1div2); // first guess at the square root

      var b = Fp.pow(n, Q); // first guess at the fudge factor

      while (!Fp.eql(b, Fp.ONE)) {
        if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
        // Find m such b^(2^m)==1

        var m = 1;

        for (var t2 = Fp.sqr(b); m < r; m++) {
          if (Fp.eql(t2, Fp.ONE)) break;
          t2 = Fp.sqr(t2); // t2 *= t2
        } // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow


        var ge = Fp.pow(g, _1n$b << BigInt(r - m - 1)); // ge = 2^(r-m-1)

        g = Fp.sqr(ge); // g = ge * ge

        x = Fp.mul(x, ge); // x *= ge

        b = Fp.mul(b, g); // b *= g

        r = m;
      }

      return x;
    };
  }
  function FpSqrt$1(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n$1 === _3n$2) {
      // Not all roots possible!
      // const ORDER =
      //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
      // const NUM = 72057594037927816n;
      var p1div4 = (P + _1n$b) / _4n$1;
      return function sqrt3mod4(Fp, n) {
        var root = Fp.pow(n, p1div4); // Throw if root**2 != n

        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)


    if (P % _8n$4 === _5n$2) {
      var c1 = (P - _5n$2) / _8n$4;
      return function sqrt5mod8(Fp, n) {
        var n2 = Fp.mul(n, _2n$7);
        var v = Fp.pow(n2, c1);
        var nv = Fp.mul(n, v);
        var i = Fp.mul(Fp.mul(nv, _2n$7), v);
        var root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // P ≡ 9 (mod 16)


    return tonelliShanks$1(P);
  } // Little-endian check for first LE bit (last BE bit);

  var isNegativeLE$1 = function isNegativeLE(num, modulo) {
    return (mod$1(num, modulo) & _1n$b) === _1n$b;
  }; // prettier-ignore

  var FIELD_FIELDS$1 = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];
  function validateField$1(field) {
    var initial = {
      ORDER: 'bigint',
      MASK: 'bigint',
      BYTES: 'isSafeInteger',
      BITS: 'isSafeInteger'
    };
    var opts = FIELD_FIELDS$1.reduce(function (map, val) {
      map[val] = 'function';
      return map;
    }, initial);
    return validateObject$1(field, opts);
  } // Generic field functions

  /**
   * Same as `pow` but for Fp: non-constant-time.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   */

  function FpPow$1(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n$9) throw new Error('Expected power > 0');
    if (power === _0n$9) return f.ONE;
    if (power === _1n$b) return num;
    var p = f.ONE;
    var d = num;

    while (power > _0n$9) {
      if (power & _1n$b) p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n$b;
    }

    return p;
  }
  /**
   * Efficiently invert an array of Field elements.
   * `inv(0)` will return `undefined` here: make sure to throw an error.
   */

  function FpInvertBatch$1(f, nums) {
    var tmp = new Array(nums.length); // Walk from first to last, multiply them by each other MOD p

    var lastMultiplied = nums.reduce(function (acc, num, i) {
      if (f.is0(num)) return acc;
      tmp[i] = acc;
      return f.mul(acc, num);
    }, f.ONE); // Invert last element

    var inverted = f.inv(lastMultiplied); // Walk from last to first, multiply them by inverted each other MOD p

    nums.reduceRight(function (acc, num, i) {
      if (f.is0(num)) return acc;
      tmp[i] = f.mul(acc, tmp[i]);
      return f.mul(acc, num);
    }, inverted);
    return tmp;
  }

  function nLength$1(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    var _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;

    var nByteLength = Math.ceil(_nBitLength / 8);
    return {
      nBitLength: _nBitLength,
      nByteLength: nByteLength
    };
  }
  /**
   * Initializes a finite field over prime. **Non-primes are not supported.**
   * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
   * Major performance optimizations:
   * * a) denormalized operations like mulN instead of mul
   * * b) same object shape: never add or remove keys
   * * c) Object.freeze
   * NOTE: operations don't check 'isValid' for all elements for performance reasons,
   * it is caller responsibility to check this.
   * This is low-level code, please make sure you know what you doing.
   * @param ORDER prime positive bigint
   * @param bitLen how many bits the field consumes
   * @param isLE (def: false) if encoding / decoding should be in little-endian
   * @param redef optional faster redefinitions of sqrt and other methods
   */

  function Field$1(ORDER, bitLen) {
    var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var redef = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    if (ORDER <= _0n$9) throw new Error("Expected Field ORDER > 0, got ".concat(ORDER));

    var _nLength = nLength$1(ORDER, bitLen),
        BITS = _nLength.nBitLength,
        BYTES = _nLength.nByteLength;

    if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');
    var sqrtP = FpSqrt$1(ORDER);
    var f = Object.freeze({
      ORDER: ORDER,
      BITS: BITS,
      BYTES: BYTES,
      MASK: bitMask$1(BITS),
      ZERO: _0n$9,
      ONE: _1n$b,
      create: function create(num) {
        return mod$1(num, ORDER);
      },
      isValid: function isValid(num) {
        if (typeof num !== 'bigint') throw new Error("Invalid field element: expected bigint, got ".concat(_typeof(num)));
        return _0n$9 <= num && num < ORDER; // 0 is valid element, but it's not invertible
      },
      is0: function is0(num) {
        return num === _0n$9;
      },
      isOdd: function isOdd(num) {
        return (num & _1n$b) === _1n$b;
      },
      neg: function neg(num) {
        return mod$1(-num, ORDER);
      },
      eql: function eql(lhs, rhs) {
        return lhs === rhs;
      },
      sqr: function sqr(num) {
        return mod$1(num * num, ORDER);
      },
      add: function add(lhs, rhs) {
        return mod$1(lhs + rhs, ORDER);
      },
      sub: function sub(lhs, rhs) {
        return mod$1(lhs - rhs, ORDER);
      },
      mul: function mul(lhs, rhs) {
        return mod$1(lhs * rhs, ORDER);
      },
      pow: function pow(num, power) {
        return FpPow$1(f, num, power);
      },
      div: function div(lhs, rhs) {
        return mod$1(lhs * invert$1(rhs, ORDER), ORDER);
      },
      // Same as above, but doesn't normalize
      sqrN: function sqrN(num) {
        return num * num;
      },
      addN: function addN(lhs, rhs) {
        return lhs + rhs;
      },
      subN: function subN(lhs, rhs) {
        return lhs - rhs;
      },
      mulN: function mulN(lhs, rhs) {
        return lhs * rhs;
      },
      inv: function inv(num) {
        return invert$1(num, ORDER);
      },
      sqrt: redef.sqrt || function (n) {
        return sqrtP(f, n);
      },
      invertBatch: function invertBatch(lst) {
        return FpInvertBatch$1(f, lst);
      },
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: function cmov(a, b, c) {
        return c ? b : a;
      },
      toBytes: function toBytes(num) {
        return isLE ? numberToBytesLE$1(num, BYTES) : numberToBytesBE$1(num, BYTES);
      },
      fromBytes: function fromBytes(bytes) {
        if (bytes.length !== BYTES) throw new Error("Fp.fromBytes: expected ".concat(BYTES, ", got ").concat(bytes.length));
        return isLE ? bytesToNumberLE$1(bytes) : bytesToNumberBE$1(bytes);
      }
    });
    return Object.freeze(f);
  }
  /**
   * Returns total number of bytes consumed by the field element.
   * For example, 32 bytes for usual 256-bit weierstrass curve.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of field
   */

  function getFieldBytesLength$1(fieldOrder) {
    if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');
    var bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  /**
   * Returns minimal amount of bytes that can be safely reduced
   * by field order.
   * Should be 2^-128 for 128-bit curve such as P256.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of target hash
   */

  function getMinHashLength$1(fieldOrder) {
    var length = getFieldBytesLength$1(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  /**
   * "Constant-time" private key generation utility.
   * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
   * and convert them into private scalar, with the modulo bias being negligible.
   * Needs at least 48 bytes of input for 32-byte private key.
   * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
   * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
   * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
   * @param hash hash output from SHA3 or a similar function
   * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
   * @param isLE interpret hash bytes as LE num
   * @returns valid private scalar
   */

  function mapHashToField$1(key, fieldOrder) {
    var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var len = key.length;
    var fieldLen = getFieldBytesLength$1(fieldOrder);
    var minLen = getMinHashLength$1(fieldOrder); // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.

    if (len < 16 || len < minLen || len > 1024) throw new Error("expected ".concat(minLen, "-1024 bytes of input, got ").concat(len));
    var num = isLE ? bytesToNumberBE$1(key) : bytesToNumberLE$1(key); // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0

    var reduced = mod$1(num, fieldOrder - _1n$b) + _1n$b;

    return isLE ? numberToBytesLE$1(reduced, fieldLen) : numberToBytesBE$1(reduced, fieldLen);
  }

  var _0n$8 = BigInt(0);

  var _1n$a = BigInt(1); // Since points in different groups cannot be equal (different object constructor),
  // we can have single place to store precomputes


  var pointPrecomputes$1 = new WeakMap();
  var pointWindowSizes$1 = new WeakMap(); // This allows use make points immutable (nothing changes inside)
  // Elliptic curve multiplication of Point by scalar. Fragile.
  // Scalars should always be less than curve order: this should be checked inside of a curve itself.
  // Creates precomputation tables for fast multiplication:
  // - private scalar is split by fixed size windows of W bits
  // - every window point is collected from window's table & added to accumulator
  // - since windows are different, same point inside tables won't be accessed more than once per calc
  // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
  // - +1 window is neccessary for wNAF
  // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
  // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
  // windows to be in different memory locations

  function wNAF$1(c, bits) {
    var constTimeNegate = function constTimeNegate(condition, item) {
      var neg = item.negate();
      return condition ? neg : item;
    };

    var validateW = function validateW(W) {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error("Wrong window size=".concat(W, ", should be [1..").concat(bits, "]"));
    };

    var opts = function opts(W) {
      validateW(W);
      var windows = Math.ceil(bits / W) + 1; // +1, because

      var windowSize = Math.pow(2, W - 1); // -1 because we skip zero

      return {
        windows: windows,
        windowSize: windowSize
      };
    };

    return {
      constTimeNegate: constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder: function unsafeLadder(elm, n) {
        var p = c.ZERO;
        var d = elm;

        while (n > _0n$8) {
          if (n & _1n$a) p = p.add(d);
          d = d["double"]();
          n >>= _1n$a;
        }

        return p;
      },

      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow: function precomputeWindow(elm, W) {
        var _opts = opts(W),
            windows = _opts.windows,
            windowSize = _opts.windowSize;

        var points = [];
        var p = elm;
        var base = p;

        for (var window = 0; window < windows; window++) {
          base = p;
          points.push(base); // =1, because we skip zero

          for (var i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }

          p = base["double"]();
        }

        return points;
      },

      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF: function wNAF(W, precomputes, n) {
        // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
        // But need to carefully remove other checks before wNAF. ORDER == bits here
        var _opts2 = opts(W),
            windows = _opts2.windows,
            windowSize = _opts2.windowSize;

        var p = c.ZERO;
        var f = c.BASE;
        var mask = BigInt(Math.pow(2, W) - 1); // Create mask with W ones: 0b1111 for W=4 etc.

        var maxNumber = Math.pow(2, W);
        var shiftBy = BigInt(W);

        for (var window = 0; window < windows; window++) {
          var offset = window * windowSize; // Extract W bits.

          var wbits = Number(n & mask); // Shift number by W bits.

          n >>= shiftBy; // If the bits are bigger than max size, we'll split those.
          // +224 => 256 - 32

          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n$a;
          } // This code was first written with assumption that 'f' and 'p' will never be infinity point:
          // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
          // there is negate now: it is possible that negated element from low value
          // would be the same as high element, which will create carry into next window.
          // It's not obvious how this can fail, but still worth investigating later.
          // Check if we're onto Zero point.
          // Add random point inside current window to f.


          var offset1 = offset;
          var offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero

          var cond1 = window % 2 !== 0;
          var cond2 = wbits < 0;

          if (wbits === 0) {
            // The most important part for const-time getPublicKey
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        } // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
        // Even if the variable is still unused, there are some checks which will
        // throw an exception, so compiler needs to prove they won't happen, which is hard.
        // At this point there is a way to F be infinity-point even if p is not,
        // which makes it less const-time: around 1 bigint multiply.


        return {
          p: p,
          f: f
        };
      },
      wNAFCached: function wNAFCached(P, n, transform) {
        var W = pointWindowSizes$1.get(P) || 1; // Calculate precomputes on a first run, reuse them after

        var comp = pointPrecomputes$1.get(P);

        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) pointPrecomputes$1.set(P, transform(comp));
        }

        return this.wNAF(W, comp, n);
      },
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      setWindowSize: function setWindowSize(P, W) {
        validateW(W);
        pointWindowSizes$1.set(P, W);
        pointPrecomputes$1["delete"](P);
      }
    };
  }
  /**
   * Pippenger algorithm for multi-scalar multiplication (MSM).
   * MSM is basically (Pa + Qb + Rc + ...).
   * 30x faster vs naive addition on L=4096, 10x faster with precomputes.
   * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.
   * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.
   * @param c Curve Point constructor
   * @param field field over CURVE.N - important that it's not over CURVE.P
   * @param points array of L curve points
   * @param scalars array of L scalars (aka private keys / bigints)
   */

  function pippenger$1(c, field, points, scalars) {
    // If we split scalars by some window (let's say 8 bits), every chunk will only
    // take 256 buckets even if there are 4096 scalars, also re-uses double.
    // TODO:
    // - https://eprint.iacr.org/2024/750.pdf
    // - https://tches.iacr.org/index.php/TCHES/article/view/10287
    // 0 is accepted in scalars
    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length) throw new Error('arrays of points and scalars must have equal length');
    scalars.forEach(function (s, i) {
      if (!field.isValid(s)) throw new Error("wrong scalar at index ".concat(i));
    });
    points.forEach(function (p, i) {
      if (!(p instanceof c)) throw new Error("wrong point at index ".concat(i));
    });
    var wbits = bitLen$1(BigInt(points.length));
    var windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits

    var MASK = (1 << windowSize) - 1;
    var buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array

    var lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;
    var sum = c.ZERO;

    for (var i = lastBits; i >= 0; i -= windowSize) {
      buckets.fill(c.ZERO);

      for (var j = 0; j < scalars.length; j++) {
        var scalar = scalars[j];

        var _wbits = Number(scalar >> BigInt(i) & BigInt(MASK));

        buckets[_wbits] = buckets[_wbits].add(points[j]);
      }

      var resI = c.ZERO; // not using this will do small speed-up, but will lose ct
      // Skip first bucket, because it is zero

      for (var _j2 = buckets.length - 1, sumI = c.ZERO; _j2 > 0; _j2--) {
        sumI = sumI.add(buckets[_j2]);
        resI = resI.add(sumI);
      }

      sum = sum.add(resI);
      if (i !== 0) for (var _j4 = 0; _j4 < windowSize; _j4++) sum = sum["double"]();
    }

    return sum;
  }
  function validateBasic$1(curve) {
    validateField$1(curve.Fp);
    validateObject$1(curve, {
      n: 'bigint',
      h: 'bigint',
      Gx: 'field',
      Gy: 'field'
    }, {
      nBitLength: 'isSafeInteger',
      nByteLength: 'isSafeInteger'
    }); // Set defaults

    return Object.freeze(_objectSpread2(_objectSpread2(_objectSpread2({}, nLength$1(curve.n, curve.nBitLength)), curve), {
      p: curve.Fp.ORDER
    }));
  }

  // prettier-ignore

  var _0n$7 = BigInt(0),
      _1n$9 = BigInt(1),
      _2n$6 = BigInt(2),
      _8n$3 = BigInt(8); // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:


  var VERIFY_DEFAULT$1 = {
    zip215: true
  };

  function validateOpts$3(curve) {
    var opts = validateBasic$1(curve);
    validateObject$1(curve, {
      hash: 'function',
      a: 'bigint',
      d: 'bigint',
      randomBytes: 'function'
    }, {
      adjustScalarBytes: 'function',
      domain: 'function',
      uvRatio: 'function',
      mapToCurve: 'function'
    }); // Set defaults

    return Object.freeze(_objectSpread2({}, opts));
  }
  /**
   * Creates Twisted Edwards curve with EdDSA signatures.
   * @example
   * import { Field } from '@noble/curves/abstract/modular';
   * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h
   * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })
   */


  function twistedEdwards$1(curveDef) {
    var CURVE = validateOpts$3(curveDef);
    var Fp = CURVE.Fp,
        CURVE_ORDER = CURVE.n,
        prehash = CURVE.prehash,
        cHash = CURVE.hash,
        randomBytes = CURVE.randomBytes,
        nByteLength = CURVE.nByteLength,
        cofactor = CURVE.h;

    var MASK = _2n$6 << BigInt(nByteLength * 8) - _1n$9;

    var modP = Fp.create; // Function overrides

    var Fn = Field$1(CURVE.n, CURVE.nBitLength); // sqrt(u/v)

    var uvRatio = CURVE.uvRatio || function (u, v) {
      try {
        return {
          isValid: true,
          value: Fp.sqrt(u * Fp.inv(v))
        };
      } catch (e) {
        return {
          isValid: false,
          value: _0n$7
        };
      }
    };

    var adjustScalarBytes = CURVE.adjustScalarBytes || function (bytes) {
      return bytes;
    }; // NOOP


    var domain = CURVE.domain || function (data, ctx, phflag) {
      abool$1('phflag', phflag);
      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');
      return data;
    }; // NOOP
    // 0 <= n < MASK
    // Coordinates larger than Fp.ORDER are allowed for zip215


    function aCoordinate(title, n) {
      aInRange$1('coordinate ' + title, n, _0n$7, MASK);
    }

    function assertPoint(other) {
      if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');
    } // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.


    var toAffineMemo = memoized$1(function (p, iz) {
      var x = p.ex,
          y = p.ey,
          z = p.ez;
      var is0 = p.is0();
      if (iz == null) iz = is0 ? _8n$3 : Fp.inv(z); // 8 was chosen arbitrarily

      var ax = modP(x * iz);
      var ay = modP(y * iz);
      var zz = modP(z * iz);
      if (is0) return {
        x: _0n$7,
        y: _1n$9
      };
      if (zz !== _1n$9) throw new Error('invZ was invalid');
      return {
        x: ax,
        y: ay
      };
    });
    var assertValidMemo = memoized$1(function (p) {
      var a = CURVE.a,
          d = CURVE.d;
      if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?
      // Equation in affine coordinates: ax² + y² = 1 + dx²y²
      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²

      var X = p.ex,
          Y = p.ey,
          Z = p.ez,
          T = p.et;
      var X2 = modP(X * X); // X²

      var Y2 = modP(Y * Y); // Y²

      var Z2 = modP(Z * Z); // Z²

      var Z4 = modP(Z2 * Z2); // Z⁴

      var aX2 = modP(X2 * a); // aX²

      var left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²

      var right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²

      if (left !== right) throw new Error('bad point: equation left != right (1)'); // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T

      var XY = modP(X * Y);
      var ZT = modP(Z * T);
      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');
      return true;
    }); // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates

    var Point = /*#__PURE__*/function () {
      function Point(ex, ey, ez, et) {
        _classCallCheck(this, Point);

        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et;
        aCoordinate('x', ex);
        aCoordinate('y', ey);
        aCoordinate('z', ez);
        aCoordinate('t', et);
        Object.freeze(this);
      }

      _createClass(Point, [{
        key: "x",
        get: function get() {
          return this.toAffine().x;
        }
      }, {
        key: "y",
        get: function get() {
          return this.toAffine().y;
        }
      }, {
        key: "_setWindowSize",
        value: // "Private method", don't use it directly
        function _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        } // Not required for fromHex(), which always creates valid points.
        // Could be useful for fromAffine().

      }, {
        key: "assertValidity",
        value: function assertValidity() {
          assertValidMemo(this);
        } // Compare one point to another.

      }, {
        key: "equals",
        value: function equals(other) {
          assertPoint(other);
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez;
          var X2 = other.ex,
              Y2 = other.ey,
              Z2 = other.ez;
          var X1Z2 = modP(X1 * Z2);
          var X2Z1 = modP(X2 * Z1);
          var Y1Z2 = modP(Y1 * Z2);
          var Y2Z1 = modP(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
      }, {
        key: "is0",
        value: function is0() {
          return this.equals(Point.ZERO);
        }
      }, {
        key: "negate",
        value: function negate() {
          // Flips point sign to a negative one (-x, y in affine coords)
          return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
        } // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.

      }, {
        key: "double",
        value: function double() {
          var a = CURVE.a;
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez;
          var A = modP(X1 * X1); // A = X12

          var B = modP(Y1 * Y1); // B = Y12

          var C = modP(_2n$6 * modP(Z1 * Z1)); // C = 2*Z12

          var D = modP(a * A); // D = a*A

          var x1y1 = X1 + Y1;
          var E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B

          var G = D + B; // G = D+B

          var F = G - C; // F = G-C

          var H = D - B; // H = D-B

          var X3 = modP(E * F); // X3 = E*F

          var Y3 = modP(G * H); // Y3 = G*H

          var T3 = modP(E * H); // T3 = E*H

          var Z3 = modP(F * G); // Z3 = F*G

          return new Point(X3, Y3, Z3, T3);
        } // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.

      }, {
        key: "add",
        value: function add(other) {
          assertPoint(other);
          var a = CURVE.a,
              d = CURVE.d;
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez,
              T1 = this.et;
          var X2 = other.ex,
              Y2 = other.ey,
              Z2 = other.ez,
              T2 = other.et; // Faster algo for adding 2 Extended Points when curve's a=-1.
          // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
          // Cost: 8M + 8add + 2*2.
          // Note: It does not check whether the `other` point is valid.

          if (a === BigInt(-1)) {
            var _A = modP((Y1 - X1) * (Y2 + X2));

            var _B = modP((Y1 + X1) * (Y2 - X2));

            var _F = modP(_B - _A);

            if (_F === _0n$7) return this["double"](); // Same point. Tests say it doesn't affect timing

            var _C = modP(Z1 * _2n$6 * T2);

            var _D = modP(T1 * _2n$6 * Z2);

            var _E = _D + _C;

            var _G = _B + _A;

            var _H = _D - _C;

            var _X = modP(_E * _F);

            var _Y = modP(_G * _H);

            var _T = modP(_E * _H);

            var _Z = modP(_F * _G);

            return new Point(_X, _Y, _Z, _T);
          }

          var A = modP(X1 * X2); // A = X1*X2

          var B = modP(Y1 * Y2); // B = Y1*Y2

          var C = modP(T1 * d * T2); // C = T1*d*T2

          var D = modP(Z1 * Z2); // D = Z1*Z2

          var E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B

          var F = D - C; // F = D-C

          var G = D + C; // G = D+C

          var H = modP(B - a * A); // H = B-a*A

          var X3 = modP(E * F); // X3 = E*F

          var Y3 = modP(G * H); // Y3 = G*H

          var T3 = modP(E * H); // T3 = E*H

          var Z3 = modP(F * G); // Z3 = F*G

          return new Point(X3, Y3, Z3, T3);
        }
      }, {
        key: "subtract",
        value: function subtract(other) {
          return this.add(other.negate());
        }
      }, {
        key: "wNAF",
        value: function wNAF(n) {
          return wnaf.wNAFCached(this, n, Point.normalizeZ);
        } // Constant-time multiplication.

      }, {
        key: "multiply",
        value: function multiply(scalar) {
          var n = scalar;
          aInRange$1('scalar', n, _1n$9, CURVE_ORDER); // 1 <= scalar < L

          var _this$wNAF = this.wNAF(n),
              p = _this$wNAF.p,
              f = _this$wNAF.f;

          return Point.normalizeZ([p, f])[0];
        } // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.

      }, {
        key: "multiplyUnsafe",
        value: function multiplyUnsafe(scalar) {
          var n = scalar;
          aInRange$1('scalar', n, _0n$7, CURVE_ORDER); // 0 <= scalar < L

          if (n === _0n$7) return I;
          if (this.equals(I) || n === _1n$9) return this;
          if (this.equals(G)) return this.wNAF(n).p;
          return wnaf.unsafeLadder(this, n);
        } // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.

      }, {
        key: "isSmallOrder",
        value: function isSmallOrder() {
          return this.multiplyUnsafe(cofactor).is0();
        } // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.

      }, {
        key: "isTorsionFree",
        value: function isTorsionFree() {
          return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
        } // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.

      }, {
        key: "toAffine",
        value: function toAffine(iz) {
          return toAffineMemo(this, iz);
        }
      }, {
        key: "clearCofactor",
        value: function clearCofactor() {
          var cofactor = CURVE.h;
          if (cofactor === _1n$9) return this;
          return this.multiplyUnsafe(cofactor);
        } // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.

      }, {
        key: "toRawBytes",
        value: function toRawBytes() {
          var _this$toAffine = this.toAffine(),
              x = _this$toAffine.x,
              y = _this$toAffine.y;

          var bytes = numberToBytesLE$1(y, Fp.BYTES); // each y has 2 x values (x, -y)

          bytes[bytes.length - 1] |= x & _1n$9 ? 0x80 : 0; // when compressing, it's enough to store y

          return bytes; // and use the last byte to encode sign of x
        }
      }, {
        key: "toHex",
        value: function toHex() {
          return bytesToHex$1(this.toRawBytes()); // Same as toRawBytes, but returns string.
        }
      }], [{
        key: "fromAffine",
        value: function fromAffine(p) {
          if (p instanceof Point) throw new Error('extended point not allowed');

          var _ref = p || {},
              x = _ref.x,
              y = _ref.y;

          aCoordinate('x', x);
          aCoordinate('y', y);
          return new Point(x, y, _1n$9, modP(x * y));
        }
      }, {
        key: "normalizeZ",
        value: function normalizeZ(points) {
          var toInv = Fp.invertBatch(points.map(function (p) {
            return p.ez;
          }));
          return points.map(function (p, i) {
            return p.toAffine(toInv[i]);
          }).map(Point.fromAffine);
        } // Multiscalar Multiplication

      }, {
        key: "msm",
        value: function msm(points, scalars) {
          return pippenger$1(Point, Fn, points, scalars);
        }
      }, {
        key: "fromHex",
        value: function fromHex(hex) {
          var zip215 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var d = CURVE.d,
              a = CURVE.a;
          var len = Fp.BYTES;
          hex = ensureBytes$1('pointHex', hex, len); // copy hex to a new array

          abool$1('zip215', zip215);
          var normed = hex.slice(); // copy again, we'll manipulate it

          var lastByte = hex[len - 1]; // select last byte

          normed[len - 1] = lastByte & ~0x80; // clear last bit

          var y = bytesToNumberLE$1(normed); // RFC8032 prohibits >= p, but ZIP215 doesn't
          // zip215=true:  0 <= y < MASK (2^256 for ed25519)
          // zip215=false: 0 <= y < P (2^255-19 for ed25519)

          var max = zip215 ? MASK : Fp.ORDER;
          aInRange$1('pointHex.y', y, _0n$7, max); // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
          // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)

          var y2 = modP(y * y); // denominator is always non-0 mod p.

          var u = modP(y2 - _1n$9); // u = y² - 1

          var v = modP(d * y2 - a); // v = d y² + 1.

          var _uvRatio = uvRatio(u, v),
              isValid = _uvRatio.isValid,
              x = _uvRatio.value; // √(u/v)


          if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');
          var isXOdd = (x & _1n$9) === _1n$9; // There are 2 square roots. Use x_0 bit to select proper

          var isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit

          if (!zip215 && x === _0n$7 && isLastByteOdd) // if x=0 and x_0 = 1, fail
            throw new Error('Point.fromHex: x=0 and x_0=1');
          if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x

          return Point.fromAffine({
            x: x,
            y: y
          });
        }
      }, {
        key: "fromPrivateKey",
        value: function fromPrivateKey(privKey) {
          return getExtendedPublicKey(privKey).point;
        }
      }]);

      return Point;
    }();

    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n$9, modP(CURVE.Gx * CURVE.Gy));
    Point.ZERO = new Point(_0n$7, _1n$9, _1n$9, _0n$7); // 0, 1, 1, 0

    var G = Point.BASE,
        I = Point.ZERO;
    var wnaf = wNAF$1(Point, nByteLength * 8);

    function modN(a) {
      return mod$1(a, CURVE_ORDER);
    } // Little-endian SHA512 with modulo n


    function modN_LE(hash) {
      return modN(bytesToNumberLE$1(hash));
    }
    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */


    function getExtendedPublicKey(key) {
      var len = nByteLength;
      key = ensureBytes$1('private key', key, len); // Hash private key with curve's hash function to produce uniformingly random input
      // Check byte lengths: ensure(64, h(ensure(32, key)))

      var hashed = ensureBytes$1('hashed private key', cHash(key), 2 * len);
      var head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE

      var prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)

      var scalar = modN_LE(head); // The actual private scalar

      var point = G.multiply(scalar); // Point on Edwards curve aka public key

      var pointBytes = point.toRawBytes(); // Uint8Array representation

      return {
        head: head,
        prefix: prefix,
        scalar: scalar,
        point: point,
        pointBytes: pointBytes
      };
    } // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared


    function getPublicKey(privKey) {
      return getExtendedPublicKey(privKey).pointBytes;
    } // int('LE', SHA512(dom2(F, C) || msgs)) mod N


    function hashDomainToScalar() {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();

      for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        msgs[_key - 1] = arguments[_key];
      }

      var msg = concatBytes$1.apply(ut$1, msgs);
      return modN_LE(cHash(domain(msg, ensureBytes$1('context', context), !!prehash)));
    }
    /** Signs message with privateKey. RFC8032 5.1.6 */


    function sign(msg, privKey) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      msg = ensureBytes$1('message', msg);
      if (prehash) msg = prehash(msg); // for ed25519ph etc.

      var _getExtendedPublicKey = getExtendedPublicKey(privKey),
          prefix = _getExtendedPublicKey.prefix,
          scalar = _getExtendedPublicKey.scalar,
          pointBytes = _getExtendedPublicKey.pointBytes;

      var r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)

      var R = G.multiply(r).toRawBytes(); // R = rG

      var k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)

      var s = modN(r + k * scalar); // S = (r + k * s) mod L

      aInRange$1('signature.s', s, _0n$7, CURVE_ORDER); // 0 <= s < l

      var res = concatBytes$1(R, numberToBytesLE$1(s, Fp.BYTES));
      return ensureBytes$1('result', res, nByteLength * 2); // 64-byte signature
    }

    var verifyOpts = VERIFY_DEFAULT$1;

    function verify(sig, msg, publicKey) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : verifyOpts;
      var context = options.context,
          zip215 = options.zip215;
      var len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.

      sig = ensureBytes$1('signature', sig, 2 * len); // An extended group equation is checked.

      msg = ensureBytes$1('message', msg);
      if (zip215 !== undefined) abool$1('zip215', zip215);
      if (prehash) msg = prehash(msg); // for ed25519ph, etc

      var s = bytesToNumberLE$1(sig.slice(len, 2 * len)); // zip215: true is good for consensus-critical apps and allows points < 2^256
      // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p

      var A, R, SB;

      try {
        A = Point.fromHex(publicKey, zip215);
        R = Point.fromHex(sig.slice(0, len), zip215);
        SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside
      } catch (error) {
        return false;
      }

      if (!zip215 && A.isSmallOrder()) return false;
      var k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
      var RkA = R.add(A.multiplyUnsafe(k)); // [8][S]B = [8]R + [8][k]A'

      return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
    }

    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.


    var utils = {
      getExtendedPublicKey: getExtendedPublicKey,
      // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
      randomPrivateKey: function randomPrivateKey() {
        return randomBytes(Fp.BYTES);
      },

      /**
       * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
       * values. This slows down first getPublicKey() by milliseconds (see Speed section),
       * but allows to speed-up subsequent getPublicKey() calls up to 20x.
       * @param windowSize 2, 4, 8, 16
       */
      precompute: function precompute() {
        var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
        var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;

        point._setWindowSize(windowSize);

        point.multiply(BigInt(3));
        return point;
      }
    };
    return {
      CURVE: CURVE,
      getPublicKey: getPublicKey,
      sign: sign,
      verify: verify,
      ExtendedPoint: Point,
      utils: utils
    };
  }

  /**
   * ed25519 Twisted Edwards curve with following addons:
   * - X25519 ECDH
   * - Ristretto cofactor elimination
   * - Elligator hash-to-group / point indistinguishability
   */

  var ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'); // √(-1) aka √(a) aka 2^((p-1)/4)

  var ED25519_SQRT_M1 = /* @__PURE__ */BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752'); // prettier-ignore

  BigInt(0);
      var _1n$8 = BigInt(1),
      _2n$5 = BigInt(2);
      BigInt(3); // prettier-ignore


  var _5n$1 = BigInt(5),
      _8n$2 = BigInt(8);

  function ed25519_pow_2_252_3(x) {
    // prettier-ignore
    var _10n = BigInt(10),
        _20n = BigInt(20),
        _40n = BigInt(40),
        _80n = BigInt(80);

    var P = ED25519_P;
    var x2 = x * x % P;
    var b2 = x2 * x % P; // x^3, 11

    var b4 = pow2$1(b2, _2n$5, P) * b2 % P; // x^15, 1111

    var b5 = pow2$1(b4, _1n$8, P) * x % P; // x^31

    var b10 = pow2$1(b5, _5n$1, P) * b5 % P;
    var b20 = pow2$1(b10, _10n, P) * b10 % P;
    var b40 = pow2$1(b20, _20n, P) * b20 % P;
    var b80 = pow2$1(b40, _40n, P) * b40 % P;
    var b160 = pow2$1(b80, _80n, P) * b80 % P;
    var b240 = pow2$1(b160, _80n, P) * b80 % P;
    var b250 = pow2$1(b240, _10n, P) * b10 % P;
    var pow_p_5_8 = pow2$1(b250, _2n$5, P) * x % P; // ^ To pow to (p+3)/8, multiply it by x.

    return {
      pow_p_5_8: pow_p_5_8,
      b2: b2
    };
  }

  function adjustScalarBytes(bytes) {
    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
    // set the three least significant bits of the first byte
    bytes[0] &= 248; // 0b1111_1000
    // and the most significant bit of the last to zero,

    bytes[31] &= 127; // 0b0111_1111
    // set the second most significant bit of the last byte to 1

    bytes[31] |= 64; // 0b0100_0000

    return bytes;
  } // sqrt(u/v)


  function uvRatio(u, v) {
    var P = ED25519_P;
    var v3 = mod$1(v * v * v, P); // v³

    var v7 = mod$1(v3 * v3 * v, P); // v⁷
    // (p+3)/8 and (p-5)/8

    var pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
    var x = mod$1(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8

    var vx2 = mod$1(v * x * x, P); // vx²

    var root1 = x; // First root candidate

    var root2 = mod$1(x * ED25519_SQRT_M1, P); // Second root candidate

    var useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root

    var useRoot2 = vx2 === mod$1(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)

    var noRoot = vx2 === mod$1(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)

    if (useRoot1) x = root1;
    if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time

    if (isNegativeLE$1(x, P)) x = mod$1(-x, P);
    return {
      isValid: useRoot1 || useRoot2,
      value: x
    };
  } // Just in case

  var Fp$1 = /* @__PURE__ */function () {
    return Field$1(ED25519_P, undefined, true);
  }();

  var ed25519Defaults = /* @__PURE__ */function () {
    return {
      // Param: a
      a: BigInt(-1),
      // Fp.create(-1) is proper; our way still works and is faster
      // d is equal to -121665/121666 over finite field.
      // Negative number is P - number, and division is invert(number, P)
      d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
      // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
      Fp: Fp$1,
      // Subgroup order: how many points curve has
      // 2n**252n + 27742317777372353535851937790883648493n;
      n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),
      // Cofactor
      h: _8n$2,
      // Base point (x, y) aka generator point
      Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
      Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
      hash: sha512$1,
      randomBytes: randomBytes,
      adjustScalarBytes: adjustScalarBytes,
      // dom2
      // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
      // Constant-time, u/√v
      uvRatio: uvRatio
    };
  }();
  /**
   * ed25519 curve with EdDSA signatures.
   */


  var ed25519$1 = /* @__PURE__ */function () {
    return twistedEdwards$1(ed25519Defaults);
  }();
   // legacy

  var bn$2 = {exports: {}};

  var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

  (function (module) {
    (function (module, exports) {

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      } // Could use `inherits` module, but don't want to move from single file
      // architecture yet.


      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      } // BN


      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0; // Reduction context

        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }

      if (_typeof(module) === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;

      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$1$1.Buffer;
        }
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (_typeof(number) === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }

        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;

        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);

            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }

        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return; // Reverse the bytes

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');

        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;

        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }

        return this._strip();
      };

      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index); // '0' - '9'

        if (c >= 48 && c <= 57) {
          return c - 48; // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55; // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);

        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }

        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        } // 24-bits chunks


        var off = 0;
        var j = 0;
        var w;

        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;

          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul; // 'a'

          if (c >= 49) {
            b = c - 49 + 0xa; // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa; // '0' - '9'
          } else {
            b = c;
          }

          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }

        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1; // Find length of limb in base

        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }

        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;

        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }

        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }

        return this;
      }; // Remove leading `0` from `this`


      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }

        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }

        return this;
      }; // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility


      if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
        try {
          BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */


      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;

        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;

          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;
            off += 2;

            if (off >= 26) {
              off -= 26;
              i--;
            }

            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }

          if (carry !== 0) {
            out = carry.toString(16) + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;

          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }

          if (this.isZero()) {
            out = '0' + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];

        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }

        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }

        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 0xff;

          if (position < res.length) {
            res[position++] = word >> 8 & 0xff;
          }

          if (position < res.length) {
            res[position++] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 0xff;

          if (position >= 0) {
            res[position--] = word >> 8 & 0xff;
          }

          if (position >= 0) {
            res[position--] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;

          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }

          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }

          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }

          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }

          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;

        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }

        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }

        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }

        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }

        if ((t & 0x1) === 0) {
          r++;
        }

        return r;
      }; // Return number of used bits in a BN


      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];

        var hi = this._countBits(w);

        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 0x01;
        }

        return w;
      } // Number of trailing zero bits


      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;

        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);

          r += b;
          if (b !== 26) break;
        }

        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }

        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }

        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      }; // Return negative clone of `this`


      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      }; // Or `num` with `this` in-place


      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      }; // Or `num` with `this`


      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      }; // And `num` with `this` in-place


      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;

        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;
        return this._strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      }; // And `num` with `this`


      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      }; // Xor `num` with `this` in-place


      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;
        return this._strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      }; // Xor `num` with `this`


      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      }; // Not ``this`` with ``width`` bitwidth


      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26; // Extend the buffer with leading zeroes

        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        } // Handle complete words


        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        } // Handle the residue


        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        } // And remove leading zeroes


        return this._strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      }; // Set `bit` of `this`


      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      }; // Add `num` to `this` in-place


      BN.prototype.iadd = function iadd(num) {
        var r; // negative + positive

        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign(); // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        } // a.length > b.length


        var a, b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;

        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++; // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      }; // Add `num` to `this`


      BN.prototype.add = function add(num) {
        var res;

        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      }; // Subtract `num` from `this` in-place


      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign(); // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        } // At this point both numbers are positive


        var cmp = this.cmp(num); // Optimization - zeroify

        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        } // a > b


        var a, b;

        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        } // Copy rest of the words


        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      }; // Subtract `num` from `this`


      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }

          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }

        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      } // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).


      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */

        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */

        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */

        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */

        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */

        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */

        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */

        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */

        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */

        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */

        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */

        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */

        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */

        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */

        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */

        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */

        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */

        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */

        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */

        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;

        if (c !== 0) {
          o[19] = c;
          out.length++;
        }

        return out;
      }; // Polyfill comb


      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;

        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }

          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }

        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;

        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      }; // Cooley-Tukey algorithm for FFT


      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      }; // Multiply employing FFT


      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      }; // In-place Multiplication


      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000); // Carry

        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      }; // `this` * `this`


      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      }; // `this` * `this` in-place


      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      }; // Math.pow(`this`, `num`)


      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1); // Skip leading zeroes

        var res = this;

        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }

        return res;
      }; // Shift-left in-place


      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      }; // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits


      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;

        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h); // Extended mode, copy masked part

        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }

          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;

          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;

        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        } // Push carried bits as a mask


        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      }; // Shift-left


      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      }; // Shift-right


      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      }; // Test if n bit is set


      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) return false; // Check bit and return

        var w = this.words[s];
        return !!(w & q);
      }; // Return only lowers bits of number (in-place)


      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }

        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      }; // Return only lowers bits of number


      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      }; // Add plain number `num` to `this`


      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num); // Possible sign change

        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        } // Add without checks


        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num; // Carry

        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;

          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }

        this.length = Math.max(this.length, i + 1);
        return this;
      }; // Subtract plain number `num` from `this`


      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;

        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }

        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip(); // Subtraction overflow

        assert(carry === -1);
        carry = 0;

        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }

        this.negative = 1;
        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num; // Normalize

        var bhi = b.words[b.length - 1] | 0;

        var bhiBits = this._countBits(bhi);

        shift = 26 - bhiBits;

        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        } // Initialize quotient


        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);

          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);

        if (diff.negative === 0) {
          a = diff;

          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)

          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);

          while (a.negative !== 0) {
            qj--;
            a.negative = 0;

            a._ishlnsubmul(b, 1, j);

            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }

          if (q) {
            q.words[j] = qj;
          }
        }

        if (q) {
          q._strip();
        }

        a._strip(); // Denormalize


        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested


      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;

        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        } // Both numbers are positive at this point
        // Strip both numbers to approximate shift value


        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        } // Very short reduction


        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      }; // Find `this` / `num`


      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      }; // Find `this` % `num`


      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      }; // Find Round(`this` / `num`)


      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num); // Fast case - exact division

        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half); // Round down

        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      }; // WARNING: DEPRECATED


      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      }; // In-place division by number


      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        this._strip();

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        } // A * x + B * y = x


        var A = new BN(1);
        var B = new BN(0); // C * x + D * y = y

        var C = new BN(0);
        var D = new BN(1);
        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            x.iushrn(i);

            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            y.iushrn(j);

            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      }; // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed


      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            a.iushrn(i);

            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            b.iushrn(j);

            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;

        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0; // Remove common factor of two

        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }

          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);

          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      }; // Invert number in the field F(num)


      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      }; // And first word and num


      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      }; // Increment at the bit position in-line


      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) {
          this._expand(s + 1);

          this.words[s] |= q;
          return this;
        } // Add bit and propagate, if needed


        var carry = q;

        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;

        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }

        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`


      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Unsigned comparison


      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;

          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }

          break;
        }

        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      }; //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //


      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');

        this.red._verify1(this);

        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');

        this.red._verify1(this);

        return this.red.isqr(this);
      }; // Square root over p


      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');

        this.red._verify1(this);

        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');

        this.red._verify1(this);

        return this.red.invm(this);
      }; // Return negative clone of `this` % `red modulo`


      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');

        this.red._verify1(this);

        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');

        this.red._verify1(this);

        return this.red.pow(this, num);
      }; // Prime numbers with efficient reduction


      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      }; // Pseudo-Mersenne prime

      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }

      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);

        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }

        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        } // Shift by 9 limbs


        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }

        prev >>>= 22;
        input.words[i - 10] = prev;

        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

        var lo = 0;

        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        } // Fast length reduction


        if (num.words[num.length - 1] === 0) {
          num.length--;

          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }

        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }

      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }

      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }

      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;

        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }

        if (carry !== 0) {
          num.words[num.length++] = carry;
        }

        return num;
      }; // Exported mostly for testing purposes, use plain name instead


      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;

        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }

        primes[name] = prime;
        return prime;
      }; //
      // Base reduction engine
      //


      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);

          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);

        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);

        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);

        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1); // Fast case

        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)


        var q = this.m.subn(1);
        var s = 0;

        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }

        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg(); // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.

        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;

        while (t.cmp(one) !== 0) {
          var tmp = t;

          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }

          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);

        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;

        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;

        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];

          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;

            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }

          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      }; //
      // Montgomery method engine
      //


      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();

        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }

      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
  })(bn$2);

  var BN$1 = bn$2.exports;

  var safeBuffer$1 = {exports: {}};

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require$$1$1;
    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return buffer.SlowBuffer(size);
    };
  })(safeBuffer$1, safeBuffer$1.exports);

  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
  // @ts-ignore


  var _Buffer$1 = safeBuffer$1.exports.Buffer;

  function base$2(ALPHABET) {
    if (ALPHABET.length >= 255) {
      throw new TypeError('Alphabet too long');
    }

    var BASE_MAP = new Uint8Array(256);

    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }

    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);

      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + ' is ambiguous');
      }

      BASE_MAP[xc] = i;
    }

    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

    function encode(source) {
      if (Array.isArray(source) || source instanceof Uint8Array) {
        source = _Buffer$1.from(source);
      }

      if (!_Buffer$1.isBuffer(source)) {
        throw new TypeError('Expected Buffer');
      }

      if (source.length === 0) {
        return '';
      } // Skip & count leading zeroes.


      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;

      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      } // Allocate enough space in big-endian base58 representation.


      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size); // Process the bytes.

      while (pbegin !== pend) {
        var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

        var i = 0;

        for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        pbegin++;
      } // Skip leading zeroes in base58 result.


      var it2 = size - length;

      while (it2 !== size && b58[it2] === 0) {
        it2++;
      } // Translate the result into a string.


      var str = LEADER.repeat(zeroes);

      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }

      return str;
    }

    function decodeUnsafe(source) {
      if (typeof source !== 'string') {
        throw new TypeError('Expected String');
      }

      if (source.length === 0) {
        return _Buffer$1.alloc(0);
      }

      var psz = 0; // Skip and count leading '1's.

      var zeroes = 0;
      var length = 0;

      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      } // Allocate enough space in big-endian base256 representation.


      var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

      var b256 = new Uint8Array(size); // Process the characters.

      while (source[psz]) {
        // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

        if (carry === 255) {
          return;
        }

        var i = 0;

        for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        psz++;
      } // Skip leading zeroes in b256.


      var it4 = size - length;

      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }

      var vch = _Buffer$1.allocUnsafe(zeroes + (size - it4));

      vch.fill(0x00, 0, zeroes);
      var j = zeroes;

      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }

      return vch;
    }

    function decode(string) {
      var buffer = decodeUnsafe(string);

      if (buffer) {
        return buffer;
      }

      throw new Error('Non-base' + BASE + ' character');
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    };
  }

  var src$2 = base$2;

  var basex$2 = src$2;
  var ALPHABET$2 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  var bs58$4 = basex$2(ALPHABET$2);
  var bs58$5 = bs58$4;

  // BTC network is doing 2^67 hashes/sec as per early 2023.
  // Round constants:
  // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
  // prettier-ignore

  var SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]); // Initial state:
  // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
  // prettier-ignore

  var SHA256_IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]); // Temporary buffer, not used to store anything between runs
  // Named this way because it matches specification.

  var SHA256_W = /* @__PURE__ */new Uint32Array(64);
  var SHA256 = /*#__PURE__*/function (_HashMD) {
    _inherits(SHA256, _HashMD);

    var _super = _createSuper(SHA256);

    function SHA256() {
      var _this;

      _classCallCheck(this, SHA256);

      _this = _super.call(this, 64, 32, 8, false); // We cannot use array here since array allows indexing by variable
      // which means optimizer/compiler cannot use registers.

      _this.A = SHA256_IV[0] | 0;
      _this.B = SHA256_IV[1] | 0;
      _this.C = SHA256_IV[2] | 0;
      _this.D = SHA256_IV[3] | 0;
      _this.E = SHA256_IV[4] | 0;
      _this.F = SHA256_IV[5] | 0;
      _this.G = SHA256_IV[6] | 0;
      _this.H = SHA256_IV[7] | 0;
      return _this;
    }

    _createClass(SHA256, [{
      key: "get",
      value: function get() {
        var A = this.A,
            B = this.B,
            C = this.C,
            D = this.D,
            E = this.E,
            F = this.F,
            G = this.G,
            H = this.H;
        return [A, B, C, D, E, F, G, H];
      } // prettier-ignore

    }, {
      key: "set",
      value: function set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
    }, {
      key: "process",
      value: function process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (var i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);

        for (var _i2 = 16; _i2 < 64; _i2++) {
          var W15 = SHA256_W[_i2 - 15];
          var W2 = SHA256_W[_i2 - 2];
          var s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
          var s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
          SHA256_W[_i2] = s1 + SHA256_W[_i2 - 7] + s0 + SHA256_W[_i2 - 16] | 0;
        } // Compression function main loop, 64 rounds


        var A = this.A,
            B = this.B,
            C = this.C,
            D = this.D,
            E = this.E,
            F = this.F,
            G = this.G,
            H = this.H;

        for (var _i4 = 0; _i4 < 64; _i4++) {
          var sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
          var T1 = H + sigma1 + Chi$1(E, F, G) + SHA256_K[_i4] + SHA256_W[_i4] | 0;
          var sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
          var T2 = sigma0 + Maj$1(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        } // Add the compressed chunk to the current hash value


        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
    }, {
      key: "roundClean",
      value: function roundClean() {
        SHA256_W.fill(0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    }]);

    return SHA256;
  }(HashMD$1); // Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
  /**
   * SHA2-256 hash function
   * @param message - data that would be hashed
   */


  var sha256 = /* @__PURE__ */wrapConstructor(function () {
    return new SHA256();
  });

  var lib$1 = {};

  var bn$1 = {exports: {}};

  (function (module) {
    (function (module, exports) {

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      } // Could use `inherits` module, but don't want to move from single file
      // architecture yet.


      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      } // BN


      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0; // Reduction context

        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }

      if (_typeof(module) === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;

      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$1$1.Buffer;
        }
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (_typeof(number) === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }

        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;

        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);

            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }

        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return; // Reverse the bytes

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');

        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;

        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }

        return this._strip();
      };

      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index); // '0' - '9'

        if (c >= 48 && c <= 57) {
          return c - 48; // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55; // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);

        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }

        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        } // 24-bits chunks


        var off = 0;
        var j = 0;
        var w;

        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;

          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul; // 'a'

          if (c >= 49) {
            b = c - 49 + 0xa; // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa; // '0' - '9'
          } else {
            b = c;
          }

          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }

        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1; // Find length of limb in base

        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }

        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;

        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }

        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }

        return this;
      }; // Remove leading `0` from `this`


      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }

        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }

        return this;
      }; // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility


      if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
        try {
          BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */


      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;

        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;

          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;

            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }

            off += 2;

            if (off >= 26) {
              off -= 26;
              i--;
            }
          }

          if (carry !== 0) {
            out = carry.toString(16) + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;

          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }

          if (this.isZero()) {
            out = '0' + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];

        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }

        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }

        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 0xff;

          if (position < res.length) {
            res[position++] = word >> 8 & 0xff;
          }

          if (position < res.length) {
            res[position++] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 0xff;

          if (position >= 0) {
            res[position--] = word >> 8 & 0xff;
          }

          if (position >= 0) {
            res[position--] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;

          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }

          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }

          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }

          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }

          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;

        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }

        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }

        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }

        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }

        if ((t & 0x1) === 0) {
          r++;
        }

        return r;
      }; // Return number of used bits in a BN


      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];

        var hi = this._countBits(w);

        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 0x01;
        }

        return w;
      } // Number of trailing zero bits


      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;

        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);

          r += b;
          if (b !== 26) break;
        }

        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }

        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }

        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      }; // Return negative clone of `this`


      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      }; // Or `num` with `this` in-place


      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      }; // Or `num` with `this`


      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      }; // And `num` with `this` in-place


      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;

        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;
        return this._strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      }; // And `num` with `this`


      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      }; // Xor `num` with `this` in-place


      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;
        return this._strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      }; // Xor `num` with `this`


      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      }; // Not ``this`` with ``width`` bitwidth


      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26; // Extend the buffer with leading zeroes

        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        } // Handle complete words


        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        } // Handle the residue


        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        } // And remove leading zeroes


        return this._strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      }; // Set `bit` of `this`


      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      }; // Add `num` to `this` in-place


      BN.prototype.iadd = function iadd(num) {
        var r; // negative + positive

        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign(); // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        } // a.length > b.length


        var a, b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;

        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++; // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      }; // Add `num` to `this`


      BN.prototype.add = function add(num) {
        var res;

        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      }; // Subtract `num` from `this` in-place


      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign(); // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        } // At this point both numbers are positive


        var cmp = this.cmp(num); // Optimization - zeroify

        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        } // a > b


        var a, b;

        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        } // Copy rest of the words


        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      }; // Subtract `num` from `this`


      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }

          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }

        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      } // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).


      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */

        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */

        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */

        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */

        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */

        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */

        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */

        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */

        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */

        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */

        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */

        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */

        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */

        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */

        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */

        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */

        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */

        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */

        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */

        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;

        if (c !== 0) {
          o[19] = c;
          out.length++;
        }

        return out;
      }; // Polyfill comb


      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;

        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }

          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }

        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;

        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      }; // Cooley-Tukey algorithm for FFT


      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      }; // Multiply employing FFT


      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      }; // In-place Multiplication


      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000); // Carry

        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      }; // `this` * `this`


      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      }; // `this` * `this` in-place


      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      }; // Math.pow(`this`, `num`)


      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1); // Skip leading zeroes

        var res = this;

        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }

        return res;
      }; // Shift-left in-place


      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      }; // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits


      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;

        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h); // Extended mode, copy masked part

        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }

          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;

          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;

        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        } // Push carried bits as a mask


        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      }; // Shift-left


      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      }; // Shift-right


      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      }; // Test if n bit is set


      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) return false; // Check bit and return

        var w = this.words[s];
        return !!(w & q);
      }; // Return only lowers bits of number (in-place)


      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }

        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      }; // Return only lowers bits of number


      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      }; // Add plain number `num` to `this`


      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num); // Possible sign change

        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        } // Add without checks


        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num; // Carry

        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;

          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }

        this.length = Math.max(this.length, i + 1);
        return this;
      }; // Subtract plain number `num` from `this`


      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;

        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }

        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip(); // Subtraction overflow

        assert(carry === -1);
        carry = 0;

        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }

        this.negative = 1;
        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num; // Normalize

        var bhi = b.words[b.length - 1] | 0;

        var bhiBits = this._countBits(bhi);

        shift = 26 - bhiBits;

        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        } // Initialize quotient


        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);

          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);

        if (diff.negative === 0) {
          a = diff;

          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)

          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);

          while (a.negative !== 0) {
            qj--;
            a.negative = 0;

            a._ishlnsubmul(b, 1, j);

            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }

          if (q) {
            q.words[j] = qj;
          }
        }

        if (q) {
          q._strip();
        }

        a._strip(); // Denormalize


        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested


      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;

        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        } // Both numbers are positive at this point
        // Strip both numbers to approximate shift value


        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        } // Very short reduction


        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      }; // Find `this` / `num`


      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      }; // Find `this` % `num`


      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      }; // Find Round(`this` / `num`)


      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num); // Fast case - exact division

        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half); // Round down

        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      }; // WARNING: DEPRECATED


      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      }; // In-place division by number


      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        this._strip();

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        } // A * x + B * y = x


        var A = new BN(1);
        var B = new BN(0); // C * x + D * y = y

        var C = new BN(0);
        var D = new BN(1);
        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            x.iushrn(i);

            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            y.iushrn(j);

            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      }; // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed


      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            a.iushrn(i);

            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            b.iushrn(j);

            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;

        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0; // Remove common factor of two

        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }

          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);

          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      }; // Invert number in the field F(num)


      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      }; // And first word and num


      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      }; // Increment at the bit position in-line


      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) {
          this._expand(s + 1);

          this.words[s] |= q;
          return this;
        } // Add bit and propagate, if needed


        var carry = q;

        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;

        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }

        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`


      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Unsigned comparison


      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;

          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }

          break;
        }

        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      }; //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //


      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');

        this.red._verify1(this);

        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');

        this.red._verify1(this);

        return this.red.isqr(this);
      }; // Square root over p


      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');

        this.red._verify1(this);

        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');

        this.red._verify1(this);

        return this.red.invm(this);
      }; // Return negative clone of `this` % `red modulo`


      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');

        this.red._verify1(this);

        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');

        this.red._verify1(this);

        return this.red.pow(this, num);
      }; // Prime numbers with efficient reduction


      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      }; // Pseudo-Mersenne prime

      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }

      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);

        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }

        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        } // Shift by 9 limbs


        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }

        prev >>>= 22;
        input.words[i - 10] = prev;

        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

        var lo = 0;

        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        } // Fast length reduction


        if (num.words[num.length - 1] === 0) {
          num.length--;

          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }

        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }

      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }

      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }

      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;

        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }

        if (carry !== 0) {
          num.words[num.length++] = carry;
        }

        return num;
      }; // Exported mostly for testing purposes, use plain name instead


      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;

        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }

        primes[name] = prime;
        return prime;
      }; //
      // Base reduction engine
      //


      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);

          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);

        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);

        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);

        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1); // Fast case

        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)


        var q = this.m.subn(1);
        var s = 0;

        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }

        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg(); // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.

        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;

        while (t.cmp(one) !== 0) {
          var tmp = t;

          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }

          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);

        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;

        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;

        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];

          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;

            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }

          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      }; //
      // Montgomery method engine
      //


      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();

        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }

      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
  })(bn$1);

  var safeBuffer = {exports: {}};

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require$$1$1;
    var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return buffer.SlowBuffer(size);
    };
  })(safeBuffer, safeBuffer.exports);

  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
  // @ts-ignore


  var _Buffer = safeBuffer.exports.Buffer;

  function base$1(ALPHABET) {
    if (ALPHABET.length >= 255) {
      throw new TypeError('Alphabet too long');
    }

    var BASE_MAP = new Uint8Array(256);

    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }

    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);

      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + ' is ambiguous');
      }

      BASE_MAP[xc] = i;
    }

    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

    function encode(source) {
      if (Array.isArray(source) || source instanceof Uint8Array) {
        source = _Buffer.from(source);
      }

      if (!_Buffer.isBuffer(source)) {
        throw new TypeError('Expected Buffer');
      }

      if (source.length === 0) {
        return '';
      } // Skip & count leading zeroes.


      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;

      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      } // Allocate enough space in big-endian base58 representation.


      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size); // Process the bytes.

      while (pbegin !== pend) {
        var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

        var i = 0;

        for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        pbegin++;
      } // Skip leading zeroes in base58 result.


      var it2 = size - length;

      while (it2 !== size && b58[it2] === 0) {
        it2++;
      } // Translate the result into a string.


      var str = LEADER.repeat(zeroes);

      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }

      return str;
    }

    function decodeUnsafe(source) {
      if (typeof source !== 'string') {
        throw new TypeError('Expected String');
      }

      if (source.length === 0) {
        return _Buffer.alloc(0);
      }

      var psz = 0; // Skip and count leading '1's.

      var zeroes = 0;
      var length = 0;

      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      } // Allocate enough space in big-endian base256 representation.


      var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

      var b256 = new Uint8Array(size); // Process the characters.

      while (source[psz]) {
        // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

        if (carry === 255) {
          return;
        }

        var i = 0;

        for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        psz++;
      } // Skip leading zeroes in b256.


      var it4 = size - length;

      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }

      var vch = _Buffer.allocUnsafe(zeroes + (size - it4));

      vch.fill(0x00, 0, zeroes);
      var j = zeroes;

      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }

      return vch;
    }

    function decode(string) {
      var buffer = decodeUnsafe(string);

      if (buffer) {
        return buffer;
      }

      throw new Error('Non-base' + BASE + ' character');
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    };
  }

  var src$1 = base$1;

  var basex$1 = src$1;
  var ALPHABET$1 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  var bs58$3 = basex$1(ALPHABET$1);

  function inRange$1(a, min, max) {
    return min <= a && a <= max;
  }
  /**
   * @param {*} o
   * @return {Object}
   */


  function ToDictionary(o) {
    if (o === undefined) return {};
    if (o === Object(o)) return o;
    throw TypeError('Could not convert argument to dictionary');
  }
  /**
   * @param {string} string Input string of UTF-16 code units.
   * @return {!Array.<number>} Code points.
   */


  function stringToCodePoints(string) {
    // https://heycam.github.io/webidl/#dfn-obtain-unicode
    // 1. Let S be the DOMString value.
    var s = String(string); // 2. Let n be the length of S.

    var n = s.length; // 3. Initialize i to 0.

    var i = 0; // 4. Initialize U to be an empty sequence of Unicode characters.

    var u = []; // 5. While i < n:

    while (i < n) {
      // 1. Let c be the code unit in S at index i.
      var c = s.charCodeAt(i); // 2. Depending on the value of c:
      // c < 0xD800 or c > 0xDFFF

      if (c < 0xD800 || c > 0xDFFF) {
        // Append to U the Unicode character with code point c.
        u.push(c);
      } // 0xDC00 ≤ c ≤ 0xDFFF
      else if (0xDC00 <= c && c <= 0xDFFF) {
        // Append to U a U+FFFD REPLACEMENT CHARACTER.
        u.push(0xFFFD);
      } // 0xD800 ≤ c ≤ 0xDBFF
      else if (0xD800 <= c && c <= 0xDBFF) {
        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
        // CHARACTER.
        if (i === n - 1) {
          u.push(0xFFFD);
        } // 2. Otherwise, i < n−1:
        else {
          // 1. Let d be the code unit in S at index i+1.
          var d = string.charCodeAt(i + 1); // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:

          if (0xDC00 <= d && d <= 0xDFFF) {
            // 1. Let a be c & 0x3FF.
            var a = c & 0x3FF; // 2. Let b be d & 0x3FF.

            var b = d & 0x3FF; // 3. Append to U the Unicode character with code point
            // 2^16+2^10*a+b.

            u.push(0x10000 + (a << 10) + b); // 4. Set i to i+1.

            i += 1;
          } // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
          // U+FFFD REPLACEMENT CHARACTER.
          else {
            u.push(0xFFFD);
          }
        }
      } // 3. Set i to i+1.


      i += 1;
    } // 6. Return U.


    return u;
  }
  /**
   * @param {!Array.<number>} code_points Array of code points.
   * @return {string} string String of UTF-16 code units.
   */


  function codePointsToString(code_points) {
    var s = '';

    for (var i = 0; i < code_points.length; ++i) {
      var cp = code_points[i];

      if (cp <= 0xFFFF) {
        s += String.fromCharCode(cp);
      } else {
        cp -= 0x10000;
        s += String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);
      }
    }

    return s;
  } //
  // Implementation of Encoding specification
  // https://encoding.spec.whatwg.org/
  //
  //
  // 3. Terminology
  //

  /**
   * End-of-stream is a special token that signifies no more tokens
   * are in the stream.
   * @const
   */


  var end_of_stream = -1;
  /**
   * A stream represents an ordered sequence of tokens.
   *
   * @constructor
   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
   * stream.
   */

  function Stream(tokens) {
    /** @type {!Array.<number>} */
    this.tokens = [].slice.call(tokens);
  }

  Stream.prototype = {
    /**
     * @return {boolean} True if end-of-stream has been hit.
     */
    endOfStream: function endOfStream() {
      return !this.tokens.length;
    },

    /**
     * When a token is read from a stream, the first token in the
     * stream must be returned and subsequently removed, and
     * end-of-stream must be returned otherwise.
     *
     * @return {number} Get the next token from the stream, or
     * end_of_stream.
     */
    read: function read() {
      if (!this.tokens.length) return end_of_stream;
      return this.tokens.shift();
    },

    /**
     * When one or more tokens are prepended to a stream, those tokens
     * must be inserted, in given order, before the first token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
     */
    prepend: function prepend(token) {
      if (Array.isArray(token)) {
        var tokens =
        /**@type {!Array.<number>}*/
        token;

        while (tokens.length) this.tokens.unshift(tokens.pop());
      } else {
        this.tokens.unshift(token);
      }
    },

    /**
     * When one or more tokens are pushed to a stream, those tokens
     * must be inserted, in given order, after the last token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
     */
    push: function push(token) {
      if (Array.isArray(token)) {
        var tokens =
        /**@type {!Array.<number>}*/
        token;

        while (tokens.length) this.tokens.push(tokens.shift());
      } else {
        this.tokens.push(token);
      }
    }
  }; //
  // 4. Encodings
  //
  // 4.1 Encoders and decoders

  /** @const */

  var finished = -1;
  /**
   * @param {boolean} fatal If true, decoding errors raise an exception.
   * @param {number=} opt_code_point Override the standard fallback code point.
   * @return {number} The code point to insert on a decoding error.
   */

  function decoderError(fatal, opt_code_point) {
    if (fatal) throw TypeError('Decoder error');
    return opt_code_point || 0xFFFD;
  }
  // 7. API
  //

  /** @const */

  var DEFAULT_ENCODING = 'utf-8'; // 7.1 Interface TextDecoder

  /**
   * @constructor
   * @param {string=} encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */

  function TextDecoder$1(encoding, options) {
    if (!(this instanceof TextDecoder$1)) {
      return new TextDecoder$1(encoding, options);
    }

    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;

    if (encoding !== DEFAULT_ENCODING) {
      throw new Error('Encoding not supported. Only utf-8 is supported');
    }

    options = ToDictionary(options);
    /** @private @type {boolean} */

    this._streaming = false;
    /** @private @type {boolean} */

    this._BOMseen = false;
    /** @private @type {?Decoder} */

    this._decoder = null;
    /** @private @type {boolean} */

    this._fatal = Boolean(options['fatal']);
    /** @private @type {boolean} */

    this._ignoreBOM = Boolean(options['ignoreBOM']);
    Object.defineProperty(this, 'encoding', {
      value: 'utf-8'
    });
    Object.defineProperty(this, 'fatal', {
      value: this._fatal
    });
    Object.defineProperty(this, 'ignoreBOM', {
      value: this._ignoreBOM
    });
  }

  TextDecoder$1.prototype = {
    /**
     * @param {ArrayBufferView=} input The buffer of bytes to decode.
     * @param {Object=} options
     * @return {string} The decoded string.
     */
    decode: function decode(input, options) {
      var bytes;

      if (_typeof(input) === 'object' && input instanceof ArrayBuffer) {
        bytes = new Uint8Array(input);
      } else if (_typeof(input) === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {
        bytes = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
      } else {
        bytes = new Uint8Array(0);
      }

      options = ToDictionary(options);

      if (!this._streaming) {
        this._decoder = new UTF8Decoder({
          fatal: this._fatal
        });
        this._BOMseen = false;
      }

      this._streaming = Boolean(options['stream']);
      var input_stream = new Stream(bytes);
      var code_points = [];
      /** @type {?(number|!Array.<number>)} */

      var result;

      while (!input_stream.endOfStream()) {
        result = this._decoder.handler(input_stream, input_stream.read());
        if (result === finished) break;
        if (result === null) continue;
        if (Array.isArray(result)) code_points.push.apply(code_points,
        /**@type {!Array.<number>}*/
        result);else code_points.push(result);
      }

      if (!this._streaming) {
        do {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished) break;
          if (result === null) continue;
          if (Array.isArray(result)) code_points.push.apply(code_points,
          /**@type {!Array.<number>}*/
          result);else code_points.push(result);
        } while (!input_stream.endOfStream());

        this._decoder = null;
      }

      if (code_points.length) {
        // If encoding is one of utf-8, utf-16be, and utf-16le, and
        // ignore BOM flag and BOM seen flag are unset, run these
        // subsubsteps:
        if (['utf-8'].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen) {
          // If token is U+FEFF, set BOM seen flag.
          if (code_points[0] === 0xFEFF) {
            this._BOMseen = true;
            code_points.shift();
          } else {
            // Otherwise, if token is not end-of-stream, set BOM seen
            // flag and append token to output.
            this._BOMseen = true;
          }
        }
      }

      return codePointsToString(code_points);
    }
  }; // 7.2 Interface TextEncoder

  /**
   * @constructor
   * @param {string=} encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */

  function TextEncoder$1(encoding, options) {
    if (!(this instanceof TextEncoder$1)) return new TextEncoder$1(encoding, options);
    encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;

    if (encoding !== DEFAULT_ENCODING) {
      throw new Error('Encoding not supported. Only utf-8 is supported');
    }

    options = ToDictionary(options);
    /** @private @type {boolean} */

    this._streaming = false;
    /** @private @type {?Encoder} */

    this._encoder = null;
    /** @private @type {{fatal: boolean}} */

    this._options = {
      fatal: Boolean(options['fatal'])
    };
    Object.defineProperty(this, 'encoding', {
      value: 'utf-8'
    });
  }

  TextEncoder$1.prototype = {
    /**
     * @param {string=} opt_string The string to encode.
     * @param {Object=} options
     * @return {Uint8Array} Encoded bytes, as a Uint8Array.
     */
    encode: function encode(opt_string, options) {
      opt_string = opt_string ? String(opt_string) : '';
      options = ToDictionary(options); // NOTE: This option is nonstandard. None of the encodings
      // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
      // so streaming is not necessary.

      if (!this._streaming) this._encoder = new UTF8Encoder(this._options);
      this._streaming = Boolean(options['stream']);
      var bytes = [];
      var input_stream = new Stream(stringToCodePoints(opt_string));
      /** @type {?(number|!Array.<number>)} */

      var result;

      while (!input_stream.endOfStream()) {
        result = this._encoder.handler(input_stream, input_stream.read());
        if (result === finished) break;
        if (Array.isArray(result)) bytes.push.apply(bytes,
        /**@type {!Array.<number>}*/
        result);else bytes.push(result);
      }

      if (!this._streaming) {
        while (true) {
          result = this._encoder.handler(input_stream, input_stream.read());
          if (result === finished) break;
          if (Array.isArray(result)) bytes.push.apply(bytes,
          /**@type {!Array.<number>}*/
          result);else bytes.push(result);
        }

        this._encoder = null;
      }

      return new Uint8Array(bytes);
    }
  }; //
  // 8. The encoding
  //
  // 8.1 utf-8

  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */

  function UTF8Decoder(options) {
    var fatal = options.fatal; // utf-8's decoder's has an associated utf-8 code point, utf-8
    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
    // lower boundary (initially 0x80), and a utf-8 upper boundary
    // (initially 0xBF).

    var
    /** @type {number} */
    utf8_code_point = 0,

    /** @type {number} */
    utf8_bytes_seen = 0,

    /** @type {number} */
    utf8_bytes_needed = 0,

    /** @type {number} */
    utf8_lower_boundary = 0x80,

    /** @type {number} */
    utf8_upper_boundary = 0xBF;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */

    this.handler = function (stream, bite) {
      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
      // set utf-8 bytes needed to 0 and return error.
      if (bite === end_of_stream && utf8_bytes_needed !== 0) {
        utf8_bytes_needed = 0;
        return decoderError(fatal);
      } // 2. If byte is end-of-stream, return finished.


      if (bite === end_of_stream) return finished; // 3. If utf-8 bytes needed is 0, based on byte:

      if (utf8_bytes_needed === 0) {
        // 0x00 to 0x7F
        if (inRange$1(bite, 0x00, 0x7F)) {
          // Return a code point whose value is byte.
          return bite;
        } // 0xC2 to 0xDF


        if (inRange$1(bite, 0xC2, 0xDF)) {
          // Set utf-8 bytes needed to 1 and utf-8 code point to byte
          // − 0xC0.
          utf8_bytes_needed = 1;
          utf8_code_point = bite - 0xC0;
        } // 0xE0 to 0xEF
        else if (inRange$1(bite, 0xE0, 0xEF)) {
          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
          if (bite === 0xE0) utf8_lower_boundary = 0xA0; // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.

          if (bite === 0xED) utf8_upper_boundary = 0x9F; // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
          // byte − 0xE0.

          utf8_bytes_needed = 2;
          utf8_code_point = bite - 0xE0;
        } // 0xF0 to 0xF4
        else if (inRange$1(bite, 0xF0, 0xF4)) {
          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
          if (bite === 0xF0) utf8_lower_boundary = 0x90; // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.

          if (bite === 0xF4) utf8_upper_boundary = 0x8F; // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
          // byte − 0xF0.

          utf8_bytes_needed = 3;
          utf8_code_point = bite - 0xF0;
        } // Otherwise
        else {
          // Return error.
          return decoderError(fatal);
        } // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
        // point to utf-8 code point << (6 × utf-8 bytes needed) and
        // return continue.


        utf8_code_point = utf8_code_point << 6 * utf8_bytes_needed;
        return null;
      } // 4. If byte is not in the range utf-8 lower boundary to utf-8
      // upper boundary, run these substeps:


      if (!inRange$1(bite, utf8_lower_boundary, utf8_upper_boundary)) {
        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
        // utf-8 upper boundary to 0xBF.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF; // 2. Prepend byte to stream.

        stream.prepend(bite); // 3. Return error.

        return decoderError(fatal);
      } // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
      // to 0xBF.


      utf8_lower_boundary = 0x80;
      utf8_upper_boundary = 0xBF; // 6. Increase utf-8 bytes seen by one and set utf-8 code point
      // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
      // needed − utf-8 bytes seen)).

      utf8_bytes_seen += 1;
      utf8_code_point += bite - 0x80 << 6 * (utf8_bytes_needed - utf8_bytes_seen); // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
      // continue.

      if (utf8_bytes_seen !== utf8_bytes_needed) return null; // 8. Let code point be utf-8 code point.

      var code_point = utf8_code_point; // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
      // seen to 0.

      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0; // 10. Return a code point whose value is code point.

      return code_point;
    };
  }
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */


  function UTF8Encoder(options) {
    options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */

    this.handler = function (stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream) return finished; // 2. If code point is in the range U+0000 to U+007F, return a
      // byte whose value is code point.

      if (inRange$1(code_point, 0x0000, 0x007f)) return code_point; // 3. Set count and offset based on the range code point is in:

      var count, offset; // U+0080 to U+07FF:    1 and 0xC0

      if (inRange$1(code_point, 0x0080, 0x07FF)) {
        count = 1;
        offset = 0xC0;
      } // U+0800 to U+FFFF:    2 and 0xE0
      else if (inRange$1(code_point, 0x0800, 0xFFFF)) {
        count = 2;
        offset = 0xE0;
      } // U+10000 to U+10FFFF: 3 and 0xF0
      else if (inRange$1(code_point, 0x10000, 0x10FFFF)) {
        count = 3;
        offset = 0xF0;
      } // 4.Let bytes be a byte sequence whose first byte is (code
      // point >> (6 × count)) + offset.


      var bytes = [(code_point >> 6 * count) + offset]; // 5. Run these substeps while count is greater than 0:

      while (count > 0) {
        // 1. Set temp to code point >> (6 × (count − 1)).
        var temp = code_point >> 6 * (count - 1); // 2. Append to bytes 0x80 | (temp & 0x3F).

        bytes.push(0x80 | temp & 0x3F); // 3. Decrease count by one.

        count -= 1;
      } // 6. Return bytes bytes, in order.


      return bytes;
    };
  }

  var encoding_lib = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	TextEncoder: TextEncoder$1,
  	TextDecoder: TextDecoder$1
  });

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(encoding_lib);

  var __createBinding = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });

  var __setModuleDefault = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });

  var __decorate = commonjsGlobal$1 && commonjsGlobal$1.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var __importStar = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

    __setModuleDefault(result, mod);

    return result;
  };

  var __importDefault = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(lib$1, "__esModule", {
    value: true
  });
  var deserializeUnchecked_1 = lib$1.deserializeUnchecked = deserialize_1 = lib$1.deserialize = serialize_1 = lib$1.serialize = lib$1.BinaryReader = lib$1.BinaryWriter = lib$1.BorshError = lib$1.baseDecode = lib$1.baseEncode = void 0;

  var bn_js_1 = __importDefault(bn$1.exports);

  var bs58_1 = __importDefault(bs58$3); // TODO: Make sure this polyfill not included when not required


  var encoding = __importStar(require$$2);

  var ResolvedTextDecoder = typeof TextDecoder !== "function" ? encoding.TextDecoder : TextDecoder;
  var textDecoder = new ResolvedTextDecoder("utf-8", {
    fatal: true
  });

  function baseEncode(value) {
    if (typeof value === "string") {
      value = Buffer$1.from(value, "utf8");
    }

    return bs58_1["default"].encode(Buffer$1.from(value));
  }

  lib$1.baseEncode = baseEncode;

  function baseDecode(value) {
    return Buffer$1.from(bs58_1["default"].decode(value));
  }

  lib$1.baseDecode = baseDecode;
  var INITIAL_LENGTH = 1024;

  var BorshError = /*#__PURE__*/function (_Error) {
    _inherits(BorshError, _Error);

    var _super = _createSuper(BorshError);

    function BorshError(message) {
      var _this;

      _classCallCheck(this, BorshError);

      _this = _super.call(this, message);
      _this.fieldPath = [];
      _this.originalMessage = message;
      return _this;
    }

    _createClass(BorshError, [{
      key: "addToFieldPath",
      value: function addToFieldPath(fieldName) {
        this.fieldPath.splice(0, 0, fieldName); // NOTE: Modifying message directly as jest doesn't use .toString()

        this.message = this.originalMessage + ": " + this.fieldPath.join(".");
      }
    }]);

    return BorshError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  lib$1.BorshError = BorshError; /// Binary encoder.

  var BinaryWriter = /*#__PURE__*/function () {
    function BinaryWriter() {
      _classCallCheck(this, BinaryWriter);

      this.buf = Buffer$1.alloc(INITIAL_LENGTH);
      this.length = 0;
    }

    _createClass(BinaryWriter, [{
      key: "maybeResize",
      value: function maybeResize() {
        if (this.buf.length < 16 + this.length) {
          this.buf = Buffer$1.concat([this.buf, Buffer$1.alloc(INITIAL_LENGTH)]);
        }
      }
    }, {
      key: "writeU8",
      value: function writeU8(value) {
        this.maybeResize();
        this.buf.writeUInt8(value, this.length);
        this.length += 1;
      }
    }, {
      key: "writeU16",
      value: function writeU16(value) {
        this.maybeResize();
        this.buf.writeUInt16LE(value, this.length);
        this.length += 2;
      }
    }, {
      key: "writeU32",
      value: function writeU32(value) {
        this.maybeResize();
        this.buf.writeUInt32LE(value, this.length);
        this.length += 4;
      }
    }, {
      key: "writeU64",
      value: function writeU64(value) {
        this.maybeResize();
        this.writeBuffer(Buffer$1.from(new bn_js_1["default"](value).toArray("le", 8)));
      }
    }, {
      key: "writeU128",
      value: function writeU128(value) {
        this.maybeResize();
        this.writeBuffer(Buffer$1.from(new bn_js_1["default"](value).toArray("le", 16)));
      }
    }, {
      key: "writeU256",
      value: function writeU256(value) {
        this.maybeResize();
        this.writeBuffer(Buffer$1.from(new bn_js_1["default"](value).toArray("le", 32)));
      }
    }, {
      key: "writeU512",
      value: function writeU512(value) {
        this.maybeResize();
        this.writeBuffer(Buffer$1.from(new bn_js_1["default"](value).toArray("le", 64)));
      }
    }, {
      key: "writeBuffer",
      value: function writeBuffer(buffer) {
        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
        this.buf = Buffer$1.concat([Buffer$1.from(this.buf.subarray(0, this.length)), buffer, Buffer$1.alloc(INITIAL_LENGTH)]);
        this.length += buffer.length;
      }
    }, {
      key: "writeString",
      value: function writeString(str) {
        this.maybeResize();
        var b = Buffer$1.from(str, "utf8");
        this.writeU32(b.length);
        this.writeBuffer(b);
      }
    }, {
      key: "writeFixedArray",
      value: function writeFixedArray(array) {
        this.writeBuffer(Buffer$1.from(array));
      }
    }, {
      key: "writeArray",
      value: function writeArray(array, fn) {
        this.maybeResize();
        this.writeU32(array.length);

        var _iterator = _createForOfIteratorHelper(array),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var elem = _step.value;
            this.maybeResize();
            fn(elem);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "toArray",
      value: function toArray() {
        return this.buf.subarray(0, this.length);
      }
    }]);

    return BinaryWriter;
  }();

  lib$1.BinaryWriter = BinaryWriter;

  function handlingRangeError(target, propertyKey, propertyDescriptor) {
    var originalMethod = propertyDescriptor.value;

    propertyDescriptor.value = function () {
      try {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return originalMethod.apply(this, args);
      } catch (e) {
        if (e instanceof RangeError) {
          var code = e.code;

          if (["ERR_BUFFER_OUT_OF_BOUNDS", "ERR_OUT_OF_RANGE"].indexOf(code) >= 0) {
            throw new BorshError("Reached the end of buffer when deserializing");
          }
        }

        throw e;
      }
    };
  }

  var BinaryReader = /*#__PURE__*/function () {
    function BinaryReader(buf) {
      _classCallCheck(this, BinaryReader);

      this.buf = buf;
      this.offset = 0;
    }

    _createClass(BinaryReader, [{
      key: "readU8",
      value: function readU8() {
        var value = this.buf.readUInt8(this.offset);
        this.offset += 1;
        return value;
      }
    }, {
      key: "readU16",
      value: function readU16() {
        var value = this.buf.readUInt16LE(this.offset);
        this.offset += 2;
        return value;
      }
    }, {
      key: "readU32",
      value: function readU32() {
        var value = this.buf.readUInt32LE(this.offset);
        this.offset += 4;
        return value;
      }
    }, {
      key: "readU64",
      value: function readU64() {
        var buf = this.readBuffer(8);
        return new bn_js_1["default"](buf, "le");
      }
    }, {
      key: "readU128",
      value: function readU128() {
        var buf = this.readBuffer(16);
        return new bn_js_1["default"](buf, "le");
      }
    }, {
      key: "readU256",
      value: function readU256() {
        var buf = this.readBuffer(32);
        return new bn_js_1["default"](buf, "le");
      }
    }, {
      key: "readU512",
      value: function readU512() {
        var buf = this.readBuffer(64);
        return new bn_js_1["default"](buf, "le");
      }
    }, {
      key: "readBuffer",
      value: function readBuffer(len) {
        if (this.offset + len > this.buf.length) {
          throw new BorshError("Expected buffer length ".concat(len, " isn't within bounds"));
        }

        var result = this.buf.slice(this.offset, this.offset + len);
        this.offset += len;
        return result;
      }
    }, {
      key: "readString",
      value: function readString() {
        var len = this.readU32();
        var buf = this.readBuffer(len);

        try {
          // NOTE: Using TextDecoder to fail on invalid UTF-8
          return textDecoder.decode(buf);
        } catch (e) {
          throw new BorshError("Error decoding UTF-8 string: ".concat(e));
        }
      }
    }, {
      key: "readFixedArray",
      value: function readFixedArray(len) {
        return new Uint8Array(this.readBuffer(len));
      }
    }, {
      key: "readArray",
      value: function readArray(fn) {
        var len = this.readU32();
        var result = Array();

        for (var i = 0; i < len; ++i) {
          result.push(fn());
        }

        return result;
      }
    }]);

    return BinaryReader;
  }();

  __decorate([handlingRangeError], BinaryReader.prototype, "readU8", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU16", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU32", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU64", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU128", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU256", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readU512", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readString", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readFixedArray", null);

  __decorate([handlingRangeError], BinaryReader.prototype, "readArray", null);

  lib$1.BinaryReader = BinaryReader;

  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  function serializeField(schema, fieldName, value, fieldType, writer) {
    try {
      // TODO: Handle missing values properly (make sure they never result in just skipped write)
      if (typeof fieldType === "string") {
        writer["write".concat(capitalizeFirstLetter(fieldType))](value);
      } else if (fieldType instanceof Array) {
        if (typeof fieldType[0] === "number") {
          if (value.length !== fieldType[0]) {
            throw new BorshError("Expecting byte array of length ".concat(fieldType[0], ", but got ").concat(value.length, " bytes"));
          }

          writer.writeFixedArray(value);
        } else if (fieldType.length === 2 && typeof fieldType[1] === "number") {
          if (value.length !== fieldType[1]) {
            throw new BorshError("Expecting byte array of length ".concat(fieldType[1], ", but got ").concat(value.length, " bytes"));
          }

          for (var i = 0; i < fieldType[1]; i++) {
            serializeField(schema, null, value[i], fieldType[0], writer);
          }
        } else {
          writer.writeArray(value, function (item) {
            serializeField(schema, fieldName, item, fieldType[0], writer);
          });
        }
      } else if (fieldType.kind !== undefined) {
        switch (fieldType.kind) {
          case "option":
            {
              if (value === null || value === undefined) {
                writer.writeU8(0);
              } else {
                writer.writeU8(1);
                serializeField(schema, fieldName, value, fieldType.type, writer);
              }

              break;
            }

          case "map":
            {
              writer.writeU32(value.size);
              value.forEach(function (val, key) {
                serializeField(schema, fieldName, key, fieldType.key, writer);
                serializeField(schema, fieldName, val, fieldType.value, writer);
              });
              break;
            }

          default:
            throw new BorshError("FieldType ".concat(fieldType, " unrecognized"));
        }
      } else {
        serializeStruct(schema, value, writer);
      }
    } catch (error) {
      if (error instanceof BorshError) {
        error.addToFieldPath(fieldName);
      }

      throw error;
    }
  }

  function serializeStruct(schema, obj, writer) {
    if (typeof obj.borshSerialize === "function") {
      obj.borshSerialize(writer);
      return;
    }

    var structSchema = schema.get(obj.constructor);

    if (!structSchema) {
      throw new BorshError("Class ".concat(obj.constructor.name, " is missing in schema"));
    }

    if (structSchema.kind === "struct") {
      structSchema.fields.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            fieldName = _ref2[0],
            fieldType = _ref2[1];

        serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
      });
    } else if (structSchema.kind === "enum") {
      var name = obj[structSchema.field];

      for (var idx = 0; idx < structSchema.values.length; ++idx) {
        var _structSchema$values$2 = _slicedToArray(structSchema.values[idx], 2),
            fieldName = _structSchema$values$2[0],
            fieldType = _structSchema$values$2[1];

        if (fieldName === name) {
          writer.writeU8(idx);
          serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
          break;
        }
      }
    } else {
      throw new BorshError("Unexpected schema kind: ".concat(structSchema.kind, " for ").concat(obj.constructor.name));
    }
  } /// Serialize given object using schema of the form:
  /// { class_name -> [ [field_name, field_type], .. ], .. }


  function serialize(schema, obj) {
    var Writer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BinaryWriter;
    var writer = new Writer();
    serializeStruct(schema, obj, writer);
    return writer.toArray();
  }

  var serialize_1 = lib$1.serialize = serialize;

  function deserializeField(schema, fieldName, fieldType, reader) {
    try {
      if (typeof fieldType === "string") {
        return reader["read".concat(capitalizeFirstLetter(fieldType))]();
      }

      if (fieldType instanceof Array) {
        if (typeof fieldType[0] === "number") {
          return reader.readFixedArray(fieldType[0]);
        } else if (typeof fieldType[1] === "number") {
          var arr = [];

          for (var i = 0; i < fieldType[1]; i++) {
            arr.push(deserializeField(schema, null, fieldType[0], reader));
          }

          return arr;
        } else {
          return reader.readArray(function () {
            return deserializeField(schema, fieldName, fieldType[0], reader);
          });
        }
      }

      if (fieldType.kind === "option") {
        var option = reader.readU8();

        if (option) {
          return deserializeField(schema, fieldName, fieldType.type, reader);
        }

        return undefined;
      }

      if (fieldType.kind === "map") {
        var map = new Map();
        var length = reader.readU32();

        for (var _i2 = 0; _i2 < length; _i2++) {
          var key = deserializeField(schema, fieldName, fieldType.key, reader);
          var val = deserializeField(schema, fieldName, fieldType.value, reader);
          map.set(key, val);
        }

        return map;
      }

      return deserializeStruct(schema, fieldType, reader);
    } catch (error) {
      if (error instanceof BorshError) {
        error.addToFieldPath(fieldName);
      }

      throw error;
    }
  }

  function deserializeStruct(schema, classType, reader) {
    if (typeof classType.borshDeserialize === "function") {
      return classType.borshDeserialize(reader);
    }

    var structSchema = schema.get(classType);

    if (!structSchema) {
      throw new BorshError("Class ".concat(classType.name, " is missing in schema"));
    }

    if (structSchema.kind === "struct") {
      var result = {};

      var _iterator2 = _createForOfIteratorHelper(schema.get(classType).fields),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value2 = _slicedToArray(_step2.value, 2),
              fieldName = _step2$value2[0],
              fieldType = _step2$value2[1];

          result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return new classType(result);
    }

    if (structSchema.kind === "enum") {
      var idx = reader.readU8();

      if (idx >= structSchema.values.length) {
        throw new BorshError("Enum index: ".concat(idx, " is out of range"));
      }

      var _structSchema$values$4 = _slicedToArray(structSchema.values[idx], 2),
          _fieldName = _structSchema$values$4[0],
          _fieldType = _structSchema$values$4[1];

      var fieldValue = deserializeField(schema, _fieldName, _fieldType, reader);
      return new classType(_defineProperty({}, _fieldName, fieldValue));
    }

    throw new BorshError("Unexpected schema kind: ".concat(structSchema.kind, " for ").concat(classType.constructor.name));
  } /// Deserializes object from bytes using schema.


  function deserialize(schema, classType, buffer) {
    var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;
    var reader = new Reader(buffer);
    var result = deserializeStruct(schema, classType, reader);

    if (reader.offset < buffer.length) {
      throw new BorshError("Unexpected ".concat(buffer.length - reader.offset, " bytes after deserialized data"));
    }

    return result;
  }

  var deserialize_1 = lib$1.deserialize = deserialize; /// Deserializes object from bytes using schema, without checking the length read

  function deserializeUnchecked(schema, classType, buffer) {
    var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;
    var reader = new Reader(buffer);
    return deserializeStruct(schema, classType, reader);
  }

  deserializeUnchecked_1 = lib$1.deserializeUnchecked = deserializeUnchecked;

  var Layout$3 = {};

  Object.defineProperty(Layout$3, "__esModule", {
    value: true
  });
  Layout$3.s16 = Layout$3.s8 = Layout$3.nu64be = Layout$3.u48be = Layout$3.u40be = Layout$3.u32be = Layout$3.u24be = Layout$3.u16be = nu64$1 = Layout$3.nu64 = Layout$3.u48 = Layout$3.u40 = u32 = Layout$3.u32 = Layout$3.u24 = u16 = Layout$3.u16 = u8 = Layout$3.u8 = offset$1 = Layout$3.offset = Layout$3.greedy = Layout$3.Constant = Layout$3.UTF8 = Layout$3.CString = Layout$3.Blob = Layout$3.Boolean = Layout$3.BitField = Layout$3.BitStructure = Layout$3.VariantLayout = Layout$3.Union = Layout$3.UnionLayoutDiscriminator = Layout$3.UnionDiscriminator = Layout$3.Structure = Layout$3.Sequence = Layout$3.DoubleBE = Layout$3.Double = Layout$3.FloatBE = Layout$3.Float = Layout$3.NearInt64BE = Layout$3.NearInt64 = Layout$3.NearUInt64BE = Layout$3.NearUInt64 = Layout$3.IntBE = Layout$3.Int = Layout$3.UIntBE = Layout$3.UInt = Layout$3.OffsetLayout = Layout$3.GreedyCount = Layout$3.ExternalLayout = Layout$3.bindConstructorLayout = Layout$3.nameWithProperty = Layout$3.Layout = Layout$3.uint8ArrayToBuffer = Layout$3.checkUint8Array = void 0;
  Layout$3.constant = Layout$3.utf8 = Layout$3.cstr = blob$1 = Layout$3.blob = Layout$3.unionLayoutDiscriminator = Layout$3.union = seq$1 = Layout$3.seq = Layout$3.bits = struct = Layout$3.struct = Layout$3.f64be = Layout$3.f64 = Layout$3.f32be = Layout$3.f32 = Layout$3.ns64be = Layout$3.s48be = Layout$3.s40be = Layout$3.s32be = Layout$3.s24be = Layout$3.s16be = ns64 = Layout$3.ns64 = Layout$3.s48 = Layout$3.s40 = Layout$3.s32 = Layout$3.s24 = void 0;
  var buffer_1 = require$$1$1;
  /* Check if a value is a Uint8Array.
   *
   * @ignore */

  function checkUint8Array(b) {
    if (!(b instanceof Uint8Array)) {
      throw new TypeError('b must be a Uint8Array');
    }
  }

  Layout$3.checkUint8Array = checkUint8Array;
  /* Create a Buffer instance from a Uint8Array.
   *
   * @ignore */

  function uint8ArrayToBuffer(b) {
    checkUint8Array(b);
    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);
  }

  Layout$3.uint8ArrayToBuffer = uint8ArrayToBuffer;
  /**
   * Base class for layout objects.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support the {@link
   * Layout#encode|encode} or {@link Layout#decode|decode} functions.
   *
   * @param {Number} span - Initializer for {@link Layout#span|span}.  The
   * parameter must be an integer; a negative value signifies that the
   * span is {@link Layout#getSpan|value-specific}.
   *
   * @param {string} [property] - Initializer for {@link
   * Layout#property|property}.
   *
   * @abstract
   */

  var Layout$2 = /*#__PURE__*/function () {
    function Layout(span, property) {
      _classCallCheck(this, Layout);

      if (!Number.isInteger(span)) {
        throw new TypeError('span must be an integer');
      }
      /** The span of the layout in bytes.
       *
       * Positive values are generally expected.
       *
       * Zero will only appear in {@link Constant}s and in {@link
       * Sequence}s where the {@link Sequence#count|count} is zero.
       *
       * A negative value indicates that the span is value-specific, and
       * must be obtained using {@link Layout#getSpan|getSpan}. */


      this.span = span;
      /** The property name used when this layout is represented in an
       * Object.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances.  If left undefined the span of the unnamed layout will
       * be treated as padding: it will not be mutated by {@link
       * Layout#encode|encode} nor represented as a property in the
       * decoded Object. */

      this.property = property;
    }
    /** Function to create an Object into which decoded properties will
     * be written.
     *
     * Used only for layouts that {@link Layout#decode|decode} to Object
     * instances, which means:
     * * {@link Structure}
     * * {@link Union}
     * * {@link VariantLayout}
     * * {@link BitStructure}
     *
     * If left undefined the JavaScript representation of these layouts
     * will be Object instances.
     *
     * See {@link bindConstructorLayout}.
     */


    _createClass(Layout, [{
      key: "makeDestinationObject",
      value: function makeDestinationObject() {
        return {};
      }
      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Uint8Array} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */

    }, {
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 > this.span) {
          throw new RangeError('indeterminate span');
        }

        return this.span;
      }
      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */

    }, {
      key: "replicate",
      value: function replicate(property) {
        var rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }
      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        return undefined;
      }
    }]);

    return Layout;
  }();

  Layout$3.Layout = Layout$2;
  /* Provide text that carries a name (such as for a function that will
   * be throwing an error) annotated with the property of a given layout
   * (such as one for which the value was unacceptable).
   *
   * @ignore */

  function nameWithProperty$1(name, lo) {
    if (lo.property) {
      return name + '[' + lo.property + ']';
    }

    return name;
  }

  Layout$3.nameWithProperty = nameWithProperty$1;
  /**
   * Augment a class so that instances can be encoded/decoded using a
   * given layout.
   *
   * Calling this function couples `Class` with `layout` in several ways:
   *
   * * `Class.layout_` becomes a static member property equal to `layout`;
   * * `layout.boundConstructor_` becomes a static member property equal
   *    to `Class`;
   * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
   *   property of `layout` is set to a function that returns a `new
   *   Class()`;
   * * `Class.decode(b, offset)` becomes a static member function that
   *   delegates to {@link Layout#decode|layout.decode}.  The
   *   synthesized function may be captured and extended.
   * * `Class.prototype.encode(b, offset)` provides an instance member
   *   function that delegates to {@link Layout#encode|layout.encode}
   *   with `src` set to `this`.  The synthesized function may be
   *   captured and extended, but when the extension is invoked `this`
   *   must be explicitly bound to the instance.
   *
   * @param {class} Class - a JavaScript class with a nullary
   * constructor.
   *
   * @param {Layout} layout - the {@link Layout} instance used to encode
   * instances of `Class`.
   */
  // `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

  function bindConstructorLayout$1(Class, layout) {
    if ('function' !== typeof Class) {
      throw new TypeError('Class must be constructor');
    }

    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {
      throw new Error('Class is already bound to a layout');
    }

    if (!(layout && layout instanceof Layout$2)) {
      throw new TypeError('layout must be a Layout');
    }

    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {
      throw new Error('layout is already bound to a constructor');
    }

    Class.layout_ = layout;
    layout.boundConstructor_ = Class;

    layout.makeDestinationObject = function () {
      return new Class();
    };

    Object.defineProperty(Class.prototype, 'encode', {
      value: function value(b, offset) {
        return layout.encode(this, b, offset);
      },
      writable: true
    });
    Object.defineProperty(Class, 'decode', {
      value: function value(b, offset) {
        return layout.decode(b, offset);
      },
      writable: true
    });
  }

  Layout$3.bindConstructorLayout = bindConstructorLayout$1;
  /**
   * An object that behaves like a layout but does not consume space
   * within its containing layout.
   *
   * This is primarily used to obtain metadata about a member, such as a
   * {@link OffsetLayout} that can provide data about a {@link
   * Layout#getSpan|value-specific span}.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support {@link
   * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @abstract
   * @augments {Layout}
   */

  var ExternalLayout$1 = /*#__PURE__*/function (_Layout) {
    _inherits(ExternalLayout, _Layout);

    var _super = _createSuper(ExternalLayout);

    function ExternalLayout() {
      _classCallCheck(this, ExternalLayout);

      return _super.apply(this, arguments);
    }

    _createClass(ExternalLayout, [{
      key: "isCount",
      value:
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      function isCount() {
        throw new Error('ExternalLayout is abstract');
      }
    }]);

    return ExternalLayout;
  }(Layout$2);

  Layout$3.ExternalLayout = ExternalLayout$1;
  /**
   * An {@link ExternalLayout} that determines its {@link
   * Layout#decode|value} based on offset into and length of the buffer
   * on which it is invoked.
   *
   * *Factory*: {@link module:Layout.greedy|greedy}
   *
   * @param {Number} [elementSpan] - initializer for {@link
   * GreedyCount#elementSpan|elementSpan}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {ExternalLayout}
   */

  var GreedyCount$1 = /*#__PURE__*/function (_ExternalLayout) {
    _inherits(GreedyCount, _ExternalLayout);

    var _super2 = _createSuper(GreedyCount);

    function GreedyCount() {
      var _this;

      var elementSpan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var property = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, GreedyCount);

      if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {
        throw new TypeError('elementSpan must be a (positive) integer');
      }

      _this = _super2.call(this, -1, property);
      /** The layout for individual elements of the sequence.  The value
       * must be a positive integer.  If not provided, the value will be
       * 1. */

      _this.elementSpan = elementSpan;
      return _this;
    }
    /** @override */


    _createClass(GreedyCount, [{
      key: "isCount",
      value: function isCount() {
        return true;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        checkUint8Array(b);
        var rem = b.length - offset;
        return Math.floor(rem / this.elementSpan);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        return 0;
      }
    }]);

    return GreedyCount;
  }(ExternalLayout$1);

  Layout$3.GreedyCount = GreedyCount$1;
  /**
   * An {@link ExternalLayout} that supports accessing a {@link Layout}
   * at a fixed offset from the start of another Layout.  The offset may
   * be before, within, or after the base layout.
   *
   * *Factory*: {@link module:Layout.offset|offset}
   *
   * @param {Layout} layout - initializer for {@link
   * OffsetLayout#layout|layout}, modulo `property`.
   *
   * @param {Number} [offset] - Initializes {@link
   * OffsetLayout#offset|offset}.  Defaults to zero.
   *
   * @param {string} [property] - Optional new property name for a
   * {@link Layout#replicate| replica} of `layout` to be used as {@link
   * OffsetLayout#layout|layout}.  If not provided the `layout` is used
   * unchanged.
   *
   * @augments {Layout}
   */

  var OffsetLayout$1 = /*#__PURE__*/function (_ExternalLayout2) {
    _inherits(OffsetLayout, _ExternalLayout2);

    var _super3 = _createSuper(OffsetLayout);

    function OffsetLayout(layout) {
      var _this2;

      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var property = arguments.length > 2 ? arguments[2] : undefined;

      _classCallCheck(this, OffsetLayout);

      if (!(layout instanceof Layout$2)) {
        throw new TypeError('layout must be a Layout');
      }

      if (!Number.isInteger(offset)) {
        throw new TypeError('offset must be integer or undefined');
      }

      _this2 = _super3.call(this, layout.span, property || layout.property);
      /** The subordinated layout. */

      _this2.layout = layout;
      /** The location of {@link OffsetLayout#layout} relative to the
       * start of another layout.
       *
       * The value may be positive or negative, but an error will thrown
       * if at the point of use it goes outside the span of the Uint8Array
       * being accessed.  */

      _this2.offset = offset;
      return _this2;
    }
    /** @override */


    _createClass(OffsetLayout, [{
      key: "isCount",
      value: function isCount() {
        return this.layout instanceof UInt$1 || this.layout instanceof UIntBE$1;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this.layout.decode(b, offset + this.offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return this.layout.encode(src, b, offset + this.offset);
      }
    }]);

    return OffsetLayout;
  }(ExternalLayout$1);

  Layout$3.OffsetLayout = OffsetLayout$1;
  /**
   * Represent an unsigned integer in little-endian format.
   *
   * *Factory*: {@link module:Layout.u8|u8}, {@link
   *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
   *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
   *  module:Layout.u48|u48}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var UInt$1 = /*#__PURE__*/function (_Layout2) {
    _inherits(UInt, _Layout2);

    var _super4 = _createSuper(UInt);

    function UInt(span, property) {
      var _this3;

      _classCallCheck(this, UInt);

      _this3 = _super4.call(this, span, property);

      if (6 < _this3.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this3;
    }
    /** @override */


    _createClass(UInt, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);
        return this.span;
      }
    }]);

    return UInt;
  }(Layout$2);

  Layout$3.UInt = UInt$1;
  /**
   * Represent an unsigned integer in big-endian format.
   *
   * *Factory*: {@link module:Layout.u8be|u8be}, {@link
   * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
   * {@link module:Layout.u32be|u32be}, {@link
   * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var UIntBE$1 = /*#__PURE__*/function (_Layout3) {
    _inherits(UIntBE, _Layout3);

    var _super5 = _createSuper(UIntBE);

    function UIntBE(span, property) {
      var _this4;

      _classCallCheck(this, UIntBE);

      _this4 = _super5.call(this, span, property);

      if (6 < _this4.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this4;
    }
    /** @override */


    _createClass(UIntBE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);
        return this.span;
      }
    }]);

    return UIntBE;
  }(Layout$2);

  Layout$3.UIntBE = UIntBE$1;
  /**
   * Represent a signed integer in little-endian format.
   *
   * *Factory*: {@link module:Layout.s8|s8}, {@link
   *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
   *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
   *  module:Layout.s48|s48}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Int$1 = /*#__PURE__*/function (_Layout4) {
    _inherits(Int, _Layout4);

    var _super6 = _createSuper(Int);

    function Int(span, property) {
      var _this5;

      _classCallCheck(this, Int);

      _this5 = _super6.call(this, span, property);

      if (6 < _this5.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this5;
    }
    /** @override */


    _createClass(Int, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);
        return this.span;
      }
    }]);

    return Int;
  }(Layout$2);

  Layout$3.Int = Int$1;
  /**
   * Represent a signed integer in big-endian format.
   *
   * *Factory*: {@link module:Layout.s8be|s8be}, {@link
   * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
   * {@link module:Layout.s32be|s32be}, {@link
   * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var IntBE$1 = /*#__PURE__*/function (_Layout5) {
    _inherits(IntBE, _Layout5);

    var _super7 = _createSuper(IntBE);

    function IntBE(span, property) {
      var _this6;

      _classCallCheck(this, IntBE);

      _this6 = _super7.call(this, span, property);

      if (6 < _this6.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this6;
    }
    /** @override */


    _createClass(IntBE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);
        return this.span;
      }
    }]);

    return IntBE;
  }(Layout$2);

  Layout$3.IntBE = IntBE$1;
  var V2E32$1 = Math.pow(2, 32);
  /* True modulus high and low 32-bit words, where low word is always
   * non-negative. */

  function divmodInt64$1(src) {
    var hi32 = Math.floor(src / V2E32$1);
    var lo32 = src - hi32 * V2E32$1;
    return {
      hi32: hi32,
      lo32: lo32
    };
  }
  /* Reconstruct Number from quotient and non-negative remainder */


  function roundedInt64$1(hi32, lo32) {
    return hi32 * V2E32$1 + lo32;
  }
  /**
   * Represent an unsigned 64-bit integer in little-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.nu64|nu64}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */


  var NearUInt64$1 = /*#__PURE__*/function (_Layout6) {
    _inherits(NearUInt64, _Layout6);

    var _super8 = _createSuper(NearUInt64);

    function NearUInt64(property) {
      _classCallCheck(this, NearUInt64);

      return _super8.call(this, 8, property);
    }
    /** @override */


    _createClass(NearUInt64, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var buffer = uint8ArrayToBuffer(b);
        var lo32 = buffer.readUInt32LE(offset);
        var hi32 = buffer.readUInt32LE(offset + 4);
        return roundedInt64$1(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var split = divmodInt64$1(src);
        var buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split.lo32, offset);
        buffer.writeUInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }]);

    return NearUInt64;
  }(Layout$2);

  Layout$3.NearUInt64 = NearUInt64$1;
  /**
   * Represent an unsigned 64-bit integer in big-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.nu64be|nu64be}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */

  var NearUInt64BE$1 = /*#__PURE__*/function (_Layout7) {
    _inherits(NearUInt64BE, _Layout7);

    var _super9 = _createSuper(NearUInt64BE);

    function NearUInt64BE(property) {
      _classCallCheck(this, NearUInt64BE);

      return _super9.call(this, 8, property);
    }
    /** @override */


    _createClass(NearUInt64BE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var buffer = uint8ArrayToBuffer(b);
        var hi32 = buffer.readUInt32BE(offset);
        var lo32 = buffer.readUInt32BE(offset + 4);
        return roundedInt64$1(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var split = divmodInt64$1(src);
        var buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32BE(split.hi32, offset);
        buffer.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }]);

    return NearUInt64BE;
  }(Layout$2);

  Layout$3.NearUInt64BE = NearUInt64BE$1;
  /**
   * Represent a signed 64-bit integer in little-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.ns64|ns64}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */

  var NearInt64$1 = /*#__PURE__*/function (_Layout8) {
    _inherits(NearInt64, _Layout8);

    var _super10 = _createSuper(NearInt64);

    function NearInt64(property) {
      _classCallCheck(this, NearInt64);

      return _super10.call(this, 8, property);
    }
    /** @override */


    _createClass(NearInt64, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var buffer = uint8ArrayToBuffer(b);
        var lo32 = buffer.readUInt32LE(offset);
        var hi32 = buffer.readInt32LE(offset + 4);
        return roundedInt64$1(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var split = divmodInt64$1(src);
        var buffer = uint8ArrayToBuffer(b);
        buffer.writeUInt32LE(split.lo32, offset);
        buffer.writeInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }]);

    return NearInt64;
  }(Layout$2);

  Layout$3.NearInt64 = NearInt64$1;
  /**
   * Represent a signed 64-bit integer in big-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.ns64be|ns64be}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */

  var NearInt64BE$1 = /*#__PURE__*/function (_Layout9) {
    _inherits(NearInt64BE, _Layout9);

    var _super11 = _createSuper(NearInt64BE);

    function NearInt64BE(property) {
      _classCallCheck(this, NearInt64BE);

      return _super11.call(this, 8, property);
    }
    /** @override */


    _createClass(NearInt64BE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var buffer = uint8ArrayToBuffer(b);
        var hi32 = buffer.readInt32BE(offset);
        var lo32 = buffer.readUInt32BE(offset + 4);
        return roundedInt64$1(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var split = divmodInt64$1(src);
        var buffer = uint8ArrayToBuffer(b);
        buffer.writeInt32BE(split.hi32, offset);
        buffer.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }]);

    return NearInt64BE;
  }(Layout$2);

  Layout$3.NearInt64BE = NearInt64BE$1;
  /**
   * Represent a 32-bit floating point number in little-endian format.
   *
   * *Factory*: {@link module:Layout.f32|f32}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Float$1 = /*#__PURE__*/function (_Layout10) {
    _inherits(Float, _Layout10);

    var _super12 = _createSuper(Float);

    function Float(property) {
      _classCallCheck(this, Float);

      return _super12.call(this, 4, property);
    }
    /** @override */


    _createClass(Float, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readFloatLE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeFloatLE(src, offset);
        return 4;
      }
    }]);

    return Float;
  }(Layout$2);

  Layout$3.Float = Float$1;
  /**
   * Represent a 32-bit floating point number in big-endian format.
   *
   * *Factory*: {@link module:Layout.f32be|f32be}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var FloatBE$1 = /*#__PURE__*/function (_Layout11) {
    _inherits(FloatBE, _Layout11);

    var _super13 = _createSuper(FloatBE);

    function FloatBE(property) {
      _classCallCheck(this, FloatBE);

      return _super13.call(this, 4, property);
    }
    /** @override */


    _createClass(FloatBE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readFloatBE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeFloatBE(src, offset);
        return 4;
      }
    }]);

    return FloatBE;
  }(Layout$2);

  Layout$3.FloatBE = FloatBE$1;
  /**
   * Represent a 64-bit floating point number in little-endian format.
   *
   * *Factory*: {@link module:Layout.f64|f64}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Double$1 = /*#__PURE__*/function (_Layout12) {
    _inherits(Double, _Layout12);

    var _super14 = _createSuper(Double);

    function Double(property) {
      _classCallCheck(this, Double);

      return _super14.call(this, 8, property);
    }
    /** @override */


    _createClass(Double, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readDoubleLE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);
        return 8;
      }
    }]);

    return Double;
  }(Layout$2);

  Layout$3.Double = Double$1;
  /**
   * Represent a 64-bit floating point number in big-endian format.
   *
   * *Factory*: {@link module:Layout.f64be|f64be}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var DoubleBE$1 = /*#__PURE__*/function (_Layout13) {
    _inherits(DoubleBE, _Layout13);

    var _super15 = _createSuper(DoubleBE);

    function DoubleBE(property) {
      _classCallCheck(this, DoubleBE);

      return _super15.call(this, 8, property);
    }
    /** @override */


    _createClass(DoubleBE, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return uint8ArrayToBuffer(b).readDoubleBE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);
        return 8;
      }
    }]);

    return DoubleBE;
  }(Layout$2);

  Layout$3.DoubleBE = DoubleBE$1;
  /**
   * Represent a contiguous sequence of a specific layout as an Array.
   *
   * *Factory*: {@link module:Layout.seq|seq}
   *
   * @param {Layout} elementLayout - initializer for {@link
   * Sequence#elementLayout|elementLayout}.
   *
   * @param {(Number|ExternalLayout)} count - initializer for {@link
   * Sequence#count|count}.  The parameter must be either a positive
   * integer or an instance of {@link ExternalLayout}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Sequence$1 = /*#__PURE__*/function (_Layout14) {
    _inherits(Sequence, _Layout14);

    var _super16 = _createSuper(Sequence);

    function Sequence(elementLayout, count, property) {
      var _this7;

      _classCallCheck(this, Sequence);

      if (!(elementLayout instanceof Layout$2)) {
        throw new TypeError('elementLayout must be a Layout');
      }

      if (!(count instanceof ExternalLayout$1 && count.isCount() || Number.isInteger(count) && 0 <= count)) {
        throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');
      }

      var span = -1;

      if (!(count instanceof ExternalLayout$1) && 0 < elementLayout.span) {
        span = count * elementLayout.span;
      }

      _this7 = _super16.call(this, span, property);
      /** The layout for individual elements of the sequence. */

      _this7.elementLayout = elementLayout;
      /** The number of elements in the sequence.
       *
       * This will be either a non-negative integer or an instance of
       * {@link ExternalLayout} for which {@link
       * ExternalLayout#isCount|isCount()} is `true`. */

      _this7.count = count;
      return _this7;
    }
    /** @override */


    _createClass(Sequence, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (0 <= this.span) {
          return this.span;
        }

        var span = 0;
        var count = this.count;

        if (count instanceof ExternalLayout$1) {
          count = count.decode(b, offset);
        }

        if (0 < this.elementLayout.span) {
          span = count * this.elementLayout.span;
        } else {
          var idx = 0;

          while (idx < count) {
            span += this.elementLayout.getSpan(b, offset + span);
            ++idx;
          }
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var rv = [];
        var i = 0;
        var count = this.count;

        if (count instanceof ExternalLayout$1) {
          count = count.decode(b, offset);
        }

        while (i < count) {
          rv.push(this.elementLayout.decode(b, offset));
          offset += this.elementLayout.getSpan(b, offset);
          i += 1;
        }

        return rv;
      }
      /** Implement {@link Layout#encode|encode} for {@link Sequence}.
       *
       * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
       * the unused space in the buffer is left unchanged.  If `src` is
       * longer than {@link Sequence#count|count} the unneeded elements are
       * ignored.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var elo = this.elementLayout;
        var span = src.reduce(function (span, v) {
          return span + elo.encode(v, b, offset + span);
        }, 0);

        if (this.count instanceof ExternalLayout$1) {
          this.count.encode(src.length, b, offset);
        }

        return span;
      }
    }]);

    return Sequence;
  }(Layout$2);

  Layout$3.Sequence = Sequence$1;
  /**
   * Represent a contiguous sequence of arbitrary layout elements as an
   * Object.
   *
   * *Factory*: {@link module:Layout.struct|struct}
   *
   * **NOTE** The {@link Layout#span|span} of the structure is variable
   * if any layout in {@link Structure#fields|fields} has a variable
   * span.  When {@link Layout#encode|encoding} we must have a value for
   * all variable-length fields, or we wouldn't be able to figure out
   * how much space to use for storage.  We can only identify the value
   * for a field when it has a {@link Layout#property|property}.  As
   * such, although a structure may contain both unnamed fields and
   * variable-length fields, it cannot contain an unnamed
   * variable-length field.
   *
   * @param {Layout[]} fields - initializer for {@link
   * Structure#fields|fields}.  An error is raised if this contains a
   * variable-length field for which a {@link Layout#property|property}
   * is not defined.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @param {Boolean} [decodePrefixes] - initializer for {@link
   * Structure#decodePrefixes|property}.
   *
   * @throws {Error} - if `fields` contains an unnamed variable-length
   * layout.
   *
   * @augments {Layout}
   */

  var Structure$1 = /*#__PURE__*/function (_Layout15) {
    _inherits(Structure, _Layout15);

    var _super17 = _createSuper(Structure);

    function Structure(fields, property, decodePrefixes) {
      var _this8;

      _classCallCheck(this, Structure);

      if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {
        return acc && v instanceof Layout$2;
      }, true))) {
        throw new TypeError('fields must be array of Layout instances');
      }

      if ('boolean' === typeof property && undefined === decodePrefixes) {
        decodePrefixes = property;
        property = undefined;
      }
      /* Verify absence of unnamed variable-length fields. */


      var _iterator = _createForOfIteratorHelper(fields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fd = _step.value;

          if (0 > fd.span && undefined === fd.property) {
            throw new Error('fields cannot contain unnamed variable-length layout');
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var span = -1;

      try {
        span = fields.reduce(function (span, fd) {
          return span + fd.getSpan();
        }, 0);
      } catch (e) {// ignore error
      }

      _this8 = _super17.call(this, span, property);
      /** The sequence of {@link Layout} values that comprise the
       * structure.
       *
       * The individual elements need not be the same type, and may be
       * either scalar or aggregate layouts.  If a member layout leaves
       * its {@link Layout#property|property} undefined the
       * corresponding region of the buffer associated with the element
       * will not be mutated.
       *
       * @type {Layout[]} */

      _this8.fields = fields;
      /** Control behavior of {@link Layout#decode|decode()} given short
       * buffers.
       *
       * In some situations a structure many be extended with additional
       * fields over time, with older installations providing only a
       * prefix of the full structure.  If this property is `true`
       * decoding will accept those buffers and leave subsequent fields
       * undefined, as long as the buffer ends at a field boundary.
       * Defaults to `false`. */

      _this8.decodePrefixes = !!decodePrefixes;
      return _this8;
    }
    /** @override */


    _createClass(Structure, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (0 <= this.span) {
          return this.span;
        }

        var span = 0;

        try {
          span = this.fields.reduce(function (span, fd) {
            var fsp = fd.getSpan(b, offset);
            offset += fsp;
            return span + fsp;
          }, 0);
        } catch (e) {
          throw new RangeError('indeterminate span');
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        checkUint8Array(b);
        var dest = this.makeDestinationObject();

        var _iterator2 = _createForOfIteratorHelper(this.fields),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var fd = _step2.value;

            if (undefined !== fd.property) {
              dest[fd.property] = fd.decode(b, offset);
            }

            offset += fd.getSpan(b, offset);

            if (this.decodePrefixes && b.length === offset) {
              break;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var firstOffset = offset;
        var lastOffset = 0;
        var lastWrote = 0;

        var _iterator3 = _createForOfIteratorHelper(this.fields),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var fd = _step3.value;
            var span = fd.span;
            lastWrote = 0 < span ? span : 0;

            if (undefined !== fd.property) {
              var fv = src[fd.property];

              if (undefined !== fv) {
                lastWrote = fd.encode(fv, b, offset);

                if (0 > span) {
                  /* Read the as-encoded span, which is not necessarily the
                   * same as what we wrote. */
                  span = fd.getSpan(b, offset);
                }
              }
            }

            lastOffset = offset;
            offset += span;
          }
          /* Use (lastOffset + lastWrote) instead of offset because the last
           * item may have had a dynamic length and we don't want to include
           * the padding between it and the end of the space reserved for
           * it. */

        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return lastOffset + lastWrote - firstOffset;
      }
      /** @override */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        var dest = this.makeDestinationObject();

        var _iterator4 = _createForOfIteratorHelper(this.fields),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var fd = _step4.value;

            if (undefined !== fd.property && 0 < values.length) {
              dest[fd.property] = values.shift();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return dest;
      }
      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */

    }, {
      key: "layoutFor",
      value: function layoutFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var _iterator5 = _createForOfIteratorHelper(this.fields),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var fd = _step5.value;

            if (fd.property === property) {
              return fd;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return undefined;
      }
      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */

    }, {
      key: "offsetOf",
      value: function offsetOf(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var offset = 0;

        var _iterator6 = _createForOfIteratorHelper(this.fields),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var fd = _step6.value;

            if (fd.property === property) {
              return offset;
            }

            if (0 > fd.span) {
              offset = -1;
            } else if (0 <= offset) {
              offset += fd.span;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return undefined;
      }
    }]);

    return Structure;
  }(Layout$2);

  Layout$3.Structure = Structure$1;
  /**
   * An object that can provide a {@link
   * Union#discriminator|discriminator} API for {@link Union}.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support the {@link
   * UnionDiscriminator#encode|encode} or {@link
   * UnionDiscriminator#decode|decode} functions.
   *
   * @param {string} [property] - Default for {@link
   * UnionDiscriminator#property|property}.
   *
   * @abstract
   */

  var UnionDiscriminator$1 = /*#__PURE__*/function () {
    function UnionDiscriminator(property) {
      _classCallCheck(this, UnionDiscriminator);

      /** The {@link Layout#property|property} to be used when the
       * discriminator is referenced in isolation (generally when {@link
       * Union#decode|Union decode} cannot delegate to a specific
       * variant). */
      this.property = property;
    }
    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
     *
     * The implementation of this method need not reference the buffer if
     * variant information is available through other means. */


    _createClass(UnionDiscriminator, [{
      key: "decode",
      value: function decode(b, offset) {
        throw new Error('UnionDiscriminator is abstract');
      }
      /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
       *
       * The implementation of this method need not store the value if
       * variant information is maintained through other means. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        throw new Error('UnionDiscriminator is abstract');
      }
    }]);

    return UnionDiscriminator;
  }();

  Layout$3.UnionDiscriminator = UnionDiscriminator$1;
  /**
   * An object that can provide a {@link
   * UnionDiscriminator|discriminator API} for {@link Union} using an
   * unsigned integral {@link Layout} instance located either inside or
   * outside the union.
   *
   * @param {ExternalLayout} layout - initializes {@link
   * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
   * ExternalLayout#isCount|isCount()}.
   *
   * @param {string} [property] - Default for {@link
   * UnionDiscriminator#property|property}, superseding the property
   * from `layout`, but defaulting to `variant` if neither `property`
   * nor layout provide a property name.
   *
   * @augments {UnionDiscriminator}
   */

  var UnionLayoutDiscriminator$1 = /*#__PURE__*/function (_UnionDiscriminator) {
    _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);

    var _super18 = _createSuper(UnionLayoutDiscriminator);

    function UnionLayoutDiscriminator(layout, property) {
      var _this9;

      _classCallCheck(this, UnionLayoutDiscriminator);

      if (!(layout instanceof ExternalLayout$1 && layout.isCount())) {
        throw new TypeError('layout must be an unsigned integer ExternalLayout');
      }

      _this9 = _super18.call(this, property || layout.property || 'variant');
      /** The {@link ExternalLayout} used to access the discriminator
       * value. */

      _this9.layout = layout;
      return _this9;
    }
    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */


    _createClass(UnionLayoutDiscriminator, [{
      key: "decode",
      value: function decode(b, offset) {
        return this.layout.decode(b, offset);
      }
      /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        return this.layout.encode(src, b, offset);
      }
    }]);

    return UnionLayoutDiscriminator;
  }(UnionDiscriminator$1);

  Layout$3.UnionLayoutDiscriminator = UnionLayoutDiscriminator$1;
  /**
   * Represent any number of span-compatible layouts.
   *
   * *Factory*: {@link module:Layout.union|union}
   *
   * If the union has a {@link Union#defaultLayout|default layout} that
   * layout must have a non-negative {@link Layout#span|span}.  The span
   * of a fixed-span union includes its {@link
   * Union#discriminator|discriminator} if the variant is a {@link
   * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
   * of its {@link Union#defaultLayout|default layout}.
   *
   * If the union does not have a default layout then the encoded span
   * of the union depends on the encoded span of its variant (which may
   * be fixed or variable).
   *
   * {@link VariantLayout#layout|Variant layout}s are added through
   * {@link Union#addVariant|addVariant}.  If the union has a default
   * layout, the span of the {@link VariantLayout#layout|layout
   * contained by the variant} must not exceed the span of the {@link
   * Union#defaultLayout|default layout} (minus the span of a {@link
   * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
   * span of the variant will equal the span of the union itself.
   *
   * The variant for a buffer can only be identified from the {@link
   * Union#discriminator|discriminator} {@link
   * UnionDiscriminator#property|property} (in the case of the {@link
   * Union#defaultLayout|default layout}), or by using {@link
   * Union#getVariant|getVariant} and examining the resulting {@link
   * VariantLayout} instance.
   *
   * A variant compatible with a JavaScript object can be identified
   * using {@link Union#getSourceVariant|getSourceVariant}.
   *
   * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
   * identify the layout used to interpret the union contents.  The
   * parameter must be an instance of {@link UnionDiscriminator}, an
   * {@link ExternalLayout} that satisfies {@link
   * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
   * UIntBE}).  When a non-external layout element is passed the layout
   * appears at the start of the union.  In all cases the (synthesized)
   * {@link UnionDiscriminator} instance is recorded as {@link
   * Union#discriminator|discriminator}.
   *
   * @param {(Layout|null)} defaultLayout - initializer for {@link
   * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
   * If `null` there is no default layout: the union has data-dependent
   * length and attempts to decode or encode unrecognized variants will
   * throw an exception.  A {@link Layout} instance must have a
   * non-negative {@link Layout#span|span}, and if it lacks a {@link
   * Layout#property|property} the {@link
   * Union#defaultLayout|defaultLayout} will be a {@link
   * Layout#replicate|replica} with property `content`.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Union$1 = /*#__PURE__*/function (_Layout16) {
    _inherits(Union, _Layout16);

    var _super19 = _createSuper(Union);

    function Union(discr, defaultLayout, property) {
      var _this10;

      _classCallCheck(this, Union);

      var discriminator;

      if (discr instanceof UInt$1 || discr instanceof UIntBE$1) {
        discriminator = new UnionLayoutDiscriminator$1(new OffsetLayout$1(discr));
      } else if (discr instanceof ExternalLayout$1 && discr.isCount()) {
        discriminator = new UnionLayoutDiscriminator$1(discr);
      } else if (!(discr instanceof UnionDiscriminator$1)) {
        throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');
      } else {
        discriminator = discr;
      }

      if (undefined === defaultLayout) {
        defaultLayout = null;
      }

      if (!(null === defaultLayout || defaultLayout instanceof Layout$2)) {
        throw new TypeError('defaultLayout must be null or a Layout');
      }

      if (null !== defaultLayout) {
        if (0 > defaultLayout.span) {
          throw new Error('defaultLayout must have constant span');
        }

        if (undefined === defaultLayout.property) {
          defaultLayout = defaultLayout.replicate('content');
        }
      }
      /* The union span can be estimated only if there's a default
       * layout.  The union spans its default layout, plus any prefix
       * variant layout.  By construction both layouts, if present, have
       * non-negative span. */


      var span = -1;

      if (defaultLayout) {
        span = defaultLayout.span;

        if (0 <= span && (discr instanceof UInt$1 || discr instanceof UIntBE$1)) {
          span += discriminator.layout.span;
        }
      }

      _this10 = _super19.call(this, span, property);
      /** The interface for the discriminator value in isolation.
       *
       * This a {@link UnionDiscriminator} either passed to the
       * constructor or synthesized from the `discr` constructor
       * argument.  {@link
       * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
       * `true` iff the `discr` parameter was a non-offset {@link
       * Layout} instance. */

      _this10.discriminator = discriminator;
      /** `true` if the {@link Union#discriminator|discriminator} is the
       * first field in the union.
       *
       * If `false` the discriminator is obtained from somewhere
       * else. */

      _this10.usesPrefixDiscriminator = discr instanceof UInt$1 || discr instanceof UIntBE$1;
      /** The layout for non-discriminator content when the value of the
       * discriminator is not recognized.
       *
       * This is the value passed to the constructor.  It is
       * structurally equivalent to the second component of {@link
       * Union#layout|layout} but may have a different property
       * name. */

      _this10.defaultLayout = defaultLayout;
      /** A registry of allowed variants.
       *
       * The keys are unsigned integers which should be compatible with
       * {@link Union.discriminator|discriminator}.  The property value
       * is the corresponding {@link VariantLayout} instances assigned
       * to this union by {@link Union#addVariant|addVariant}.
       *
       * **NOTE** The registry remains mutable so that variants can be
       * {@link Union#addVariant|added} at any time.  Users should not
       * manipulate the content of this property. */

      _this10.registry = {};
      /* Private variable used when invoking getSourceVariant */

      var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));
      /** Function to infer the variant selected by a source object.
       *
       * Defaults to {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
       * be overridden using {@link
       * Union#configGetSourceVariant|configGetSourceVariant}.
       *
       * @param {Object} src - as with {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
       *
       * @returns {(undefined|VariantLayout)} The default variant
       * (`undefined`) or first registered variant that uses a property
       * available in `src`. */


      _this10.getSourceVariant = function (src) {
        return boundGetSourceVariant(src);
      };
      /** Function to override the implementation of {@link
       * Union#getSourceVariant|getSourceVariant}.
       *
       * Use this if the desired variant cannot be identified using the
       * algorithm of {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
       *
       * **NOTE** The provided function will be invoked bound to this
       * Union instance, providing local access to {@link
       * Union#registry|registry}.
       *
       * @param {Function} gsv - a function that follows the API of
       * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */


      _this10.configGetSourceVariant = function (gsv) {
        boundGetSourceVariant = gsv.bind(this);
      };

      return _this10;
    }
    /** @override */


    _createClass(Union, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (0 <= this.span) {
          return this.span;
        }
        /* Default layouts always have non-negative span, so we don't have
         * one and we have to recognize the variant which will in turn
         * determine the span. */


        var vlo = this.getVariant(b, offset);

        if (!vlo) {
          throw new Error('unable to determine span for unrecognized variant');
        }

        return vlo.getSpan(b, offset);
      }
      /**
       * Method to infer a registered Union variant compatible with `src`.
       *
       * The first satisfied rule in the following sequence defines the
       * return value:
       * * If `src` has properties matching the Union discriminator and
       *   the default layout, `undefined` is returned regardless of the
       *   value of the discriminator property (this ensures the default
       *   layout will be used);
       * * If `src` has a property matching the Union discriminator, the
       *   value of the discriminator identifies a registered variant, and
       *   either (a) the variant has no layout, or (b) `src` has the
       *   variant's property, then the variant is returned (because the
       *   source satisfies the constraints of the variant it identifies);
       * * If `src` does not have a property matching the Union
       *   discriminator, but does have a property matching a registered
       *   variant, then the variant is returned (because the source
       *   matches a variant without an explicit conflict);
       * * An error is thrown (because we either can't identify a variant,
       *   or we were explicitly told the variant but can't satisfy it).
       *
       * @param {Object} src - an object presumed to be compatible with
       * the content of the Union.
       *
       * @return {(undefined|VariantLayout)} - as described above.
       *
       * @throws {Error} - if `src` cannot be associated with a default or
       * registered variant.
       */

    }, {
      key: "defaultGetSourceVariant",
      value: function defaultGetSourceVariant(src) {
        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {
          if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {
            return undefined;
          }

          var vlo = this.registry[src[this.discriminator.property]];

          if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {
            return vlo;
          }
        } else {
          for (var tag in this.registry) {
            var _vlo = this.registry[tag];

            if (_vlo.property && Object.prototype.hasOwnProperty.call(src, _vlo.property)) {
              return _vlo;
            }
          }
        }

        throw new Error('unable to infer src variant');
      }
      /** Implement {@link Layout#decode|decode} for {@link Union}.
       *
       * If the variant is {@link Union#addVariant|registered} the return
       * value is an instance of that variant, with no explicit
       * discriminator.  Otherwise the {@link Union#defaultLayout|default
       * layout} is used to decode the content. */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var dest;
        var dlo = this.discriminator;
        var discr = dlo.decode(b, offset);
        var clo = this.registry[discr];

        if (undefined === clo) {
          var defaultLayout = this.defaultLayout;
          var contentOffset = 0;

          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }

          dest = this.makeDestinationObject();
          dest[dlo.property] = discr; // defaultLayout.property can be undefined, but this is allowed by buffer-layout
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

          dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);
        } else {
          dest = clo.decode(b, offset);
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Union}.
       *
       * This API assumes the `src` object is consistent with the union's
       * {@link Union#defaultLayout|default layout}.  To encode variants
       * use the appropriate variant-specific {@link VariantLayout#encode}
       * method. */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var vlo = this.getSourceVariant(src);

        if (undefined === vlo) {
          var dlo = this.discriminator; // this.defaultLayout is not undefined when vlo is undefined
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

          var clo = this.defaultLayout;
          var contentOffset = 0;

          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }

          dlo.encode(src[dlo.property], b, offset); // clo.property is not undefined when vlo is undefined
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

          return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);
        }

        return vlo.encode(src, b, offset);
      }
      /** Register a new variant structure within a union.  The newly
       * created variant is returned.
       *
       * @param {Number} variant - initializer for {@link
       * VariantLayout#variant|variant}.
       *
       * @param {Layout} layout - initializer for {@link
       * VariantLayout#layout|layout}.
       *
       * @param {String} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {VariantLayout} */

    }, {
      key: "addVariant",
      value: function addVariant(variant, layout, property) {
        var rv = new VariantLayout$1(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
      }
      /**
       * Get the layout associated with a registered variant.
       *
       * If `vb` does not produce a registered variant the function returns
       * `undefined`.
       *
       * @param {(Number|Uint8Array)} vb - either the variant number, or a
       * buffer from which the discriminator is to be read.
       *
       * @param {Number} offset - offset into `vb` for the start of the
       * union.  Used only when `vb` is an instance of {Uint8Array}.
       *
       * @return {({VariantLayout}|undefined)}
       */

    }, {
      key: "getVariant",
      value: function getVariant(vb) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var variant;

        if (vb instanceof Uint8Array) {
          variant = this.discriminator.decode(vb, offset);
        } else {
          variant = vb;
        }

        return this.registry[variant];
      }
    }]);

    return Union;
  }(Layout$2);

  Layout$3.Union = Union$1;
  /**
   * Represent a specific variant within a containing union.
   *
   * **NOTE** The {@link Layout#span|span} of the variant may include
   * the span of the {@link Union#discriminator|discriminator} used to
   * identify it, but values read and written using the variant strictly
   * conform to the content of {@link VariantLayout#layout|layout}.
   *
   * **NOTE** User code should not invoke this constructor directly.  Use
   * the union {@link Union#addVariant|addVariant} helper method.
   *
   * @param {Union} union - initializer for {@link
   * VariantLayout#union|union}.
   *
   * @param {Number} variant - initializer for {@link
   * VariantLayout#variant|variant}.
   *
   * @param {Layout} [layout] - initializer for {@link
   * VariantLayout#layout|layout}.  If absent the variant carries no
   * data.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.  Unlike many other layouts, variant
   * layouts normally include a property name so they can be identified
   * within their containing {@link Union}.  The property identifier may
   * be absent only if `layout` is is absent.
   *
   * @augments {Layout}
   */

  var VariantLayout$1 = /*#__PURE__*/function (_Layout17) {
    _inherits(VariantLayout, _Layout17);

    var _super20 = _createSuper(VariantLayout);

    function VariantLayout(union, variant, layout, property) {
      var _this11;

      _classCallCheck(this, VariantLayout);

      if (!(union instanceof Union$1)) {
        throw new TypeError('union must be a Union');
      }

      if (!Number.isInteger(variant) || 0 > variant) {
        throw new TypeError('variant must be a (non-negative) integer');
      }

      if ('string' === typeof layout && undefined === property) {
        property = layout;
        layout = null;
      }

      if (layout) {
        if (!(layout instanceof Layout$2)) {
          throw new TypeError('layout must be a Layout');
        }

        if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {
          throw new Error('variant span exceeds span of containing union');
        }

        if ('string' !== typeof property) {
          throw new TypeError('variant must have a String property');
        }
      }

      var span = union.span;

      if (0 > union.span) {
        span = layout ? layout.span : 0;

        if (0 <= span && union.usesPrefixDiscriminator) {
          span += union.discriminator.layout.span;
        }
      }

      _this11 = _super20.call(this, span, property);
      /** The {@link Union} to which this variant belongs. */

      _this11.union = union;
      /** The unsigned integral value identifying this variant within
       * the {@link Union#discriminator|discriminator} of the containing
       * union. */

      _this11.variant = variant;
      /** The {@link Layout} to be used when reading/writing the
       * non-discriminator part of the {@link
       * VariantLayout#union|union}.  If `null` the variant carries no
       * data. */

      _this11.layout = layout || null;
      return _this11;
    }
    /** @override */


    _createClass(VariantLayout, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (0 <= this.span) {
          /* Will be equal to the containing union span if that is not
           * variable. */
          return this.span;
        }

        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        /* Span is defined solely by the variant (and prefix discriminator) */


        var span = 0;

        if (this.layout) {
          span = this.layout.getSpan(b, offset + contentOffset);
        }

        return contentOffset + span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var dest = this.makeDestinationObject();

        if (this !== this.union.getVariant(b, offset)) {
          throw new Error('variant mismatch');
        }

        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }

        if (this.layout) {
          dest[this.property] = this.layout.decode(b, offset + contentOffset);
        } else if (this.property) {
          dest[this.property] = true;
        } else if (this.union.usesPrefixDiscriminator) {
          dest[this.union.discriminator.property] = this.variant;
        }

        return dest;
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }

        if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {
          throw new TypeError('variant lacks property ' + this.property);
        }

        this.union.discriminator.encode(this.variant, b, offset);
        var span = contentOffset;

        if (this.layout) {
          this.layout.encode(src[this.property], b, offset + contentOffset);
          span += this.layout.getSpan(b, offset + contentOffset);

          if (0 <= this.union.span && span > this.union.span) {
            throw new Error('encoded variant overruns containing union');
          }
        }

        return span;
      }
      /** Delegate {@link Layout#fromArray|fromArray} to {@link
       * VariantLayout#layout|layout}. */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        if (this.layout) {
          return this.layout.fromArray(values);
        }

        return undefined;
      }
    }]);

    return VariantLayout;
  }(Layout$2);

  Layout$3.VariantLayout = VariantLayout$1;
  /** JavaScript chose to define bitwise operations as operating on
   * signed 32-bit values in 2's complement form, meaning any integer
   * with bit 31 set is going to look negative.  For right shifts that's
   * not a problem, because `>>>` is a logical shift, but for every
   * other bitwise operator we have to compensate for possible negative
   * results. */

  function fixBitwiseResult$1(v) {
    if (0 > v) {
      v += 0x100000000;
    }

    return v;
  }
  /**
   * Contain a sequence of bit fields as an unsigned integer.
   *
   * *Factory*: {@link module:Layout.bits|bits}
   *
   * This is a container element; within it there are {@link BitField}
   * instances that provide the extracted properties.  The container
   * simply defines the aggregate representation and its bit ordering.
   * The representation is an object containing properties with numeric
   * or {@link Boolean} values.
   *
   * {@link BitField}s are added with the {@link
   * BitStructure#addField|addField} and {@link
   * BitStructure#addBoolean|addBoolean} methods.

   * @param {Layout} word - initializer for {@link
   * BitStructure#word|word}.  The parameter must be an instance of
   * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
   *
   * @param {bool} [msb] - `true` if the bit numbering starts at the
   * most significant bit of the containing word; `false` (default) if
   * it starts at the least significant bit of the containing word.  If
   * the parameter at this position is a string and `property` is
   * `undefined` the value of this argument will instead be used as the
   * value of `property`.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var BitStructure$1 = /*#__PURE__*/function (_Layout18) {
    _inherits(BitStructure, _Layout18);

    var _super21 = _createSuper(BitStructure);

    function BitStructure(word, msb, property) {
      var _this12;

      _classCallCheck(this, BitStructure);

      if (!(word instanceof UInt$1 || word instanceof UIntBE$1)) {
        throw new TypeError('word must be a UInt or UIntBE layout');
      }

      if ('string' === typeof msb && undefined === property) {
        property = msb;
        msb = false;
      }

      if (4 < word.span) {
        throw new RangeError('word cannot exceed 32 bits');
      }

      _this12 = _super21.call(this, word.span, property);
      /** The layout used for the packed value.  {@link BitField}
       * instances are packed sequentially depending on {@link
       * BitStructure#msb|msb}. */

      _this12.word = word;
      /** Whether the bit sequences are packed starting at the most
       * significant bit growing down (`true`), or the least significant
       * bit growing up (`false`).
       *
       * **NOTE** Regardless of this value, the least significant bit of
       * any {@link BitField} value is the least significant bit of the
       * corresponding section of the packed value. */

      _this12.msb = !!msb;
      /** The sequence of {@link BitField} layouts that comprise the
       * packed structure.
       *
       * **NOTE** The array remains mutable to allow fields to be {@link
       * BitStructure#addField|added} after construction.  Users should
       * not manipulate the content of this property.*/

      _this12.fields = [];
      /* Storage for the value.  Capture a variable instead of using an
       * instance property because we don't want anything to change the
       * value without going through the mutator. */

      var value = 0;

      _this12._packedSetValue = function (v) {
        value = fixBitwiseResult$1(v);
        return this;
      };

      _this12._packedGetValue = function () {
        return value;
      };

      return _this12;
    }
    /** @override */


    _createClass(BitStructure, [{
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var dest = this.makeDestinationObject();
        var value = this.word.decode(b, offset);

        this._packedSetValue(value);

        var _iterator7 = _createForOfIteratorHelper(this.fields),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var fd = _step7.value;

            if (undefined !== fd.property) {
              dest[fd.property] = fd.decode(b);
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the packed
       * value is left unmodified.  Unused bits are also left unmodified. */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var value = this.word.decode(b, offset);

        this._packedSetValue(value);

        var _iterator8 = _createForOfIteratorHelper(this.fields),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var fd = _step8.value;

            if (undefined !== fd.property) {
              var fv = src[fd.property];

              if (undefined !== fv) {
                fd.encode(fv);
              }
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        return this.word.encode(this._packedGetValue(), b, offset);
      }
      /** Register a new bitfield with a containing bit structure.  The
       * resulting bitfield is returned.
       *
       * @param {Number} bits - initializer for {@link BitField#bits|bits}.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {BitField} */

    }, {
      key: "addField",
      value: function addField(bits, property) {
        var bf = new BitField$1(this, bits, property);
        this.fields.push(bf);
        return bf;
      }
      /** As with {@link BitStructure#addField|addField} for single-bit
       * fields with `boolean` value representation.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {Boolean} */
      // `Boolean` conflicts with the native primitive type
      // eslint-disable-next-line @typescript-eslint/ban-types

    }, {
      key: "addBoolean",
      value: function addBoolean(property) {
        // This is my Boolean, not the Javascript one.
        var bf = new Boolean$2(this, property);
        this.fields.push(bf);
        return bf;
      }
      /**
       * Get access to the bit field for a given property.
       *
       * @param {String} property - the bit field of interest.
       *
       * @return {BitField} - the field associated with `property`, or
       * undefined if there is no such property.
       */

    }, {
      key: "fieldFor",
      value: function fieldFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var _iterator9 = _createForOfIteratorHelper(this.fields),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var fd = _step9.value;

            if (fd.property === property) {
              return fd;
            }
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }

        return undefined;
      }
    }]);

    return BitStructure;
  }(Layout$2);

  Layout$3.BitStructure = BitStructure$1;
  /**
   * Represent a sequence of bits within a {@link BitStructure}.
   *
   * All bit field values are represented as unsigned integers.
   *
   * **NOTE** User code should not invoke this constructor directly.
   * Use the container {@link BitStructure#addField|addField} helper
   * method.
   *
   * **NOTE** BitField instances are not instances of {@link Layout}
   * since {@link Layout#span|span} measures 8-bit units.
   *
   * @param {BitStructure} container - initializer for {@link
   * BitField#container|container}.
   *
   * @param {Number} bits - initializer for {@link BitField#bits|bits}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   */

  var BitField$1 = /*#__PURE__*/function () {
    function BitField(container, bits, property) {
      _classCallCheck(this, BitField);

      if (!(container instanceof BitStructure$1)) {
        throw new TypeError('container must be a BitStructure');
      }

      if (!Number.isInteger(bits) || 0 >= bits) {
        throw new TypeError('bits must be positive integer');
      }

      var totalBits = 8 * container.span;
      var usedBits = container.fields.reduce(function (sum, fd) {
        return sum + fd.bits;
      }, 0);

      if (bits + usedBits > totalBits) {
        throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');
      }
      /** The {@link BitStructure} instance to which this bit field
       * belongs. */


      this.container = container;
      /** The span of this value in bits. */

      this.bits = bits;
      /** A mask of {@link BitField#bits|bits} bits isolating value bits
       * that fit within the field.
       *
       * That is, it masks a value that has not yet been shifted into
       * position within its containing packed integer. */

      this.valueMask = (1 << bits) - 1;

      if (32 === bits) {
        // shifted value out of range
        this.valueMask = 0xFFFFFFFF;
      }
      /** The offset of the value within the containing packed unsigned
       * integer.  The least significant bit of the packed value is at
       * offset zero, regardless of bit ordering used. */


      this.start = usedBits;

      if (this.container.msb) {
        this.start = totalBits - usedBits - bits;
      }
      /** A mask of {@link BitField#bits|bits} isolating the field value
       * within the containing packed unsigned integer. */


      this.wordMask = fixBitwiseResult$1(this.valueMask << this.start);
      /** The property name used when this bitfield is represented in an
       * Object.
       *
       * Intended to be functionally equivalent to {@link
       * Layout#property}.
       *
       * If left undefined the corresponding span of bits will be
       * treated as padding: it will not be mutated by {@link
       * Layout#encode|encode} nor represented as a property in the
       * decoded Object. */

      this.property = property;
    }
    /** Store a value into the corresponding subsequence of the containing
     * bit field. */


    _createClass(BitField, [{
      key: "decode",
      value: function decode(b, offset) {
        var word = this.container._packedGetValue();

        var wordValue = fixBitwiseResult$1(word & this.wordMask);
        var value = wordValue >>> this.start;
        return value;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field.
       *
       * **NOTE** This is not a specialization of {@link
       * Layout#encode|Layout.encode} and there is no return value. */

    }, {
      key: "encode",
      value: function encode(value) {
        if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult$1(value & this.valueMask)) {
          throw new TypeError(nameWithProperty$1('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);
        }

        var word = this.container._packedGetValue();

        var wordValue = fixBitwiseResult$1(value << this.start);

        this.container._packedSetValue(fixBitwiseResult$1(word & ~this.wordMask) | wordValue);
      }
    }]);

    return BitField;
  }();

  Layout$3.BitField = BitField$1;
  /**
   * Represent a single bit within a {@link BitStructure} as a
   * JavaScript boolean.
   *
   * **NOTE** User code should not invoke this constructor directly.
   * Use the container {@link BitStructure#addBoolean|addBoolean} helper
   * method.
   *
   * @param {BitStructure} container - initializer for {@link
   * BitField#container|container}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {BitField}
   */

  /* eslint-disable no-extend-native */

  var Boolean$2 = /*#__PURE__*/function (_BitField) {
    _inherits(Boolean, _BitField);

    var _super22 = _createSuper(Boolean);

    function Boolean(container, property) {
      _classCallCheck(this, Boolean);

      return _super22.call(this, container, 1, property);
    }
    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
     *
     * @returns {boolean} */


    _createClass(Boolean, [{
      key: "decode",
      value: function decode(b, offset) {
        return !!_get(_getPrototypeOf(Boolean.prototype), "decode", this).call(this, b, offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(value) {
        if ('boolean' === typeof value) {
          // BitField requires integer values
          value = +value;
        }

        _get(_getPrototypeOf(Boolean.prototype), "encode", this).call(this, value);
      }
    }]);

    return Boolean;
  }(BitField$1);

  Layout$3.Boolean = Boolean$2;
  /* eslint-enable no-extend-native */

  /**
   * Contain a fixed-length block of arbitrary data, represented as a
   * Uint8Array.
   *
   * *Factory*: {@link module:Layout.blob|blob}
   *
   * @param {(Number|ExternalLayout)} length - initializes {@link
   * Blob#length|length}.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Blob$1 = /*#__PURE__*/function (_Layout19) {
    _inherits(Blob, _Layout19);

    var _super23 = _createSuper(Blob);

    function Blob(length, property) {
      var _this13;

      _classCallCheck(this, Blob);

      if (!(length instanceof ExternalLayout$1 && length.isCount() || Number.isInteger(length) && 0 <= length)) {
        throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');
      }

      var span = -1;

      if (!(length instanceof ExternalLayout$1)) {
        span = length;
      }

      _this13 = _super23.call(this, span, property);
      /** The number of bytes in the blob.
       *
       * This may be a non-negative integer, or an instance of {@link
       * ExternalLayout} that satisfies {@link
       * ExternalLayout#isCount|isCount()}. */

      _this13.length = length;
      return _this13;
    }
    /** @override */


    _createClass(Blob, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        var span = this.span;

        if (0 > span) {
          span = this.length.decode(b, offset);
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var span = this.span;

        if (0 > span) {
          span = this.length.decode(b, offset);
        }

        return uint8ArrayToBuffer(b).slice(offset, offset + span);
      }
      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        var span = this.length;

        if (this.length instanceof ExternalLayout$1) {
          span = src.length;
        }

        if (!(src instanceof Uint8Array && span === src.length)) {
          throw new TypeError(nameWithProperty$1('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');
        }

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Uint8Array');
        }

        var srcBuffer = uint8ArrayToBuffer(src);
        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');

        if (this.length instanceof ExternalLayout$1) {
          this.length.encode(span, b, offset);
        }

        return span;
      }
    }]);

    return Blob;
  }(Layout$2);

  Layout$3.Blob = Blob$1;
  /**
   * Contain a `NUL`-terminated UTF8 string.
   *
   * *Factory*: {@link module:Layout.cstr|cstr}
   *
   * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
   * not be correctly decoded by this layout.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var CString$1 = /*#__PURE__*/function (_Layout20) {
    _inherits(CString, _Layout20);

    var _super24 = _createSuper(CString);

    function CString(property) {
      _classCallCheck(this, CString);

      return _super24.call(this, -1, property);
    }
    /** @override */


    _createClass(CString, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        checkUint8Array(b);
        var idx = offset;

        while (idx < b.length && 0 !== b[idx]) {
          idx += 1;
        }

        return 1 + idx - offset;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var span = this.getSpan(b, offset);
        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
          src = String(src);
        }

        var srcb = buffer_1.Buffer.from(src, 'utf8');
        var span = srcb.length;

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }

        var buffer = uint8ArrayToBuffer(b);
        srcb.copy(buffer, offset);
        buffer[offset + span] = 0;
        return span + 1;
      }
    }]);

    return CString;
  }(Layout$2);

  Layout$3.CString = CString$1;
  /**
   * Contain a UTF8 string with implicit length.
   *
   * *Factory*: {@link module:Layout.utf8|utf8}
   *
   * **NOTE** Because the length is implicit in the size of the buffer
   * this layout should be used only in isolation, or in a situation
   * where the length can be expressed by operating on a slice of the
   * containing buffer.
   *
   * @param {Number} [maxSpan] - the maximum length allowed for encoded
   * string content.  If not provided there is no bound on the allowed
   * content.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var UTF8$1 = /*#__PURE__*/function (_Layout21) {
    _inherits(UTF8, _Layout21);

    var _super25 = _createSuper(UTF8);

    function UTF8(maxSpan, property) {
      var _this14;

      _classCallCheck(this, UTF8);

      if ('string' === typeof maxSpan && undefined === property) {
        property = maxSpan;
        maxSpan = undefined;
      }

      if (undefined === maxSpan) {
        maxSpan = -1;
      } else if (!Number.isInteger(maxSpan)) {
        throw new TypeError('maxSpan must be an integer');
      }

      _this14 = _super25.call(this, -1, property);
      /** The maximum span of the layout in bytes.
       *
       * Positive values are generally expected.  Zero is abnormal.
       * Attempts to encode or decode a value that exceeds this length
       * will throw a `RangeError`.
       *
       * A negative value indicates that there is no bound on the length
       * of the content. */

      _this14.maxSpan = maxSpan;
      return _this14;
    }
    /** @override */


    _createClass(UTF8, [{
      key: "getSpan",
      value: function getSpan(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        checkUint8Array(b);
        return b.length - offset;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var span = this.getSpan(b, offset);

        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError('text length exceeds maxSpan');
        }

        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */
        if ('string' !== typeof src) {
          src = String(src);
        }

        var srcb = buffer_1.Buffer.from(src, 'utf8');
        var span = srcb.length;

        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError('text length exceeds maxSpan');
        }

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }

        srcb.copy(uint8ArrayToBuffer(b), offset);
        return span;
      }
    }]);

    return UTF8;
  }(Layout$2);

  Layout$3.UTF8 = UTF8$1;
  /**
   * Contain a constant value.
   *
   * This layout may be used in cases where a JavaScript value can be
   * inferred without an expression in the binary encoding.  An example
   * would be a {@link VariantLayout|variant layout} where the content
   * is implied by the union {@link Union#discriminator|discriminator}.
   *
   * @param {Object|Number|String} value - initializer for {@link
   * Constant#value|value}.  If the value is an object (or array) and
   * the application intends the object to remain unchanged regardless
   * of what is done to values decoded by this layout, the value should
   * be frozen prior passing it to this constructor.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */

  var Constant$1 = /*#__PURE__*/function (_Layout22) {
    _inherits(Constant, _Layout22);

    var _super26 = _createSuper(Constant);

    function Constant(value, property) {
      var _this15;

      _classCallCheck(this, Constant);

      _this15 = _super26.call(this, 0, property);
      /** The value produced by this constant when the layout is {@link
       * Constant#decode|decoded}.
       *
       * Any JavaScript value including `null` and `undefined` is
       * permitted.
       *
       * **WARNING** If `value` passed in the constructor was not
       * frozen, it is possible for users of decoded values to change
       * the content of the value. */

      _this15.value = value;
      return _this15;
    }
    /** @override */


    _createClass(Constant, [{
      key: "decode",
      value: function decode(b, offset) {
        return this.value;
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        /* Constants take no space */
        return 0;
      }
    }]);

    return Constant;
  }(Layout$2);

  Layout$3.Constant = Constant$1;
  /** Factory for {@link GreedyCount}. */

  Layout$3.greedy = function (elementSpan, property) {
    return new GreedyCount$1(elementSpan, property);
  };
  /** Factory for {@link OffsetLayout}. */


  var offset$1 = Layout$3.offset = function (layout, offset, property) {
    return new OffsetLayout$1(layout, offset, property);
  };
  /** Factory for {@link UInt|unsigned int layouts} spanning one
   * byte. */


  var u8 = Layout$3.u8 = function (property) {
    return new UInt$1(1, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning two bytes. */


  var u16 = Layout$3.u16 = function (property) {
    return new UInt$1(2, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning three bytes. */


  Layout$3.u24 = function (property) {
    return new UInt$1(3, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning four bytes. */


  var u32 = Layout$3.u32 = function (property) {
    return new UInt$1(4, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning five bytes. */


  Layout$3.u40 = function (property) {
    return new UInt$1(5, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning six bytes. */


  Layout$3.u48 = function (property) {
    return new UInt$1(6, property);
  };
  /** Factory for {@link NearUInt64|little-endian unsigned int
   * layouts} interpreted as Numbers. */


  var nu64$1 = Layout$3.nu64 = function (property) {
    return new NearUInt64$1(property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning two bytes. */


  Layout$3.u16be = function (property) {
    return new UIntBE$1(2, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning three bytes. */


  Layout$3.u24be = function (property) {
    return new UIntBE$1(3, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning four bytes. */


  Layout$3.u32be = function (property) {
    return new UIntBE$1(4, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning five bytes. */


  Layout$3.u40be = function (property) {
    return new UIntBE$1(5, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning six bytes. */


  Layout$3.u48be = function (property) {
    return new UIntBE$1(6, property);
  };
  /** Factory for {@link NearUInt64BE|big-endian unsigned int
   * layouts} interpreted as Numbers. */


  Layout$3.nu64be = function (property) {
    return new NearUInt64BE$1(property);
  };
  /** Factory for {@link Int|signed int layouts} spanning one
   * byte. */


  Layout$3.s8 = function (property) {
    return new Int$1(1, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning two bytes. */


  Layout$3.s16 = function (property) {
    return new Int$1(2, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning three bytes. */


  Layout$3.s24 = function (property) {
    return new Int$1(3, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning four bytes. */


  Layout$3.s32 = function (property) {
    return new Int$1(4, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning five bytes. */


  Layout$3.s40 = function (property) {
    return new Int$1(5, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning six bytes. */


  Layout$3.s48 = function (property) {
    return new Int$1(6, property);
  };
  /** Factory for {@link NearInt64|little-endian signed int layouts}
   * interpreted as Numbers. */


  var ns64 = Layout$3.ns64 = function (property) {
    return new NearInt64$1(property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning two bytes. */


  Layout$3.s16be = function (property) {
    return new IntBE$1(2, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning three bytes. */


  Layout$3.s24be = function (property) {
    return new IntBE$1(3, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning four bytes. */


  Layout$3.s32be = function (property) {
    return new IntBE$1(4, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning five bytes. */


  Layout$3.s40be = function (property) {
    return new IntBE$1(5, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning six bytes. */


  Layout$3.s48be = function (property) {
    return new IntBE$1(6, property);
  };
  /** Factory for {@link NearInt64BE|big-endian signed int layouts}
   * interpreted as Numbers. */


  Layout$3.ns64be = function (property) {
    return new NearInt64BE$1(property);
  };
  /** Factory for {@link Float|little-endian 32-bit floating point} values. */


  Layout$3.f32 = function (property) {
    return new Float$1(property);
  };
  /** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */


  Layout$3.f32be = function (property) {
    return new FloatBE$1(property);
  };
  /** Factory for {@link Double|little-endian 64-bit floating point} values. */


  Layout$3.f64 = function (property) {
    return new Double$1(property);
  };
  /** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */


  Layout$3.f64be = function (property) {
    return new DoubleBE$1(property);
  };
  /** Factory for {@link Structure} values. */


  var struct = Layout$3.struct = function (fields, property, decodePrefixes) {
    return new Structure$1(fields, property, decodePrefixes);
  };
  /** Factory for {@link BitStructure} values. */


  Layout$3.bits = function (word, msb, property) {
    return new BitStructure$1(word, msb, property);
  };
  /** Factory for {@link Sequence} values. */


  var seq$1 = Layout$3.seq = function (elementLayout, count, property) {
    return new Sequence$1(elementLayout, count, property);
  };
  /** Factory for {@link Union} values. */


  Layout$3.union = function (discr, defaultLayout, property) {
    return new Union$1(discr, defaultLayout, property);
  };
  /** Factory for {@link UnionLayoutDiscriminator} values. */


  Layout$3.unionLayoutDiscriminator = function (layout, property) {
    return new UnionLayoutDiscriminator$1(layout, property);
  };
  /** Factory for {@link Blob} values. */


  var blob$1 = Layout$3.blob = function (length, property) {
    return new Blob$1(length, property);
  };
  /** Factory for {@link CString} values. */


  Layout$3.cstr = function (property) {
    return new CString$1(property);
  };
  /** Factory for {@link UTF8} values. */


  Layout$3.utf8 = function (maxSpan, property) {
    return new UTF8$1(maxSpan, property);
  };
  /** Factory for {@link Constant} values. */


  Layout$3.constant = function (value, property) {
    return new Constant$1(value, property);
  };

  var browser$1 = {};

  Object.defineProperty(browser$1, "__esModule", {
    value: true
  });
  /**
   * Convert a little-endian buffer into a BigInt.
   * @param buf The little-endian buffer to convert
   * @returns A BigInt with the little-endian representation of buf.
   */

  function toBigIntLE(buf) {
    {
      var reversed = Buffer$1.from(buf);
      reversed.reverse();
      var hex = reversed.toString('hex');

      if (hex.length === 0) {
        return BigInt(0);
      }

      return BigInt("0x".concat(hex));
    }
  }

  var toBigIntLE_1 = browser$1.toBigIntLE = toBigIntLE;
  /**
   * Convert a big-endian buffer into a BigInt
   * @param buf The big-endian buffer to convert.
   * @returns A BigInt with the big-endian representation of buf.
   */

  function toBigIntBE(buf) {
    {
      var hex = buf.toString('hex');

      if (hex.length === 0) {
        return BigInt(0);
      }

      return BigInt("0x".concat(hex));
    }
  }

  browser$1.toBigIntBE = toBigIntBE;
  /**
   * Convert a BigInt to a little-endian buffer.
   * @param num   The BigInt to convert.
   * @param width The number of bytes that the resulting buffer should be.
   * @returns A little-endian buffer representation of num.
   */

  function toBufferLE(num, width) {
    {
      var hex = num.toString(16);
      var buffer = Buffer$1.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
      buffer.reverse();
      return buffer;
    } // Allocation is done here, since it is slower using napi in C
  }

  var toBufferLE_1 = browser$1.toBufferLE = toBufferLE;
  /**
   * Convert a BigInt to a big-endian buffer.
   * @param num   The BigInt to convert.
   * @param width The number of bytes that the resulting buffer should be.
   * @returns A big-endian buffer representation of num.
   */

  function toBufferBE(num, width) {
    {
      var hex = num.toString(16);
      return Buffer$1.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
    }
  }

  browser$1.toBufferBE = toBufferBE;

  var _excluded$2 = ["message", "explanation"];

  var _marked = /*#__PURE__*/_regeneratorRuntime().mark(toFailures);

  /**
   * A `StructFailure` represents a single specific failure in validation.
   */

  /**
   * `StructError` objects are thrown (or returned) when validation fails.
   *
   * Validation logic is design to exit early for maximum performance. The error
   * represents the first error encountered during validation. For more detail,
   * the `error.failures` property is a generator function that can be run to
   * continue validation and receive all the failures in the data.
   */
  var StructError = /*#__PURE__*/function (_TypeError) {
    _inherits(StructError, _TypeError);

    var _super = _createSuper(StructError);

    function StructError(failure, failures) {
      var _this;

      _classCallCheck(this, StructError);

      var cached;

      var message = failure.message,
          explanation = failure.explanation,
          rest = _objectWithoutProperties(failure, _excluded$2);

      var path = failure.path;
      var msg = path.length === 0 ? message : "At path: ".concat(path.join('.'), " -- ").concat(message);
      _this = _super.call(this, explanation !== null && explanation !== void 0 ? explanation : msg);
      if (explanation != null) _this.cause = msg;
      Object.assign(_assertThisInitialized(_this), rest);
      _this.name = _this.constructor.name;

      _this.failures = function () {
        var _cached;

        return (_cached = cached) !== null && _cached !== void 0 ? _cached : cached = [failure].concat(_toConsumableArray(failures()));
      };

      return _this;
    }

    return _createClass(StructError);
  }( /*#__PURE__*/_wrapNativeSuper(TypeError));
  /**
   * Check if a value is an iterator.
   */


  function isIterable(x) {
    return isObject(x) && typeof x[Symbol.iterator] === 'function';
  }
  /**
   * Check if a value is a plain object.
   */


  function isObject(x) {
    return _typeof(x) === 'object' && x != null;
  }
  /**
   * Check if a value is a non-array object.
   */


  function isNonArrayObject(x) {
    return isObject(x) && !Array.isArray(x);
  }
  /**
   * Return a value as a printable string.
   */


  function print(value) {
    if (_typeof(value) === 'symbol') {
      return value.toString();
    }

    return typeof value === 'string' ? JSON.stringify(value) : "".concat(value);
  }
  /**
   * Shifts (removes and returns) the first value from the `input` iterator.
   * Like `Array.prototype.shift()` but for an `Iterator`.
   */


  function shiftIterator(input) {
    var _input$next = input.next(),
        done = _input$next.done,
        value = _input$next.value;

    return done ? undefined : value;
  }
  /**
   * Convert a single validation result to a failure.
   */


  function toFailure(result, context, struct, value) {
    if (result === true) {
      return;
    } else if (result === false) {
      result = {};
    } else if (typeof result === 'string') {
      result = {
        message: result
      };
    }

    var path = context.path,
        branch = context.branch;
    var type = struct.type;
    var _result = result,
        refinement = _result.refinement,
        _result$message = _result.message,
        message = _result$message === void 0 ? "Expected a value of type `".concat(type, "`").concat(refinement ? " with refinement `".concat(refinement, "`") : '', ", but received: `").concat(print(value), "`") : _result$message;
    return _objectSpread2(_objectSpread2({
      value: value,
      type: type,
      refinement: refinement,
      key: path[path.length - 1],
      path: path,
      branch: branch
    }, result), {}, {
      message: message
    });
  }
  /**
   * Convert a validation result to an iterable of failures.
   */


  function toFailures(result, context, struct, value) {
    var _iterator, _step, r, failure;

    return _regeneratorRuntime().wrap(function toFailures$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!isIterable(result)) {
            result = [result];
          }

          _iterator = _createForOfIteratorHelper(result);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 12;
            break;
          }

          r = _step.value;
          failure = toFailure(r, context, struct, value);

          if (!failure) {
            _context.next = 10;
            break;
          }

          _context.next = 10;
          return failure;

        case 10:
          _context.next = 4;
          break;

        case 12:
          _context.next = 17;
          break;

        case 14:
          _context.prev = 14;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 17:
          _context.prev = 17;

          _iterator.f();

          return _context.finish(17);

        case 20:
        case "end":
          return _context.stop();
      }
    }, _marked, null, [[2, 14, 17, 20]]);
  }
  /**
   * Check a value against a struct, traversing deeply into nested values, and
   * returning an iterator of failures or success.
   */


  function run(value, struct) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _options$path, path, _options$branch, branch, _options$coerce, coerce, _options$mask, mask, ctx, status, _iterator2, _step2, _failure, _iterator3, _step3, _step3$value2, k, v, s, ts, _iterator5, _step5, t, _iterator4, _step4, failure;

      return _regeneratorRuntime().wrap(function _callee$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _options$path = options.path, path = _options$path === void 0 ? [] : _options$path, _options$branch = options.branch, branch = _options$branch === void 0 ? [value] : _options$branch, _options$coerce = options.coerce, coerce = _options$coerce === void 0 ? false : _options$coerce, _options$mask = options.mask, mask = _options$mask === void 0 ? false : _options$mask;
            ctx = {
              path: path,
              branch: branch,
              mask: mask
            };

            if (coerce) {
              value = struct.coercer(value, ctx);
            }

            status = 'valid';
            _iterator2 = _createForOfIteratorHelper(struct.validator(value, ctx));
            _context2.prev = 5;

            _iterator2.s();

          case 7:
            if ((_step2 = _iterator2.n()).done) {
              _context2.next = 15;
              break;
            }

            _failure = _step2.value;
            _failure.explanation = options.message;
            status = 'not_valid';
            _context2.next = 13;
            return [_failure, undefined];

          case 13:
            _context2.next = 7;
            break;

          case 15:
            _context2.next = 20;
            break;

          case 17:
            _context2.prev = 17;
            _context2.t0 = _context2["catch"](5);

            _iterator2.e(_context2.t0);

          case 20:
            _context2.prev = 20;

            _iterator2.f();

            return _context2.finish(20);

          case 23:
            _iterator3 = _createForOfIteratorHelper(struct.entries(value, ctx));
            _context2.prev = 24;

            _iterator3.s();

          case 26:
            if ((_step3 = _iterator3.n()).done) {
              _context2.next = 53;
              break;
            }

            _step3$value2 = _slicedToArray(_step3.value, 3), k = _step3$value2[0], v = _step3$value2[1], s = _step3$value2[2];
            ts = run(v, s, {
              path: k === undefined ? path : [].concat(_toConsumableArray(path), [k]),
              branch: k === undefined ? branch : [].concat(_toConsumableArray(branch), [v]),
              coerce: coerce,
              mask: mask,
              message: options.message
            });
            _iterator5 = _createForOfIteratorHelper(ts);
            _context2.prev = 30;

            _iterator5.s();

          case 32:
            if ((_step5 = _iterator5.n()).done) {
              _context2.next = 43;
              break;
            }

            t = _step5.value;

            if (!t[0]) {
              _context2.next = 40;
              break;
            }

            status = t[0].refinement != null ? 'not_refined' : 'not_valid';
            _context2.next = 38;
            return [t[0], undefined];

          case 38:
            _context2.next = 41;
            break;

          case 40:
            if (coerce) {
              v = t[1];

              if (k === undefined) {
                value = v;
              } else if (value instanceof Map) {
                value.set(k, v);
              } else if (value instanceof Set) {
                value.add(v);
              } else if (isObject(value)) {
                if (v !== undefined || k in value) value[k] = v;
              }
            }

          case 41:
            _context2.next = 32;
            break;

          case 43:
            _context2.next = 48;
            break;

          case 45:
            _context2.prev = 45;
            _context2.t1 = _context2["catch"](30);

            _iterator5.e(_context2.t1);

          case 48:
            _context2.prev = 48;

            _iterator5.f();

            return _context2.finish(48);

          case 51:
            _context2.next = 26;
            break;

          case 53:
            _context2.next = 58;
            break;

          case 55:
            _context2.prev = 55;
            _context2.t2 = _context2["catch"](24);

            _iterator3.e(_context2.t2);

          case 58:
            _context2.prev = 58;

            _iterator3.f();

            return _context2.finish(58);

          case 61:
            if (!(status !== 'not_valid')) {
              _context2.next = 81;
              break;
            }

            _iterator4 = _createForOfIteratorHelper(struct.refiner(value, ctx));
            _context2.prev = 63;

            _iterator4.s();

          case 65:
            if ((_step4 = _iterator4.n()).done) {
              _context2.next = 73;
              break;
            }

            failure = _step4.value;
            failure.explanation = options.message;
            status = 'not_refined';
            _context2.next = 71;
            return [failure, undefined];

          case 71:
            _context2.next = 65;
            break;

          case 73:
            _context2.next = 78;
            break;

          case 75:
            _context2.prev = 75;
            _context2.t3 = _context2["catch"](63);

            _iterator4.e(_context2.t3);

          case 78:
            _context2.prev = 78;

            _iterator4.f();

            return _context2.finish(78);

          case 81:
            if (!(status === 'valid')) {
              _context2.next = 84;
              break;
            }

            _context2.next = 84;
            return [undefined, value];

          case 84:
          case "end":
            return _context2.stop();
        }
      }, _callee, null, [[5, 17, 20, 23], [24, 55, 58, 61], [30, 45, 48, 51], [63, 75, 78, 81]]);
    })();
  }
  /**
   * `Struct` objects encapsulate the validation logic for a specific type of
   * values. Once constructed, you use the `assert`, `is` or `validate` helpers to
   * validate unknown input data against the struct.
   */


  var Struct$1 = /*#__PURE__*/function () {
    function Struct(props) {
      var _this2 = this;

      _classCallCheck(this, Struct);

      var type = props.type,
          schema = props.schema,
          validator = props.validator,
          refiner = props.refiner,
          _props$coercer = props.coercer,
          coercer = _props$coercer === void 0 ? function (value) {
        return value;
      } : _props$coercer,
          _props$entries = props.entries,
          entries = _props$entries === void 0 ? /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
            case "end":
              return _context3.stop();
          }
        }, _callee2);
      }) : _props$entries;
      this.type = type;
      this.schema = schema;
      this.entries = entries;
      this.coercer = coercer;

      if (validator) {
        this.validator = function (value, context) {
          var result = validator(value, context);
          return toFailures(result, context, _this2, value);
        };
      } else {
        this.validator = function () {
          return [];
        };
      }

      if (refiner) {
        this.refiner = function (value, context) {
          var result = refiner(value, context);
          return toFailures(result, context, _this2, value);
        };
      } else {
        this.refiner = function () {
          return [];
        };
      }
    }
    /**
     * Assert that a value passes the struct's validation, throwing if it doesn't.
     */


    _createClass(Struct, [{
      key: "assert",
      value: function assert(value, message) {
        return _assert$1(value, this, message);
      }
      /**
       * Create a value with the struct's coercion logic, then validate it.
       */

    }, {
      key: "create",
      value: function create(value, message) {
        return _create(value, this, message);
      }
      /**
       * Check if a value passes the struct's validation.
       */

    }, {
      key: "is",
      value: function is(value) {
        return _is(value, this);
      }
      /**
       * Mask a value, coercing and validating it, but returning only the subset of
       * properties defined by the struct's schema. Masking applies recursively to
       * props of `object` structs only.
       */

    }, {
      key: "mask",
      value: function mask(value, message) {
        return _mask(value, this, message);
      }
      /**
       * Validate a value with the struct's validation logic, returning a tuple
       * representing the result.
       *
       * You may optionally pass `true` for the `coerce` argument to coerce
       * the value before attempting to validate it. If you do, the result will
       * contain the coerced result when successful. Also, `mask` will turn on
       * masking of the unknown `object` props recursively if passed.
       */

    }, {
      key: "validate",
      value: function validate(value) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _validate(value, this, options);
      }
    }]);

    return Struct;
  }();
  /**
   * Assert that a value passes a struct, throwing if it doesn't.
   */


  function _assert$1(value, struct, message) {
    var result = _validate(value, struct, {
      message: message
    });

    if (result[0]) {
      throw result[0];
    }
  }
  /**
   * Create a value with the coercion logic of struct and validate it.
   */


  function _create(value, struct, message) {
    var result = _validate(value, struct, {
      coerce: true,
      message: message
    });

    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  /**
   * Mask a value, returning only the subset of properties defined by a struct.
   */


  function _mask(value, struct, message) {
    var result = _validate(value, struct, {
      coerce: true,
      mask: true,
      message: message
    });

    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  /**
   * Check if a value passes a struct.
   */


  function _is(value, struct) {
    var result = _validate(value, struct);

    return !result[0];
  }
  /**
   * Validate a value against a struct, returning an error if invalid, or the
   * value (with potential coercion) if valid.
   */


  function _validate(value, struct) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var tuples = run(value, struct, options);
    var tuple = shiftIterator(tuples);

    if (tuple[0]) {
      var error = new StructError(tuple[0], /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var _iterator6, _step6, t;

        return _regeneratorRuntime().wrap(function _callee3$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _iterator6 = _createForOfIteratorHelper(tuples);
              _context4.prev = 1;

              _iterator6.s();

            case 3:
              if ((_step6 = _iterator6.n()).done) {
                _context4.next = 10;
                break;
              }

              t = _step6.value;

              if (!t[0]) {
                _context4.next = 8;
                break;
              }

              _context4.next = 8;
              return t[0];

            case 8:
              _context4.next = 3;
              break;

            case 10:
              _context4.next = 15;
              break;

            case 12:
              _context4.prev = 12;
              _context4.t0 = _context4["catch"](1);

              _iterator6.e(_context4.t0);

            case 15:
              _context4.prev = 15;

              _iterator6.f();

              return _context4.finish(15);

            case 18:
            case "end":
              return _context4.stop();
          }
        }, _callee3, null, [[1, 12, 15, 18]]);
      }));
      return [error, undefined];
    } else {
      var v = tuple[1];
      return [undefined, v];
    }
  }
  /**
   * Define a new struct type with a custom validation function.
   */


  function define(name, validator) {
    return new Struct$1({
      type: name,
      schema: null,
      validator: validator
    });
  }
  /**
   * Ensure that any value passes validation.
   */


  function any() {
    return define('any', function () {
      return true;
    });
  }

  function array(Element) {
    return new Struct$1({
      type: 'array',
      schema: Element,
      entries: /*#__PURE__*/_regeneratorRuntime().mark(function entries(value) {
        var _iterator9, _step9, _step9$value2, i, v;

        return _regeneratorRuntime().wrap(function entries$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (!(Element && Array.isArray(value))) {
                _context7.next = 18;
                break;
              }

              _iterator9 = _createForOfIteratorHelper(value.entries());
              _context7.prev = 2;

              _iterator9.s();

            case 4:
              if ((_step9 = _iterator9.n()).done) {
                _context7.next = 10;
                break;
              }

              _step9$value2 = _slicedToArray(_step9.value, 2), i = _step9$value2[0], v = _step9$value2[1];
              _context7.next = 8;
              return [i, v, Element];

            case 8:
              _context7.next = 4;
              break;

            case 10:
              _context7.next = 15;
              break;

            case 12:
              _context7.prev = 12;
              _context7.t0 = _context7["catch"](2);

              _iterator9.e(_context7.t0);

            case 15:
              _context7.prev = 15;

              _iterator9.f();

              return _context7.finish(15);

            case 18:
            case "end":
              return _context7.stop();
          }
        }, entries, null, [[2, 12, 15, 18]]);
      }),
      coercer: function coercer(value) {
        return Array.isArray(value) ? value.slice() : value;
      },
      validator: function validator(value) {
        return Array.isArray(value) || "Expected an array value, but received: ".concat(print(value));
      }
    });
  }
  /**
   * Ensure that a value is a boolean.
   */


  function _boolean() {
    return define('boolean', function (value) {
      return typeof value === 'boolean';
    });
  }
  /**
   * Ensure that a value is an instance of a specific class.
   */


  function instance(Class) {
    return define('instance', function (value) {
      return value instanceof Class || "Expected a `".concat(Class.name, "` instance, but received: ").concat(print(value));
    });
  }

  function literal(constant) {
    var description = print(constant);

    var t = _typeof(constant);

    return new Struct$1({
      type: 'literal',
      schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,
      validator: function validator(value) {
        return value === constant || "Expected the literal `".concat(description, "`, but received: ").concat(print(value));
      }
    });
  }
  /**
   * Ensure that no value ever passes validation.
   */


  function never() {
    return define('never', function () {
      return false;
    });
  }
  /**
   * Augment an existing struct to allow `null` values.
   */


  function nullable(struct) {
    return new Struct$1(_objectSpread2(_objectSpread2({}, struct), {}, {
      validator: function validator(value, ctx) {
        return value === null || struct.validator(value, ctx);
      },
      refiner: function refiner(value, ctx) {
        return value === null || struct.refiner(value, ctx);
      }
    }));
  }
  /**
   * Ensure that a value is a number.
   */


  function number$1() {
    return define('number', function (value) {
      return typeof value === 'number' && !isNaN(value) || "Expected a number, but received: ".concat(print(value));
    });
  }
  /**
   * Augment a struct to allow `undefined` values.
   */


  function optional(struct) {
    return new Struct$1(_objectSpread2(_objectSpread2({}, struct), {}, {
      validator: function validator(value, ctx) {
        return value === undefined || struct.validator(value, ctx);
      },
      refiner: function refiner(value, ctx) {
        return value === undefined || struct.refiner(value, ctx);
      }
    }));
  }
  /**
   * Ensure that a value is an object with keys and values of specific types, but
   * without ensuring any specific shape of properties.
   *
   * Like TypeScript's `Record` utility.
   */


  function record(Key, Value) {
    return new Struct$1({
      type: 'record',
      schema: null,
      entries: /*#__PURE__*/_regeneratorRuntime().mark(function entries(value) {
        var k, v;
        return _regeneratorRuntime().wrap(function entries$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (!isObject(value)) {
                _context13.next = 11;
                break;
              }

              _context13.t0 = _regeneratorRuntime().keys(value);

            case 2:
              if ((_context13.t1 = _context13.t0()).done) {
                _context13.next = 11;
                break;
              }

              k = _context13.t1.value;
              v = value[k];
              _context13.next = 7;
              return [k, k, Key];

            case 7:
              _context13.next = 9;
              return [k, v, Value];

            case 9:
              _context13.next = 2;
              break;

            case 11:
            case "end":
              return _context13.stop();
          }
        }, entries);
      }),
      validator: function validator(value) {
        return isNonArrayObject(value) || "Expected an object, but received: ".concat(print(value));
      },
      coercer: function coercer(value) {
        return isNonArrayObject(value) ? _objectSpread2({}, value) : value;
      }
    });
  }
  /**
   * Ensure that a value is a string.
   */


  function string() {
    return define('string', function (value) {
      return typeof value === 'string' || "Expected a string, but received: ".concat(print(value));
    });
  }
  /**
   * Ensure that a value is a tuple of a specific length, and that each of its
   * elements is of a specific type.
   */


  function tuple(Structs) {
    var Never = never();
    return new Struct$1({
      type: 'tuple',
      schema: null,
      entries: /*#__PURE__*/_regeneratorRuntime().mark(function entries(value) {
        var length, i;
        return _regeneratorRuntime().wrap(function entries$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!Array.isArray(value)) {
                _context15.next = 9;
                break;
              }

              length = Math.max(Structs.length, value.length);
              i = 0;

            case 3:
              if (!(i < length)) {
                _context15.next = 9;
                break;
              }

              _context15.next = 6;
              return [i, value[i], Structs[i] || Never];

            case 6:
              i++;
              _context15.next = 3;
              break;

            case 9:
            case "end":
              return _context15.stop();
          }
        }, entries);
      }),
      validator: function validator(value) {
        return Array.isArray(value) || "Expected an array, but received: ".concat(print(value));
      },
      coercer: function coercer(value) {
        return Array.isArray(value) ? value.slice() : value;
      }
    });
  }
  /**
   * Ensure that a value has a set of known properties of specific types.
   *
   * Note: Unrecognized properties are allowed and untouched. This is similar to
   * how TypeScript's structural typing works.
   */


  function type(schema) {
    var keys = Object.keys(schema);
    return new Struct$1({
      type: 'type',
      schema: schema,
      entries: /*#__PURE__*/_regeneratorRuntime().mark(function entries(value) {
        var _iterator18, _step18, k;

        return _regeneratorRuntime().wrap(function entries$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              if (!isObject(value)) {
                _context16.next = 18;
                break;
              }

              _iterator18 = _createForOfIteratorHelper(keys);
              _context16.prev = 2;

              _iterator18.s();

            case 4:
              if ((_step18 = _iterator18.n()).done) {
                _context16.next = 10;
                break;
              }

              k = _step18.value;
              _context16.next = 8;
              return [k, value[k], schema[k]];

            case 8:
              _context16.next = 4;
              break;

            case 10:
              _context16.next = 15;
              break;

            case 12:
              _context16.prev = 12;
              _context16.t0 = _context16["catch"](2);

              _iterator18.e(_context16.t0);

            case 15:
              _context16.prev = 15;

              _iterator18.f();

              return _context16.finish(15);

            case 18:
            case "end":
              return _context16.stop();
          }
        }, entries, null, [[2, 12, 15, 18]]);
      }),
      validator: function validator(value) {
        return isNonArrayObject(value) || "Expected an object, but received: ".concat(print(value));
      },
      coercer: function coercer(value) {
        return isNonArrayObject(value) ? _objectSpread2({}, value) : value;
      }
    });
  }
  /**
   * Ensure that a value matches one of a set of types.
   */


  function union(Structs) {
    var description = Structs.map(function (s) {
      return s.type;
    }).join(' | ');
    return new Struct$1({
      type: 'union',
      schema: null,
      coercer: function coercer(value, ctx) {
        var _iterator19 = _createForOfIteratorHelper(Structs),
            _step19;

        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var S = _step19.value;

            var _S$validate3 = S.validate(value, {
              coerce: true,
              mask: ctx.mask
            }),
                _S$validate4 = _slicedToArray(_S$validate3, 2),
                error = _S$validate4[0],
                coerced = _S$validate4[1];

            if (!error) {
              return coerced;
            }
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }

        return value;
      },
      validator: function validator(value, ctx) {
        var failures = [];

        var _iterator20 = _createForOfIteratorHelper(Structs),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var S = _step20.value;

            var _run3 = run(value, S, ctx),
                _run4 = _toArray(_run3),
                tuples = _run4.slice(0);

            var _tuples2 = _slicedToArray(tuples, 1),
                first = _tuples2[0];

            if (!first[0]) {
              return [];
            } else {
              var _iterator21 = _createForOfIteratorHelper(tuples),
                  _step21;

              try {
                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                  var _step21$value2 = _slicedToArray(_step21.value, 1),
                      failure = _step21$value2[0];

                  if (failure) {
                    failures.push(failure);
                  }
                }
              } catch (err) {
                _iterator21.e(err);
              } finally {
                _iterator21.f();
              }
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }

        return ["Expected the value to satisfy a union of `".concat(description, "`, but received: ").concat(print(value))].concat(failures);
      }
    });
  }
  /**
   * Ensure that any value passes validation, without widening its type to `any`.
   */


  function unknown() {
    return define('unknown', function () {
      return true;
    });
  }
  /**
   * Augment a `Struct` to add an additional coercion step to its input.
   *
   * This allows you to transform input data before validating it, to increase the
   * likelihood that it passes validation—for example for default values, parsing
   * different formats, etc.
   *
   * Note: You must use `create(value, Struct)` on the value to have the coercion
   * take effect! Using simply `assert()` or `is()` will not use coercion.
   */


  function coerce(struct, condition, _coercer) {
    return new Struct$1(_objectSpread2(_objectSpread2({}, struct), {}, {
      coercer: function coercer(value, ctx) {
        return _is(value, condition) ? struct.coercer(_coercer(value, ctx), ctx) : struct.coercer(value, ctx);
      }
    }));
  }

  // Unique ID creation requires a high quality random # generator. In the browser we therefore
  // require the crypto API and do not support built-in fallback to lower quality random number
  // generators (like Math.random()).
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
      // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
      // find the complete implementation of crypto (msCrypto) on IE11.
      getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

      if (!getRandomValues) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }
    }

    return getRandomValues(rnds8);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
  }

  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }

    return uuid;
  }

  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;

  var _clockseq; // Previous uuid creation time


  var _lastMSecs = 0;
  var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || new Array(16);
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189

    if (node == null || clockseq == null) {
      var seedBytes = options.random || (options.rng || rng)();

      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


    var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock

    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval


    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested


    if (nsecs >= 10000) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

    msecs += 12219292800000; // `time_low`

    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`

    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`

    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

    b[i++] = clockseq & 0xff; // `node`

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf || stringify(b);
  }

  function parse(uuid) {
    if (!validate(uuid)) {
      throw TypeError('Invalid UUID');
    }

    var v;
    var arr = new Uint8Array(16); // Parse ########-....-....-....-............

    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............

    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............

    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............

    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
  }

  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape

    var bytes = [];

    for (var i = 0; i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }

    return bytes;
  }

  var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
  var URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  function v35 (name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === 'string') {
        value = stringToBytes(value);
      }

      if (typeof namespace === 'string') {
        namespace = parse(namespace);
      }

      if (namespace.length !== 16) {
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
      } // Compute hash of namespace and value, Per 4.3
      // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
      // hashfunc([...namespace, ... value])`


      var bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 0x0f | version;
      bytes[8] = bytes[8] & 0x3f | 0x80;

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }

        return buf;
      }

      return stringify(bytes);
    } // Function#name is not settable on some platforms (#270)


    try {
      generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support


    generateUUID.DNS = DNS;
    generateUUID.URL = URL$1;
    return generateUUID;
  }

  /*
   * Browser-compatible JavaScript MD5
   *
   * Modification of JavaScript MD5
   * https://github.com/blueimp/JavaScript-MD5
   *
   * Copyright 2011, Sebastian Tschan
   * https://blueimp.net
   *
   * Licensed under the MIT license:
   * https://opensource.org/licenses/MIT
   *
   * Based on
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */
  function md5(bytes) {
    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = new Uint8Array(msg.length);

      for (var i = 0; i < msg.length; ++i) {
        bytes[i] = msg.charCodeAt(i);
      }
    }

    return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
  }
  /*
   * Convert an array of little-endian words to an array of bytes
   */


  function md5ToHexEncodedArray(input) {
    var output = [];
    var length32 = input.length * 32;
    var hexTab = '0123456789abcdef';

    for (var i = 0; i < length32; i += 8) {
      var x = input[i >> 5] >>> i % 32 & 0xff;
      var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
      output.push(hex);
    }

    return output;
  }
  /**
   * Calculate output length with padding and bit length
   */


  function getOutputLength(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
  }
  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length.
   */


  function wordsToMd5(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[getOutputLength(len) - 1] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;

    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = md5ff(a, b, c, d, x[i], 7, -680876936);
      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5gg(b, c, d, a, x[i], 20, -373897302);
      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5hh(d, a, b, c, x[i], 11, -358537222);
      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5ii(a, b, c, d, x[i], 6, -198630844);
      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = safeAdd(a, olda);
      b = safeAdd(b, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
    }

    return [a, b, c, d];
  }
  /*
   * Convert an array bytes to an array of little-endian words
   * Characters >255 have their high-byte silently ignored.
   */


  function bytesToWords(input) {
    if (input.length === 0) {
      return [];
    }

    var length8 = input.length * 8;
    var output = new Uint32Array(getOutputLength(length8));

    for (var i = 0; i < length8; i += 8) {
      output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
    }

    return output;
  }
  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */


  function safeAdd(x, y) {
    var lsw = (x & 0xffff) + (y & 0xffff);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xffff;
  }
  /*
   * Bitwise rotate a 32-bit number to the left.
   */


  function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  /*
   * These functions implement the four basic operations the algorithm uses.
   */


  function md5cmn(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
  }

  function md5ff(a, b, c, d, x, s, t) {
    return md5cmn(b & c | ~b & d, a, b, x, s, t);
  }

  function md5gg(a, b, c, d, x, s, t) {
    return md5cmn(b & d | c & ~d, a, b, x, s, t);
  }

  function md5hh(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t);
  }

  function md5ii(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
  }

  var v3 = v35('v3', 0x30, md5);
  var v3$1 = v3;

  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }

      return buf;
    }

    return stringify(rnds);
  }

  // Adapted from Chris Veness' SHA1 code at
  // http://www.movable-type.co.uk/scripts/sha1.html
  function f(s, x, y, z) {
    switch (s) {
      case 0:
        return x & y ^ ~x & z;

      case 1:
        return x ^ y ^ z;

      case 2:
        return x & y ^ x & z ^ y & z;

      case 3:
        return x ^ y ^ z;
    }
  }

  function ROTL(x, n) {
    return x << n | x >>> 32 - n;
  }

  function sha1(bytes) {
    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
    var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

    if (typeof bytes === 'string') {
      var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

      bytes = [];

      for (var i = 0; i < msg.length; ++i) {
        bytes.push(msg.charCodeAt(i));
      }
    } else if (!Array.isArray(bytes)) {
      // Convert Array-like to Array
      bytes = Array.prototype.slice.call(bytes);
    }

    bytes.push(0x80);
    var l = bytes.length / 4 + 2;
    var N = Math.ceil(l / 16);
    var M = new Array(N);

    for (var _i = 0; _i < N; ++_i) {
      var arr = new Uint32Array(16);

      for (var j = 0; j < 16; ++j) {
        arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
      }

      M[_i] = arr;
    }

    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

    for (var _i2 = 0; _i2 < N; ++_i2) {
      var W = new Uint32Array(80);

      for (var t = 0; t < 16; ++t) {
        W[t] = M[_i2][t];
      }

      for (var _t = 16; _t < 80; ++_t) {
        W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
      }

      var a = H[0];
      var b = H[1];
      var c = H[2];
      var d = H[3];
      var e = H[4];

      for (var _t2 = 0; _t2 < 80; ++_t2) {
        var s = Math.floor(_t2 / 20);
        var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
        e = d;
        d = c;
        c = ROTL(b, 30) >>> 0;
        b = a;
        a = T;
      }

      H[0] = H[0] + a >>> 0;
      H[1] = H[1] + b >>> 0;
      H[2] = H[2] + c >>> 0;
      H[3] = H[3] + d >>> 0;
      H[4] = H[4] + e >>> 0;
    }

    return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
  }

  var v5 = v35('v5', 0x50, sha1);
  var v5$1 = v5;

  var nil = '00000000-0000-0000-0000-000000000000';

  function version(uuid) {
    if (!validate(uuid)) {
      throw TypeError('Invalid UUID');
    }

    return parseInt(uuid.substr(14, 1), 16);
  }

  var esmBrowser = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	v1: v1,
  	v3: v3$1,
  	v4: v4,
  	v5: v5$1,
  	NIL: nil,
  	version: version,
  	validate: validate,
  	stringify: stringify,
  	parse: parse
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(esmBrowser);

  var uuid$1 = require$$0.v4;
  /**
   *  Generates a JSON-RPC 1.0 or 2.0 request
   *  @param {String} method Name of method to call
   *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value
   *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation
   *  @param {Object} [options]
   *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)
   *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
   *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID
   *  @throws {TypeError} If any of the parameters are invalid
   *  @return {Object} A JSON-RPC 1.0 or 2.0 request
   *  @memberOf Utils
   */

  var generateRequest$1 = function generateRequest(method, params, id, options) {
    if (typeof method !== 'string') {
      throw new TypeError(method + ' must be a string');
    }

    options = options || {}; // check valid version provided

    var version = typeof options.version === 'number' ? options.version : 2;

    if (version !== 1 && version !== 2) {
      throw new TypeError(version + ' must be 1 or 2');
    }

    var request = {
      method: method
    };

    if (version === 2) {
      request.jsonrpc = '2.0';
    }

    if (params) {
      // params given, but invalid?
      if (_typeof(params) !== 'object' && !Array.isArray(params)) {
        throw new TypeError(params + ' must be an object, array or omitted');
      }

      request.params = params;
    } // if id was left out, generate one (null means explicit notification)


    if (typeof id === 'undefined') {
      var generator = typeof options.generator === 'function' ? options.generator : function () {
        return uuid$1();
      };
      request.id = generator(request, options);
    } else if (version === 2 && id === null) {
      // we have a version 2 notification
      if (options.notificationIdNull) {
        request.id = null; // id will not be set at all unless option provided
      }
    } else {
      request.id = id;
    }

    return request;
  };

  var generateRequest_1 = generateRequest$1;

  var uuid = require$$0.v4;
  var generateRequest = generateRequest_1;
  /**
   * Constructor for a Jayson Browser Client that does not depend any node.js core libraries
   * @class ClientBrowser
   * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback
   * @param {Object} [options]
   * @param {Function} [options.reviver] Reviver function for JSON
   * @param {Function} [options.replacer] Replacer function for JSON
   * @param {Number} [options.version=2] JSON-RPC version to use (1|2)
   * @param {Function} [options.generator] Function to use for generating request IDs
   *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it
   * @return {ClientBrowser}
   */

  var ClientBrowser = function ClientBrowser(callServer, options) {
    if (!(this instanceof ClientBrowser)) {
      return new ClientBrowser(callServer, options);
    }

    if (!options) {
      options = {};
    }

    this.options = {
      reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,
      replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,
      generator: typeof options.generator !== 'undefined' ? options.generator : function () {
        return uuid();
      },
      version: typeof options.version !== 'undefined' ? options.version : 2,
      notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false
    };
    this.callServer = callServer;
  };

  var browser = ClientBrowser;
  /**
   *  Creates a request and dispatches it if given a callback.
   *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String
   *  @param {Array|Object} [params] Parameters for the method
   *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request
   *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.
   *  @throws {TypeError} Invalid parameters
   *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request
   */

  ClientBrowser.prototype.request = function (method, params, id, callback) {
    var self = this;
    var request = null; // is this a batch request?

    var isBatch = Array.isArray(method) && typeof params === 'function';

    if (this.options.version === 1 && isBatch) {
      throw new TypeError('JSON-RPC 1.0 does not support batching');
    } // is this a raw request?


    var isRaw = !isBatch && method && _typeof(method) === 'object' && typeof params === 'function';

    if (isBatch || isRaw) {
      callback = params;
      request = method;
    } else {
      if (typeof id === 'function') {
        callback = id; // specifically undefined because "null" is a notification request

        id = undefined;
      }

      var hasCallback = typeof callback === 'function';

      try {
        request = generateRequest(method, params, id, {
          generator: this.options.generator,
          version: this.options.version,
          notificationIdNull: this.options.notificationIdNull
        });
      } catch (err) {
        if (hasCallback) {
          return callback(err);
        }

        throw err;
      } // no callback means we should just return a raw request


      if (!hasCallback) {
        return request;
      }
    }

    var message;

    try {
      message = JSON.stringify(request, this.options.replacer);
    } catch (err) {
      return callback(err);
    }

    this.callServer(message, function (err, response) {
      self._parseResponse(err, response, callback);
    }); // always return the raw request

    return request;
  };
  /**
   * Parses a response from a server
   * @param {Object} err Error to pass on that is unrelated to the actual response
   * @param {String} responseText JSON-RPC 1.0 or 2.0 response
   * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters
   * @private
   */


  ClientBrowser.prototype._parseResponse = function (err, responseText, callback) {
    if (err) {
      callback(err);
      return;
    }

    if (!responseText) {
      // empty response text, assume that is correct because it could be a
      // notification which jayson does not give any body for
      return callback();
    }

    var response;

    try {
      response = JSON.parse(responseText, this.options.reviver);
    } catch (err) {
      return callback(err);
    }

    if (callback.length === 3) {
      // if callback length is 3, we split callback arguments on error and response
      // is batch response?
      if (Array.isArray(response)) {
        // neccesary to split strictly on validity according to spec here
        var isError = function isError(res) {
          return typeof res.error !== 'undefined';
        };

        var isNotError = function isNotError(res) {
          return !isError(res);
        };

        return callback(null, response.filter(isError), response.filter(isNotError));
      } else {
        // split regardless of validity
        return callback(null, response.error, response.result);
      }
    }

    callback(null, response);
  };

  var RpcClient = browser;

  var eventemitter3 = {exports: {}};

  (function (module) {

    var has = Object.prototype.hasOwnProperty,
        prefix = '~';
    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */

    function Events() {} //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //


    if (Object.create) {
      Events.prototype = Object.create(null); //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //

      if (!new Events().__proto__) prefix = false;
    }
    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */


    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */


    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once),
          evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */


    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
    }
    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */


    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */


    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [],
          events,
          name;
      if (this._eventsCount === 0) return names;

      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };
    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */


    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event,
          handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };
    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */


    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event,
          listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */


    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt],
          len = arguments.length,
          args,
          i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;

          case 2:
            return listeners.fn.call(listeners.context, a1), true;

          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;

          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;

          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length,
            j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;

            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;

            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;

            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;

            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };
    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;

      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        } //
        // Reset the array, or remove it completely if we have no more listeners.
        //


        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
      }

      return this;
    };
    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */


    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    }; //
    // Alias methods names because people roll like that.
    //


    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
    // Expose the prefix.
    //

    EventEmitter.prefixed = prefix; //
    // Allow `EventEmitter` to be imported as module namespace.
    //

    EventEmitter.EventEmitter = EventEmitter; //
    // Expose the module.
    //

    {
      module.exports = EventEmitter;
    }
  })(eventemitter3);

  var EventEmitter = eventemitter3.exports;

  var _excluded$1 = ["autoconnect", "reconnect", "reconnect_interval", "max_reconnects"];

  var WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {
    _inherits(WebSocketBrowserImpl, _EventEmitter);

    var _super = _createSuper(WebSocketBrowserImpl);

    /** Instantiate a WebSocket class
    * @constructor
    * @param {String} address - url to a websocket server
    * @param {(Object)} options - websocket options
    * @param {(String|Array)} protocols - a list of protocols
    * @return {WebSocketBrowserImpl} - returns a WebSocket instance
    */
    function WebSocketBrowserImpl(address, options, protocols) {
      var _this;

      _classCallCheck(this, WebSocketBrowserImpl);

      _this = _super.call(this);

      _defineProperty(_assertThisInitialized(_this), "socket", void 0);

      _this.socket = new window.WebSocket(address, protocols);

      _this.socket.onopen = function () {
        return _this.emit("open");
      };

      _this.socket.onmessage = function (event) {
        return _this.emit("message", event.data);
      };

      _this.socket.onerror = function (error) {
        return _this.emit("error", error);
      };

      _this.socket.onclose = function (event) {
        _this.emit("close", event.code, event.reason);
      };

      return _this;
    }
    /**
    * Sends data through a websocket connection
    * @method
    * @param {(String|Object)} data - data to be sent via websocket
    * @param {Object} optionsOrCallback - ws options
    * @param {Function} callback - a callback called once the data is sent
    * @return {Undefined}
    */


    _createClass(WebSocketBrowserImpl, [{
      key: "send",
      value: function send(data, optionsOrCallback, callback) {
        var cb = callback || optionsOrCallback;

        try {
          this.socket.send(data);
          cb();
        } catch (error) {
          cb(error);
        }
      }
      /**
      * Closes an underlying socket
      * @method
      * @param {Number} code - status code explaining why the connection is being closed
      * @param {String} reason - a description why the connection is closing
      * @return {Undefined}
      * @throws {Error}
      */

    }, {
      key: "close",
      value: function close(code, reason) {
        this.socket.close(code, reason);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener, options) {
        this.socket.addEventListener(type, listener, options);
      }
    }]);

    return WebSocketBrowserImpl;
  }(EventEmitter);

  function WebSocket$1(address, options) {
    return new WebSocketBrowserImpl(address, options);
  } // src/lib/utils.ts


  var DefaultDataPack = /*#__PURE__*/function () {
    function DefaultDataPack() {
      _classCallCheck(this, DefaultDataPack);
    }

    _createClass(DefaultDataPack, [{
      key: "encode",
      value: function encode(value) {
        return JSON.stringify(value);
      }
    }, {
      key: "decode",
      value: function decode(value) {
        return JSON.parse(value);
      }
    }]);

    return DefaultDataPack;
  }(); // src/lib/client.ts


  var CommonClient = /*#__PURE__*/function (_EventEmitter2) {
    _inherits(CommonClient, _EventEmitter2);

    var _super2 = _createSuper(CommonClient);

    /**
    * Instantiate a Client class.
    * @constructor
    * @param {webSocketFactory} webSocketFactory - factory method for WebSocket
    * @param {String} address - url to a websocket server
    * @param {Object} options - ws options object with reconnect parameters
    * @param {Function} generate_request_id - custom generation request Id
    * @param {DataPack} dataPack - data pack contains encoder and decoder
    * @return {CommonClient}
    */
    function CommonClient(webSocketFactory) {
      var _this2;

      var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "ws://localhost:8080";

      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref$autoconnect = _ref.autoconnect,
          autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,
          _ref$reconnect = _ref.reconnect,
          reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,
          _ref$reconnect_interv = _ref.reconnect_interval,
          reconnect_interval = _ref$reconnect_interv === void 0 ? 1e3 : _ref$reconnect_interv,
          _ref$max_reconnects = _ref.max_reconnects,
          max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects,
          rest_options = _objectWithoutProperties(_ref, _excluded$1);

      var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;
      var dataPack = arguments.length > 4 ? arguments[4] : undefined;

      _classCallCheck(this, CommonClient);

      _this2 = _super2.call(this);

      _defineProperty(_assertThisInitialized(_this2), "address", void 0);

      _defineProperty(_assertThisInitialized(_this2), "rpc_id", void 0);

      _defineProperty(_assertThisInitialized(_this2), "queue", void 0);

      _defineProperty(_assertThisInitialized(_this2), "options", void 0);

      _defineProperty(_assertThisInitialized(_this2), "autoconnect", void 0);

      _defineProperty(_assertThisInitialized(_this2), "ready", void 0);

      _defineProperty(_assertThisInitialized(_this2), "reconnect", void 0);

      _defineProperty(_assertThisInitialized(_this2), "reconnect_timer_id", void 0);

      _defineProperty(_assertThisInitialized(_this2), "reconnect_interval", void 0);

      _defineProperty(_assertThisInitialized(_this2), "max_reconnects", void 0);

      _defineProperty(_assertThisInitialized(_this2), "rest_options", void 0);

      _defineProperty(_assertThisInitialized(_this2), "current_reconnects", void 0);

      _defineProperty(_assertThisInitialized(_this2), "generate_request_id", void 0);

      _defineProperty(_assertThisInitialized(_this2), "socket", void 0);

      _defineProperty(_assertThisInitialized(_this2), "webSocketFactory", void 0);

      _defineProperty(_assertThisInitialized(_this2), "dataPack", void 0);

      _this2.webSocketFactory = webSocketFactory;
      _this2.queue = {};
      _this2.rpc_id = 0;
      _this2.address = address;
      _this2.autoconnect = autoconnect;
      _this2.ready = false;
      _this2.reconnect = reconnect;
      _this2.reconnect_timer_id = void 0;
      _this2.reconnect_interval = reconnect_interval;
      _this2.max_reconnects = max_reconnects;
      _this2.rest_options = rest_options;
      _this2.current_reconnects = 0;

      _this2.generate_request_id = generate_request_id || function () {
        return ++_this2.rpc_id;
      };

      if (!dataPack) _this2.dataPack = new DefaultDataPack();else _this2.dataPack = dataPack;
      if (_this2.autoconnect) _this2._connect(_this2.address, _objectSpread2({
        autoconnect: _this2.autoconnect,
        reconnect: _this2.reconnect,
        reconnect_interval: _this2.reconnect_interval,
        max_reconnects: _this2.max_reconnects
      }, _this2.rest_options));
      return _this2;
    }
    /**
    * Connects to a defined server if not connected already.
    * @method
    * @return {Undefined}
    */


    _createClass(CommonClient, [{
      key: "connect",
      value: function connect() {
        if (this.socket) return;

        this._connect(this.address, _objectSpread2({
          autoconnect: this.autoconnect,
          reconnect: this.reconnect,
          reconnect_interval: this.reconnect_interval,
          max_reconnects: this.max_reconnects
        }, this.rest_options));
      }
      /**
      * Calls a registered RPC method on server.
      * @method
      * @param {String} method - RPC method name
      * @param {Object|Array} params - optional method parameters
      * @param {Number} timeout - RPC reply timeout value
      * @param {Object} ws_opts - options passed to ws
      * @return {Promise}
      */

    }, {
      key: "call",
      value: function call(method, params, timeout, ws_opts) {
        var _this3 = this;

        if (!ws_opts && "object" === _typeof(timeout)) {
          ws_opts = timeout;
          timeout = null;
        }

        return new Promise(function (resolve, reject) {
          if (!_this3.ready) return reject(new Error("socket not ready"));

          var rpc_id = _this3.generate_request_id(method, params);

          var message = {
            jsonrpc: "2.0",
            method: method,
            params: params || void 0,
            id: rpc_id
          };

          _this3.socket.send(_this3.dataPack.encode(message), ws_opts, function (error) {
            if (error) return reject(error);
            _this3.queue[rpc_id] = {
              promise: [resolve, reject]
            };

            if (timeout) {
              _this3.queue[rpc_id].timeout = setTimeout(function () {
                delete _this3.queue[rpc_id];
                reject(new Error("reply timeout"));
              }, timeout);
            }
          });
        });
      }
      /**
      * Logins with the other side of the connection.
      * @method
      * @param {Object} params - Login credentials object
      * @return {Promise}
      */

    }, {
      key: "login",
      value: function () {
        var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
          var resp;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.call("rpc.login", params);

              case 2:
                resp = _context.sent;

                if (resp) {
                  _context.next = 5;
                  break;
                }

                throw new Error("authentication failed");

              case 5:
                return _context.abrupt("return", resp);

              case 6:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));

        function login(_x) {
          return _login.apply(this, arguments);
        }

        return login;
      }()
      /**
      * Fetches a list of client's methods registered on server.
      * @method
      * @return {Array}
      */

    }, {
      key: "listMethods",
      value: function () {
        var _listMethods = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.call("__listMethods");

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));

        function listMethods() {
          return _listMethods.apply(this, arguments);
        }

        return listMethods;
      }()
      /**
      * Sends a JSON-RPC 2.0 notification to server.
      * @method
      * @param {String} method - RPC method name
      * @param {Object} params - optional method parameters
      * @return {Promise}
      */

    }, {
      key: "notify",
      value: function notify(method, params) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          if (!_this4.ready) return reject(new Error("socket not ready"));
          var message = {
            jsonrpc: "2.0",
            method: method,
            params: params
          };

          _this4.socket.send(_this4.dataPack.encode(message), function (error) {
            if (error) return reject(error);
            resolve();
          });
        });
      }
      /**
      * Subscribes for a defined event.
      * @method
      * @param {String|Array} event - event name
      * @return {Undefined}
      * @throws {Error}
      */

    }, {
      key: "subscribe",
      value: function () {
        var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(event) {
          var result;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (typeof event === "string") event = [event];
                _context3.next = 3;
                return this.call("rpc.on", event);

              case 3:
                result = _context3.sent;

                if (!(typeof event === "string" && result[event] !== "ok")) {
                  _context3.next = 6;
                  break;
                }

                throw new Error("Failed subscribing to an event '" + event + "' with: " + result[event]);

              case 6:
                return _context3.abrupt("return", result);

              case 7:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));

        function subscribe(_x2) {
          return _subscribe.apply(this, arguments);
        }

        return subscribe;
      }()
      /**
      * Unsubscribes from a defined event.
      * @method
      * @param {String|Array} event - event name
      * @return {Undefined}
      * @throws {Error}
      */

    }, {
      key: "unsubscribe",
      value: function () {
        var _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {
          var result;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                if (typeof event === "string") event = [event];
                _context4.next = 3;
                return this.call("rpc.off", event);

              case 3:
                result = _context4.sent;

                if (!(typeof event === "string" && result[event] !== "ok")) {
                  _context4.next = 6;
                  break;
                }

                throw new Error("Failed unsubscribing from an event with: " + result);

              case 6:
                return _context4.abrupt("return", result);

              case 7:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));

        function unsubscribe(_x3) {
          return _unsubscribe.apply(this, arguments);
        }

        return unsubscribe;
      }()
      /**
      * Closes a WebSocket connection gracefully.
      * @method
      * @param {Number} code - socket close code
      * @param {String} data - optional data to be sent before closing
      * @return {Undefined}
      */

    }, {
      key: "close",
      value: function close(code, data) {
        this.socket.close(code || 1e3, data);
      }
      /**
      * Enable / disable automatic reconnection.
      * @method
      * @param {Boolean} reconnect - enable / disable reconnection
      * @return {Undefined}
      */

    }, {
      key: "setAutoReconnect",
      value: function setAutoReconnect(reconnect) {
        this.reconnect = reconnect;
      }
      /**
      * Set the interval between reconnection attempts.
      * @method
      * @param {Number} interval - reconnection interval in milliseconds
      * @return {Undefined}
      */

    }, {
      key: "setReconnectInterval",
      value: function setReconnectInterval(interval) {
        this.reconnect_interval = interval;
      }
      /**
      * Set the maximum number of reconnection attempts.
      * @method
      * @param {Number} max_reconnects - maximum reconnection attempts
      * @return {Undefined}
      */

    }, {
      key: "setMaxReconnects",
      value: function setMaxReconnects(max_reconnects) {
        this.max_reconnects = max_reconnects;
      }
      /**
      * Connection/Message handler.
      * @method
      * @private
      * @param {String} address - WebSocket API address
      * @param {Object} options - ws options object
      * @return {Undefined}
      */

    }, {
      key: "_connect",
      value: function _connect(address, options) {
        var _this5 = this;

        clearTimeout(this.reconnect_timer_id);
        this.socket = this.webSocketFactory(address, options);
        this.socket.addEventListener("open", function () {
          _this5.ready = true;

          _this5.emit("open");

          _this5.current_reconnects = 0;
        });
        this.socket.addEventListener("message", function (_ref2) {
          var message = _ref2.data;
          if (message instanceof ArrayBuffer) message = Buffer$1.from(message).toString();

          try {
            message = _this5.dataPack.decode(message);
          } catch (error) {
            return;
          }

          if (message.notification && _this5.listeners(message.notification).length) {
            if (!Object.keys(message.params).length) return _this5.emit(message.notification);
            var args = [message.notification];
            if (message.params.constructor === Object) args.push(message.params);else for (var i = 0; i < message.params.length; i++) args.push(message.params[i]);
            return Promise.resolve().then(function () {
              _this5.emit.apply(_this5, args);
            });
          }

          if (!_this5.queue[message.id]) {
            if (message.method) {
              return Promise.resolve().then(function () {
                var _message;

                _this5.emit(message.method, (_message = message) === null || _message === void 0 ? void 0 : _message.params);
              });
            }

            return;
          }

          if ("error" in message === "result" in message) _this5.queue[message.id].promise[1](new Error('Server response malformed. Response must include either "result" or "error", but not both.'));
          if (_this5.queue[message.id].timeout) clearTimeout(_this5.queue[message.id].timeout);
          if (message.error) _this5.queue[message.id].promise[1](message.error);else _this5.queue[message.id].promise[0](message.result);
          delete _this5.queue[message.id];
        });
        this.socket.addEventListener("error", function (error) {
          return _this5.emit("error", error);
        });
        this.socket.addEventListener("close", function (_ref3) {
          var code = _ref3.code,
              reason = _ref3.reason;
          if (_this5.ready) setTimeout(function () {
            return _this5.emit("close", code, reason);
          }, 0);
          _this5.ready = false;
          _this5.socket = void 0;
          if (code === 1e3) return;
          _this5.current_reconnects++;
          if (_this5.reconnect && (_this5.max_reconnects > _this5.current_reconnects || _this5.max_reconnects === 0)) _this5.reconnect_timer_id = setTimeout(function () {
            return _this5._connect(address, options);
          }, _this5.reconnect_interval);
        });
      }
    }]);

    return CommonClient;
  }(EventEmitter); // src/index.browser.ts

  // It's called a sponge function.
  // Various per round constants calculations

  var SHA3_PI = [];
  var SHA3_ROTL = [];
  var _SHA3_IOTA = [];

  var _0n$6 = /* @__PURE__ */BigInt(0);

  var _1n$7 = /* @__PURE__ */BigInt(1);

  var _2n$4 = /* @__PURE__ */BigInt(2);

  var _7n = /* @__PURE__ */BigInt(7);

  var _256n = /* @__PURE__ */BigInt(256);

  var _0x71n = /* @__PURE__ */BigInt(0x71);

  for (var round = 0, R = _1n$7, x = 1, y = 0; round < 24; round++) {
    // Pi
    var _ref$1 = [y, (2 * x + 3 * y) % 5];
    x = _ref$1[0];
    y = _ref$1[1];
    SHA3_PI.push(2 * (5 * y + x)); // Rotational

    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64); // Iota

    var t = _0n$6;

    for (var j = 0; j < 7; j++) {
      R = (R << _1n$7 ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n$4) t ^= _1n$7 << (_1n$7 << /* @__PURE__ */BigInt(j)) - _1n$7;
    }

    _SHA3_IOTA.push(t);
  }

  var _split = /* @__PURE__ */split$1(_SHA3_IOTA, true),
      _split2 = _slicedToArray(_split, 2),
      SHA3_IOTA_H = _split2[0],
      SHA3_IOTA_L = _split2[1]; // Left rotation (without 0, 32, 64)


  var rotlH = function rotlH(h, l, s) {
    return s > 32 ? rotlBH$1(h, l, s) : rotlSH$1(h, l, s);
  };

  var rotlL = function rotlL(h, l, s) {
    return s > 32 ? rotlBL$1(h, l, s) : rotlSL$1(h, l, s);
  }; // Same as keccakf1600, but allows to skip some rounds


  function keccakP(s) {
    var rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;
    var B = new Uint32Array(5 * 2); // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)

    for (var _round2 = 24 - rounds; _round2 < 24; _round2++) {
      // Theta θ
      for (var _x2 = 0; _x2 < 10; _x2++) B[_x2] = s[_x2] ^ s[_x2 + 10] ^ s[_x2 + 20] ^ s[_x2 + 30] ^ s[_x2 + 40];

      for (var _x4 = 0; _x4 < 10; _x4 += 2) {
        var idx1 = (_x4 + 8) % 10;
        var idx0 = (_x4 + 2) % 10;
        var B0 = B[idx0];
        var B1 = B[idx0 + 1];
        var Th = rotlH(B0, B1, 1) ^ B[idx1];
        var Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];

        for (var _y2 = 0; _y2 < 50; _y2 += 10) {
          s[_x4 + _y2] ^= Th;
          s[_x4 + _y2 + 1] ^= Tl;
        }
      } // Rho (ρ) and Pi (π)


      var curH = s[2];
      var curL = s[3];

      for (var _t2 = 0; _t2 < 24; _t2++) {
        var shift = SHA3_ROTL[_t2];

        var _Th = rotlH(curH, curL, shift);

        var _Tl = rotlL(curH, curL, shift);

        var PI = SHA3_PI[_t2];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = _Th;
        s[PI + 1] = _Tl;
      } // Chi (χ)


      for (var _y4 = 0; _y4 < 50; _y4 += 10) {
        for (var _x6 = 0; _x6 < 10; _x6++) B[_x6] = s[_y4 + _x6];

        for (var _x8 = 0; _x8 < 10; _x8++) s[_y4 + _x8] ^= ~B[(_x8 + 2) % 10] & B[(_x8 + 4) % 10];
      } // Iota (ι)


      s[0] ^= SHA3_IOTA_H[_round2];
      s[1] ^= SHA3_IOTA_L[_round2];
    }

    B.fill(0);
  }
  var Keccak = /*#__PURE__*/function (_Hash) {
    _inherits(Keccak, _Hash);

    var _super = _createSuper(Keccak);

    // NOTE: we accept arguments in bytes instead of bits here.
    function Keccak(blockLen, suffix, outputLen) {
      var _this;

      var enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;

      _classCallCheck(this, Keccak);

      _this = _super.call(this);
      _this.blockLen = blockLen;
      _this.suffix = suffix;
      _this.outputLen = outputLen;
      _this.enableXOF = enableXOF;
      _this.rounds = rounds;
      _this.pos = 0;
      _this.posOut = 0;
      _this.finished = false;
      _this.destroyed = false; // Can be passed from user as dkLen

      number$2(outputLen); // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes

      if (0 >= _this.blockLen || _this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');
      _this.state = new Uint8Array(200);
      _this.state32 = u32$1(_this.state);
      return _this;
    }

    _createClass(Keccak, [{
      key: "keccak",
      value: function keccak() {
        if (!isLE) byteSwap32(this.state32);
        keccakP(this.state32, this.rounds);
        if (!isLE) byteSwap32(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
    }, {
      key: "update",
      value: function update(data) {
        exists$1(this);
        var blockLen = this.blockLen,
            state = this.state;
        data = toBytes(data);
        var len = data.length;

        for (var pos = 0; pos < len;) {
          var take = Math.min(blockLen - this.pos, len - pos);

          for (var i = 0; i < take; i++) state[this.pos++] ^= data[pos++];

          if (this.pos === blockLen) this.keccak();
        }

        return this;
      }
    }, {
      key: "finish",
      value: function finish() {
        if (this.finished) return;
        this.finished = true;
        var state = this.state,
            suffix = this.suffix,
            pos = this.pos,
            blockLen = this.blockLen; // Do the padding

        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
      }
    }, {
      key: "writeInto",
      value: function writeInto(out) {
        exists$1(this, false);
        bytes$1(out);
        this.finish();
        var bufferOut = this.state;
        var blockLen = this.blockLen;

        for (var pos = 0, len = out.length; pos < len;) {
          if (this.posOut >= blockLen) this.keccak();
          var take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }

        return out;
      }
    }, {
      key: "xofInto",
      value: function xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
      }
    }, {
      key: "xof",
      value: function xof(bytes) {
        number$2(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
    }, {
      key: "digestInto",
      value: function digestInto(out) {
        output$1(out, this);
        if (this.finished) throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
      }
    }, {
      key: "digest",
      value: function digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
    }, {
      key: "_cloneInto",
      value: function _cloneInto(to) {
        var blockLen = this.blockLen,
            suffix = this.suffix,
            outputLen = this.outputLen,
            rounds = this.rounds,
            enableXOF = this.enableXOF;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds; // Suffix can change in cSHAKE

        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    }]);

    return Keccak;
  }(Hash);

  var gen = function gen(suffix, blockLen, outputLen) {
    return wrapConstructor(function () {
      return new Keccak(blockLen, suffix, outputLen);
    });
  };
  /**
   * keccak-256 hash function. Different from SHA3-256.
   * @param message - that would be hashed
   */

  var keccak_256 = /* @__PURE__ */gen(0x01, 136, 256 / 8);

  var HMAC = /*#__PURE__*/function (_Hash) {
    _inherits(HMAC, _Hash);

    var _super = _createSuper(HMAC);

    function HMAC(hash, _key) {
      var _this;

      _classCallCheck(this, HMAC);

      _this = _super.call(this);
      _this.finished = false;
      _this.destroyed = false;
      hash$1(hash);
      var key = toBytes(_key);
      _this.iHash = hash.create();
      if (typeof _this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');
      _this.blockLen = _this.iHash.blockLen;
      _this.outputLen = _this.iHash.outputLen;
      var blockLen = _this.blockLen;
      var pad = new Uint8Array(blockLen); // blockLen can be bigger than outputLen

      pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);

      for (var i = 0; i < pad.length; i++) pad[i] ^= 0x36;

      _this.iHash.update(pad); // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone


      _this.oHash = hash.create(); // Undo internal XOR && apply outer XOR

      for (var _i2 = 0; _i2 < pad.length; _i2++) pad[_i2] ^= 0x36 ^ 0x5c;

      _this.oHash.update(pad);

      pad.fill(0);
      return _this;
    }

    _createClass(HMAC, [{
      key: "update",
      value: function update(buf) {
        exists$1(this);
        this.iHash.update(buf);
        return this;
      }
    }, {
      key: "digestInto",
      value: function digestInto(out) {
        exists$1(this);
        bytes$1(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
    }, {
      key: "digest",
      value: function digest() {
        var out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
    }, {
      key: "_cloneInto",
      value: function _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        var oHash = this.oHash,
            iHash = this.iHash,
            finished = this.finished,
            destroyed = this.destroyed,
            blockLen = this.blockLen,
            outputLen = this.outputLen;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }]);

    return HMAC;
  }(Hash);
  /**
   * HMAC: RFC2104 message authentication code.
   * @param hash - function that would be used e.g. sha256
   * @param key - message key
   * @param message - message data
   * @example
   * import { hmac } from '@noble/hashes/hmac';
   * import { sha256 } from '@noble/hashes/sha2';
   * const mac1 = hmac(sha256, 'key', 'message');
   */

  var hmac = function hmac(hash, key, message) {
    return new HMAC(hash, key).update(message).digest();
  };

  hmac.create = function (hash, key) {
    return new HMAC(hash, key);
  };

  function validateSigVerOpts(opts) {
    if (opts.lowS !== undefined) abool$1('lowS', opts.lowS);
    if (opts.prehash !== undefined) abool$1('prehash', opts.prehash);
  }

  function validatePointOpts(curve) {
    var opts = validateBasic$1(curve);
    validateObject$1(opts, {
      a: 'field',
      b: 'field'
    }, {
      allowedPrivateKeyLengths: 'array',
      wrapPrivateKey: 'boolean',
      isTorsionFree: 'function',
      clearCofactor: 'function',
      allowInfinityPoint: 'boolean',
      fromBytes: 'function',
      toBytes: 'function'
    });
    var endo = opts.endo,
        Fp = opts.Fp,
        a = opts.a;

    if (endo) {
      if (!Fp.eql(a, Fp.ZERO)) {
        throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
      }

      if (_typeof(endo) !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {
        throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
      }
    }

    return Object.freeze(_objectSpread2({}, opts));
  }

  var b2n = bytesToNumberBE$1,
      h2b = hexToBytes$1;
  /**
   * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:
   *
   *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]
   *
   * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html
   */

  var DER = {
    // asn.1 DER encoding utils
    Err: /*#__PURE__*/function (_Error) {
      _inherits(DERErr, _Error);

      var _super = _createSuper(DERErr);

      function DERErr() {
        var m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        _classCallCheck(this, DERErr);

        return _super.call(this, m);
      }

      return _createClass(DERErr);
    }( /*#__PURE__*/_wrapNativeSuper(Error)),
    // Basic building block is TLV (Tag-Length-Value)
    _tlv: {
      encode: function encode(tag, data) {
        var E = DER.Err;
        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');
        if (data.length & 1) throw new E('tlv.encode: unpadded data');
        var dataLen = data.length / 2;
        var len = numberToHexUnpadded$1(dataLen);
        if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big'); // length of length with long form flag

        var lenLen = dataLen > 127 ? numberToHexUnpadded$1(len.length / 2 | 128) : '';
        return "".concat(numberToHexUnpadded$1(tag)).concat(lenLen).concat(len).concat(data);
      },
      // v - value, l - left bytes (unparsed)
      decode: function decode(tag, data) {
        var E = DER.Err;
        var pos = 0;
        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');
        if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');
        var first = data[pos++];
        var isLong = !!(first & 128); // First bit of first length byte is flag for short/long form

        var length = 0;
        if (!isLong) length = first;else {
          // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]
          var lenLen = first & 127;
          if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');
          if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js

          var lengthBytes = data.subarray(pos, pos + lenLen);
          if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');
          if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');

          var _iterator = _createForOfIteratorHelper(lengthBytes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var b = _step.value;
              length = length << 8 | b;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          pos += lenLen;
          if (length < 128) throw new E('tlv.decode(long): not minimal encoding');
        }
        var v = data.subarray(pos, pos + length);
        if (v.length !== length) throw new E('tlv.decode: wrong value length');
        return {
          v: v,
          l: data.subarray(pos + length)
        };
      }
    },
    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
    // since we always use positive integers here. It must always be empty:
    // - add zero byte if exists
    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
    _int: {
      encode: function encode(num) {
        var E = DER.Err;
        if (num < _0n$5) throw new E('integer: negative integers are not allowed');
        var hex = numberToHexUnpadded$1(num); // Pad with zero byte if negative flag is present

        if (Number.parseInt(hex[0], 16) & 8) hex = '00' + hex;
        if (hex.length & 1) throw new E('unexpected assertion');
        return hex;
      },
      decode: function decode(data) {
        var E = DER.Err;
        if (data[0] & 128) throw new E('Invalid signature integer: negative');
        if (data[0] === 0x00 && !(data[1] & 128)) throw new E('Invalid signature integer: unnecessary leading zero');
        return b2n(data);
      }
    },
    toSig: function toSig(hex) {
      // parse DER signature
      var E = DER.Err,
          _int = DER._int,
          tlv = DER._tlv;
      var data = typeof hex === 'string' ? h2b(hex) : hex;
      abytes$1(data);

      var _tlv$decode = tlv.decode(0x30, data),
          seqBytes = _tlv$decode.v,
          seqLeftBytes = _tlv$decode.l;

      if (seqLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');

      var _tlv$decode2 = tlv.decode(0x02, seqBytes),
          rBytes = _tlv$decode2.v,
          rLeftBytes = _tlv$decode2.l;

      var _tlv$decode3 = tlv.decode(0x02, rLeftBytes),
          sBytes = _tlv$decode3.v,
          sLeftBytes = _tlv$decode3.l;

      if (sLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');
      return {
        r: _int.decode(rBytes),
        s: _int.decode(sBytes)
      };
    },
    hexFromSig: function hexFromSig(sig) {
      var tlv = DER._tlv,
          _int2 = DER._int;
      var seq = "".concat(tlv.encode(0x02, _int2.encode(sig.r))).concat(tlv.encode(0x02, _int2.encode(sig.s)));
      return tlv.encode(0x30, seq);
    }
  }; // Be friendly to bad ECMAScript parsers by not using bigint literals
  // prettier-ignore

  var _0n$5 = BigInt(0),
      _1n$6 = BigInt(1);
      BigInt(2);
      var _3n$1 = BigInt(3);
      BigInt(4);

  function weierstrassPoints(opts) {
    var CURVE = validatePointOpts(opts);
    var Fp = CURVE.Fp; // All curves has same field / group length as for now, but they can differ

    var Fn = Field$1(CURVE.n, CURVE.nBitLength);

    var toBytes = CURVE.toBytes || function (_c, point, _isCompressed) {
      var a = point.toAffine();
      return concatBytes$1(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
    };

    var fromBytes = CURVE.fromBytes || function (bytes) {
      // const head = bytes[0];
      var tail = bytes.subarray(1); // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');

      var x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
      var y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
      return {
        x: x,
        y: y
      };
    };
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */


    function weierstrassEquation(x) {
      var a = CURVE.a,
          b = CURVE.b;
      var x2 = Fp.sqr(x); // x * x

      var x3 = Fp.mul(x2, x); // x2 * x

      return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    } // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.


    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right'); // Valid group elements reside in range 1..n-1

    function isWithinCurveOrder(num) {
      return inRange$2(num, _1n$6, CURVE.n);
    } // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.


    function normPrivateKeyToScalar(key) {
      var lengths = CURVE.allowedPrivateKeyLengths,
          nByteLength = CURVE.nByteLength,
          wrapPrivateKey = CURVE.wrapPrivateKey,
          N = CURVE.n;

      if (lengths && typeof key !== 'bigint') {
        if (isBytes$2(key)) key = bytesToHex$1(key); // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes

        if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');
        key = key.padStart(nByteLength * 2, '0');
      }

      var num;

      try {
        num = typeof key === 'bigint' ? key : bytesToNumberBE$1(ensureBytes$1('private key', key, nByteLength));
      } catch (error) {
        throw new Error("private key must be ".concat(nByteLength, " bytes, hex or bigint, not ").concat(_typeof(key)));
      }

      if (wrapPrivateKey) num = mod$1(num, N); // disabled by default, enabled for BLS

      aInRange$1('private key', num, _1n$6, N); // num in range [1..N-1]

      return num;
    }

    function assertPrjPoint(other) {
      if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');
    } // Memoized toAffine / validity check. They are heavy. Points are immutable.
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)


    var toAffineMemo = memoized$1(function (p, iz) {
      var x = p.px,
          y = p.py,
          z = p.pz; // Fast-path for normalized points

      if (Fp.eql(z, Fp.ONE)) return {
        x: x,
        y: y
      };
      var is0 = p.is0(); // If invZ was 0, we return zero point. However we still want to execute
      // all operations, so we replace invZ with a random number, 1.

      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);
      var ax = Fp.mul(x, iz);
      var ay = Fp.mul(y, iz);
      var zz = Fp.mul(z, iz);
      if (is0) return {
        x: Fp.ZERO,
        y: Fp.ZERO
      };
      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');
      return {
        x: ax,
        y: ay
      };
    }); // NOTE: on exception this will crash 'cached' and no value will be set.
    // Otherwise true will be return

    var assertValidMemo = memoized$1(function (p) {
      if (p.is0()) {
        // (0, 1, 0) aka ZERO is invalid in most contexts.
        // In BLS, ZERO can be serialized, so we allow it.
        // (0, 0, 0) is wrong representation of ZERO and is always invalid.
        if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;
        throw new Error('bad point: ZERO');
      } // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`


      var _p$toAffine = p.toAffine(),
          x = _p$toAffine.x,
          y = _p$toAffine.y; // Check if x, y are valid field elements


      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');
      var left = Fp.sqr(y); // y²

      var right = weierstrassEquation(x); // x³ + ax + b

      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');
      if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');
      return true;
    });
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */

    var Point = /*#__PURE__*/function () {
      function Point(px, py, pz) {
        _classCallCheck(this, Point);

        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp.isValid(px)) throw new Error('x required');
        if (py == null || !Fp.isValid(py)) throw new Error('y required');
        if (pz == null || !Fp.isValid(pz)) throw new Error('z required');
        Object.freeze(this);
      } // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.


      _createClass(Point, [{
        key: "x",
        get: function get() {
          return this.toAffine().x;
        }
      }, {
        key: "y",
        get: function get() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */

      }, {
        key: "_setWindowSize",
        value: // "Private method", don't use it directly
        function _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        } // A point on curve is valid if it conforms to equation.

      }, {
        key: "assertValidity",
        value: function assertValidity() {
          assertValidMemo(this);
        }
      }, {
        key: "hasEvenY",
        value: function hasEvenY() {
          var _this$toAffine = this.toAffine(),
              y = _this$toAffine.y;

          if (Fp.isOdd) return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */

      }, {
        key: "equals",
        value: function equals(other) {
          assertPrjPoint(other);
          var X1 = this.px,
              Y1 = this.py,
              Z1 = this.pz;
          var X2 = other.px,
              Y2 = other.py,
              Z2 = other.pz;
          var U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          var U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */

      }, {
        key: "negate",
        value: function negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        } // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.

      }, {
        key: "double",
        value: function double() {
          var a = CURVE.a,
              b = CURVE.b;
          var b3 = Fp.mul(b, _3n$1);
          var X1 = this.px,
              Y1 = this.py,
              Z1 = this.pz;
          var X3 = Fp.ZERO,
              Y3 = Fp.ZERO,
              Z3 = Fp.ZERO; // prettier-ignore

          var t0 = Fp.mul(X1, X1); // step 1

          var t1 = Fp.mul(Y1, Y1);
          var t2 = Fp.mul(Z1, Z1);
          var t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3); // step 5

          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3); // step 10

          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3); // step 15

          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0); // step 20

          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1); // step 25

          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3); // step 30

          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        } // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.

      }, {
        key: "add",
        value: function add(other) {
          assertPrjPoint(other);
          var X1 = this.px,
              Y1 = this.py,
              Z1 = this.pz;
          var X2 = other.px,
              Y2 = other.py,
              Z2 = other.pz;
          var X3 = Fp.ZERO,
              Y3 = Fp.ZERO,
              Z3 = Fp.ZERO; // prettier-ignore

          var a = CURVE.a;
          var b3 = Fp.mul(CURVE.b, _3n$1);
          var t0 = Fp.mul(X1, X2); // step 1

          var t1 = Fp.mul(Y1, Y2);
          var t2 = Fp.mul(Z1, Z2);
          var t3 = Fp.add(X1, Y1);
          var t4 = Fp.add(X2, Y2); // step 5

          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          var t5 = Fp.add(X2, Z2); // step 10

          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2); // step 15

          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2); // step 20

          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0); // step 25

          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2); // step 30

          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4); // step 35

          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0); // step 40

          return new Point(X3, Y3, Z3);
        }
      }, {
        key: "subtract",
        value: function subtract(other) {
          return this.add(other.negate());
        }
      }, {
        key: "is0",
        value: function is0() {
          return this.equals(Point.ZERO);
        }
      }, {
        key: "wNAF",
        value: function wNAF(n) {
          return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */

      }, {
        key: "multiplyUnsafe",
        value: function multiplyUnsafe(sc) {
          aInRange$1('scalar', sc, _0n$5, CURVE.n);
          var I = Point.ZERO;
          if (sc === _0n$5) return I;
          if (sc === _1n$6) return this;
          var endo = CURVE.endo;
          if (!endo) return wnaf.unsafeLadder(this, sc); // Apply endomorphism

          var _endo$splitScalar = endo.splitScalar(sc),
              k1neg = _endo$splitScalar.k1neg,
              k1 = _endo$splitScalar.k1,
              k2neg = _endo$splitScalar.k2neg,
              k2 = _endo$splitScalar.k2;

          var k1p = I;
          var k2p = I;
          var d = this;

          while (k1 > _0n$5 || k2 > _0n$5) {
            if (k1 & _1n$6) k1p = k1p.add(d);
            if (k2 & _1n$6) k2p = k2p.add(d);
            d = d["double"]();
            k1 >>= _1n$6;
            k2 >>= _1n$6;
          }

          if (k1neg) k1p = k1p.negate();
          if (k2neg) k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */

      }, {
        key: "multiply",
        value: function multiply(scalar) {
          var endo = CURVE.endo,
              N = CURVE.n;
          aInRange$1('scalar', scalar, _1n$6, N);
          var point, fake; // Fake point is used to const-time mult

          if (endo) {
            var _endo$splitScalar3 = endo.splitScalar(scalar),
                k1neg = _endo$splitScalar3.k1neg,
                k1 = _endo$splitScalar3.k1,
                k2neg = _endo$splitScalar3.k2neg,
                k2 = _endo$splitScalar3.k2;

            var _this$wNAF2 = this.wNAF(k1),
                k1p = _this$wNAF2.p,
                f1p = _this$wNAF2.f;

            var _this$wNAF4 = this.wNAF(k2),
                k2p = _this$wNAF4.p,
                f2p = _this$wNAF4.f;

            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            var _this$wNAF6 = this.wNAF(scalar),
                p = _this$wNAF6.p,
                f = _this$wNAF6.f;

            point = p;
            fake = f;
          } // Normalize `z` for both points, but return only real one


          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */

      }, {
        key: "multiplyAndAddUnsafe",
        value: function multiplyAndAddUnsafe(Q, a, b) {
          var G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes

          var mul = function mul(P, a // Select faster multiply() method
          ) {
            return a === _0n$5 || a === _1n$6 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);
          };

          var sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? undefined : sum;
        } // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)

      }, {
        key: "toAffine",
        value: function toAffine(iz) {
          return toAffineMemo(this, iz);
        }
      }, {
        key: "isTorsionFree",
        value: function isTorsionFree() {
          var cofactor = CURVE.h,
              isTorsionFree = CURVE.isTorsionFree;
          if (cofactor === _1n$6) return true; // No subgroups, always torsion-free

          if (isTorsionFree) return isTorsionFree(Point, this);
          throw new Error('isTorsionFree() has not been declared for the elliptic curve');
        }
      }, {
        key: "clearCofactor",
        value: function clearCofactor() {
          var cofactor = CURVE.h,
              clearCofactor = CURVE.clearCofactor;
          if (cofactor === _1n$6) return this; // Fast-path

          if (clearCofactor) return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
      }, {
        key: "toRawBytes",
        value: function toRawBytes() {
          var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          abool$1('isCompressed', isCompressed);
          this.assertValidity();
          return toBytes(Point, this, isCompressed);
        }
      }, {
        key: "toHex",
        value: function toHex() {
          var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          abool$1('isCompressed', isCompressed);
          return bytesToHex$1(this.toRawBytes(isCompressed));
        }
      }], [{
        key: "fromAffine",
        value: function fromAffine(p) {
          var _ref = p || {},
              x = _ref.x,
              y = _ref.y;

          if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');
          if (p instanceof Point) throw new Error('projective point not allowed');

          var is0 = function is0(i) {
            return Fp.eql(i, Fp.ZERO);
          }; // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)


          if (is0(x) && is0(y)) return Point.ZERO;
          return new Point(x, y, Fp.ONE);
        }
      }, {
        key: "normalizeZ",
        value: function normalizeZ(points) {
          var toInv = Fp.invertBatch(points.map(function (p) {
            return p.pz;
          }));
          return points.map(function (p, i) {
            return p.toAffine(toInv[i]);
          }).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */

      }, {
        key: "fromHex",
        value: function fromHex(hex) {
          var P = Point.fromAffine(fromBytes(ensureBytes$1('pointHex', hex)));
          P.assertValidity();
          return P;
        } // Multiplies generator point by privateKey.

      }, {
        key: "fromPrivateKey",
        value: function fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        } // Multiscalar Multiplication

      }, {
        key: "msm",
        value: function msm(points, scalars) {
          return pippenger$1(Point, Fn, points, scalars);
        }
      }]);

      return Point;
    }();

    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    var _bits = CURVE.nBitLength;
    var wnaf = wNAF$1(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits); // Validate if generator point is on curve

    return {
      CURVE: CURVE,
      ProjectivePoint: Point,
      normPrivateKeyToScalar: normPrivateKeyToScalar,
      weierstrassEquation: weierstrassEquation,
      isWithinCurveOrder: isWithinCurveOrder
    };
  }

  function validateOpts$2(curve) {
    var opts = validateBasic$1(curve);
    validateObject$1(opts, {
      hash: 'hash',
      hmac: 'function',
      randomBytes: 'function'
    }, {
      bits2int: 'function',
      bits2int_modN: 'function',
      lowS: 'boolean'
    });
    return Object.freeze(_objectSpread2({
      lowS: true
    }, opts));
  }
  /**
   * Creates short weierstrass curve and ECDSA signature methods for it.
   * @example
   * import { Field } from '@noble/curves/abstract/modular';
   * // Before that, define BigInt-s: a, b, p, n, Gx, Gy
   * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })
   */


  function weierstrass(curveDef) {
    var CURVE = validateOpts$2(curveDef);
    var Fp = CURVE.Fp,
        CURVE_ORDER = CURVE.n;
    var compressedLen = Fp.BYTES + 1; // e.g. 33 for 32

    var uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32

    function modN(a) {
      return mod$1(a, CURVE_ORDER);
    }

    function invN(a) {
      return invert$1(a, CURVE_ORDER);
    }

    var _weierstrassPoints = weierstrassPoints(_objectSpread2(_objectSpread2({}, CURVE), {}, {
      toBytes: function toBytes(_c, point, isCompressed) {
        var a = point.toAffine();
        var x = Fp.toBytes(a.x);
        var cat = concatBytes$1;
        abool$1('isCompressed', isCompressed);

        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
        } else {
          return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
        }
      },
      fromBytes: function fromBytes(bytes) {
        var len = bytes.length;
        var head = bytes[0];
        var tail = bytes.subarray(1); // this.assertValidity() is done inside of fromHex

        if (len === compressedLen && (head === 0x02 || head === 0x03)) {
          var x = bytesToNumberBE$1(tail);
          if (!inRange$2(x, _1n$6, Fp.ORDER)) throw new Error('Point is not on curve');
          var y2 = weierstrassEquation(x); // y² = x³ + ax + b

          var y;

          try {
            y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
          } catch (sqrtError) {
            var suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';
            throw new Error('Point is not on curve' + suffix);
          }

          var isYOdd = (y & _1n$6) === _1n$6; // ECDSA

          var isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd) y = Fp.neg(y);
          return {
            x: x,
            y: y
          };
        } else if (len === uncompressedLen && head === 0x04) {
          var _x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));

          var _y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));

          return {
            x: _x,
            y: _y
          };
        } else {
          throw new Error("Point of length ".concat(len, " was invalid. Expected ").concat(compressedLen, " compressed bytes or ").concat(uncompressedLen, " uncompressed bytes"));
        }
      }
    })),
        Point = _weierstrassPoints.ProjectivePoint,
        normPrivateKeyToScalar = _weierstrassPoints.normPrivateKeyToScalar,
        weierstrassEquation = _weierstrassPoints.weierstrassEquation,
        isWithinCurveOrder = _weierstrassPoints.isWithinCurveOrder;

    var numToNByteStr = function numToNByteStr(num) {
      return bytesToHex$1(numberToBytesBE$1(num, CURVE.nByteLength));
    };

    function isBiggerThanHalfOrder(number) {
      var HALF = CURVE_ORDER >> _1n$6;
      return number > HALF;
    }

    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    } // slice bytes num


    var slcNum = function slcNum(b, from, to) {
      return bytesToNumberBE$1(b.slice(from, to));
    };
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */


    var Signature = /*#__PURE__*/function () {
      function Signature(r, s, recovery) {
        _classCallCheck(this, Signature);

        this.r = r;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      } // pair (bytes of r, bytes of s)


      _createClass(Signature, [{
        key: "assertValidity",
        value: function assertValidity() {
          aInRange$1('r', this.r, _1n$6, CURVE_ORDER); // r in [1..N]

          aInRange$1('s', this.s, _1n$6, CURVE_ORDER); // s in [1..N]
        }
      }, {
        key: "addRecoveryBit",
        value: function addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
      }, {
        key: "recoverPublicKey",
        value: function recoverPublicKey(msgHash) {
          var r = this.r,
              s = this.s,
              rec = this.recovery;
          var h = bits2int_modN(ensureBytes$1('msgHash', msgHash)); // Truncate hash

          if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');
          var radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');
          var prefix = (rec & 1) === 0 ? '02' : '03';
          var R = Point.fromHex(prefix + numToNByteStr(radj));
          var ir = invN(radj); // r^-1

          var u1 = modN(-h * ir); // -hr^-1

          var u2 = modN(s * ir); // sr^-1

          var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)

          if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked

          Q.assertValidity();
          return Q;
        } // Signatures should be low-s, to prevent malleability.

      }, {
        key: "hasHighS",
        value: function hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
      }, {
        key: "normalizeS",
        value: function normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        } // DER-encoded

      }, {
        key: "toDERRawBytes",
        value: function toDERRawBytes() {
          return hexToBytes$1(this.toDERHex());
        }
      }, {
        key: "toDERHex",
        value: function toDERHex() {
          return DER.hexFromSig({
            r: this.r,
            s: this.s
          });
        } // padded bytes of r, then padded bytes of s

      }, {
        key: "toCompactRawBytes",
        value: function toCompactRawBytes() {
          return hexToBytes$1(this.toCompactHex());
        }
      }, {
        key: "toCompactHex",
        value: function toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }], [{
        key: "fromCompact",
        value: function fromCompact(hex) {
          var l = CURVE.nByteLength;
          hex = ensureBytes$1('compactSignature', hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        } // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script

      }, {
        key: "fromDER",
        value: function fromDER(hex) {
          var _DER$toSig = DER.toSig(ensureBytes$1('DER', hex)),
              r = _DER$toSig.r,
              s = _DER$toSig.s;

          return new Signature(r, s);
        }
      }]);

      return Signature;
    }();

    var utils = {
      isValidPrivateKey: function isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar: normPrivateKeyToScalar,

      /**
       * Produces cryptographically secure private key from random of size
       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
       */
      randomPrivateKey: function randomPrivateKey() {
        var length = getMinHashLength$1(CURVE.n);
        return mapHashToField$1(CURVE.randomBytes(length), CURVE.n);
      },

      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute: function precompute() {
        var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
        var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;

        point._setWindowSize(windowSize);

        point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here

        return point;
      }
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */

    function getPublicKey(privateKey) {
      var isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */


    function isProbPub(item) {
      var arr = isBytes$2(item);
      var str = typeof item === 'string';
      var len = (arr || str) && item.length;
      if (arr) return len === compressedLen || len === uncompressedLen;
      if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point) return true;
      return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */


    function getSharedSecret(privateA, publicB) {
      var isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (isProbPub(privateA)) throw new Error('first arg must be private key');
      if (!isProbPub(publicB)) throw new Error('second arg must be public key');
      var b = Point.fromHex(publicB); // check for being on-curve

      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    } // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors


    var bits2int = CURVE.bits2int || function (bytes) {
      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
      // for some cases, since bytes.length * 8 is not actual bitLength.
      var num = bytesToNumberBE$1(bytes); // check for == u8 done here

      var delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits

      return delta > 0 ? num >> BigInt(delta) : num;
    };

    var bits2int_modN = CURVE.bits2int_modN || function (bytes) {
      return modN(bits2int(bytes)); // can't use bytesToNumberBE here
    }; // NOTE: pads output with zero as per spec


    var ORDER_MASK = bitMask$1(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */

    function int2octets(num) {
      aInRange$1("num < 2^".concat(CURVE.nBitLength), num, _0n$5, ORDER_MASK); // works with order, can have different size than numToField!

      return numberToBytesBE$1(num, CURVE.nByteLength);
    } // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
    // Also it can be bigger for P224 + SHA256


    function prepSig(msgHash, privateKey) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;
      if (['recovered', 'canonical'].some(function (k) {
        return k in opts;
      })) throw new Error('sign() legacy options not supported');
      var hash = CURVE.hash,
          randomBytes = CURVE.randomBytes;
      var lowS = opts.lowS,
          prehash = opts.prehash,
          ent = opts.extraEntropy; // generates low-s sigs by default

      if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash

      msgHash = ensureBytes$1('msgHash', msgHash);
      validateSigVerOpts(opts);
      if (prehash) msgHash = ensureBytes$1('prehashed msgHash', hash(msgHash)); // We can't later call bits2octets, since nested bits2int is broken for curves
      // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
      // const bits2octets = (bits) => int2octets(bits2int_modN(bits))

      var h1int = bits2int_modN(msgHash);
      var d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint

      var seedArgs = [int2octets(d), int2octets(h1int)]; // extraEntropy. RFC6979 3.6: additional k' (optional).

      if (ent != null && ent !== false) {
        // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
        var e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is

        seedArgs.push(ensureBytes$1('extraEntropy', e)); // check for being bytes
      }

      var seed = concatBytes$1.apply(ut$1, seedArgs); // Step D of RFC6979 3.2

      var m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
      // Converts signature params into point w r/s, checks result for validity.

      function k2sig(kBytes) {
        // RFC 6979 Section 3.2, step 3: k = bits2int(T)
        var k = bits2int(kBytes); // Cannot use fields methods, since it is group element

        if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N

        var ik = invN(k); // k^-1 mod n

        var q = Point.BASE.multiply(k).toAffine(); // q = Gk

        var r = modN(q.x); // r = q.x mod n

        if (r === _0n$5) return; // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT

        var s = modN(ik * modN(m + r * d)); // Not using blinding here

        if (s === _0n$5) return;
        var recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$6); // recovery bit (2 or 3, when q.x > n)

        var normS = s;

        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s); // if lowS was passed, ensure s is always

          recovery ^= 1; // // in the bottom half of N
        }

        return new Signature(r, normS, recovery); // use normS, not s
      }

      return {
        seed: seed,
        k2sig: k2sig
      };
    }

    var defaultSigOpts = {
      lowS: CURVE.lowS,
      prehash: false
    };
    var defaultVerOpts = {
      lowS: CURVE.lowS,
      prehash: false
    };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */

    function sign(msgHash, privKey) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;

      var _prepSig = prepSig(msgHash, privKey, opts),
          seed = _prepSig.seed,
          k2sig = _prepSig.k2sig; // Steps A, D of RFC6979 3.2.


      var C = CURVE;
      var drbg = createHmacDrbg$1(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    } // Enable precomputes. Slows down first publicKey computation by 20ms.


    Point.BASE._setWindowSize(8); // utils.precompute(8, ProjectivePoint.BASE)

    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */


    function verify(signature, msgHash, publicKey) {
      var _Point$BASE$multiplyA;

      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;
      var sg = signature;
      msgHash = ensureBytes$1('msgHash', msgHash);
      publicKey = ensureBytes$1('publicKey', publicKey);
      if ('strict' in opts) throw new Error('options.strict was renamed to lowS');
      validateSigVerOpts(opts);
      var lowS = opts.lowS,
          prehash = opts.prehash;
      var _sig = undefined;
      var P;

      try {
        if (typeof sg === 'string' || isBytes$2(sg)) {
          // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
          // Since DER can also be 2*nByteLength bytes, we check for it first.
          try {
            _sig = Signature.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err)) throw derError;
            _sig = Signature.fromCompact(sg);
          }
        } else if (_typeof(sg) === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
          var _r = sg.r,
              _s = sg.s;
          _sig = new Signature(_r, _s);
        } else {
          throw new Error('PARSE');
        }

        P = Point.fromHex(publicKey);
      } catch (error) {
        if (error.message === 'PARSE') throw new Error("signature must be Signature instance, Uint8Array or hex string");
        return false;
      }

      if (lowS && _sig.hasHighS()) return false;
      if (prehash) msgHash = CURVE.hash(msgHash);
      var _sig2 = _sig,
          r = _sig2.r,
          s = _sig2.s;
      var h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element

      var is = invN(s); // s^-1

      var u1 = modN(h * is); // u1 = hs^-1 mod n

      var u2 = modN(r * is); // u2 = rs^-1 mod n

      var R = (_Point$BASE$multiplyA = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) === null || _Point$BASE$multiplyA === void 0 ? void 0 : _Point$BASE$multiplyA.toAffine(); // R = u1⋅G + u2⋅P

      if (!R) return false;
      var v = modN(R.x);
      return v === r;
    }

    return {
      CURVE: CURVE,
      getPublicKey: getPublicKey,
      getSharedSecret: getSharedSecret,
      sign: sign,
      verify: verify,
      ProjectivePoint: Point,
      Signature: Signature,
      utils: utils
    };
  }

  function getHash(hash) {
    return {
      hash: hash,
      hmac: function hmac$1(key) {
        for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          msgs[_key - 1] = arguments[_key];
        }

        return hmac(hash, key, concatBytes$2.apply(void 0, msgs));
      },
      randomBytes: randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    var create = function create(hash) {
      return weierstrass(_objectSpread2(_objectSpread2({}, curveDef), getHash(hash)));
    };

    return Object.freeze(_objectSpread2(_objectSpread2({}, create(defHash)), {}, {
      create: create
    }));
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  var secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
  var secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');

  var _1n$5 = BigInt(1);

  var _2n$3 = BigInt(2);

  var divNearest = function divNearest(a, b) {
    return (a + b / _2n$3) / b;
  };
  /**
   * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
   * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
   */


  function sqrtMod(y) {
    var P = secp256k1P; // prettier-ignore

    var _3n = BigInt(3),
        _6n = BigInt(6),
        _11n = BigInt(11),
        _22n = BigInt(22); // prettier-ignore


    var _23n = BigInt(23),
        _44n = BigInt(44),
        _88n = BigInt(88);

    var b2 = y * y * y % P; // x^3, 11

    var b3 = b2 * b2 * y % P; // x^7

    var b6 = pow2$1(b3, _3n, P) * b3 % P;
    var b9 = pow2$1(b6, _3n, P) * b3 % P;
    var b11 = pow2$1(b9, _2n$3, P) * b2 % P;
    var b22 = pow2$1(b11, _11n, P) * b11 % P;
    var b44 = pow2$1(b22, _22n, P) * b22 % P;
    var b88 = pow2$1(b44, _44n, P) * b44 % P;
    var b176 = pow2$1(b88, _88n, P) * b88 % P;
    var b220 = pow2$1(b176, _44n, P) * b44 % P;
    var b223 = pow2$1(b220, _3n, P) * b3 % P;
    var t1 = pow2$1(b223, _23n, P) * b22 % P;
    var t2 = pow2$1(t1, _6n, P) * b2 % P;
    var root = pow2$1(t2, _2n$3, P);
    if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');
    return root;
  }

  var Fp = Field$1(secp256k1P, undefined, undefined, {
    sqrt: sqrtMod
  });
  /**
   * secp256k1 short weierstrass curve and ECDSA signatures over it.
   */

  var secp256k1 = createCurve({
    a: BigInt(0),
    // equation params: a, b
    b: BigInt(7),
    // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
    Fp: Fp,
    // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
    n: secp256k1N,
    // Curve order, total count of valid points in the field
    // Base point (x, y) aka generator point
    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
    h: BigInt(1),
    // Cofactor
    lowS: true,
    // Allow only low-S signatures by default in sign() and verify()

    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */
    endo: {
      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
      splitScalar: function splitScalar(k) {
        var n = secp256k1N;
        var a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
        var b1 = -_1n$5 * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
        var a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
        var b2 = a1;
        var POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)

        var c1 = divNearest(b2 * k, n);
        var c2 = divNearest(-b1 * k, n);
        var k1 = mod$1(k - c1 * a1 - c2 * a2, n);
        var k2 = mod$1(-c1 * b1 - c2 * b2, n);
        var k1neg = k1 > POW_2_128;
        var k2neg = k2 > POW_2_128;
        if (k1neg) k1 = n - k1;
        if (k2neg) k2 = n - k2;

        if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error('splitScalar: Endomorphism failed, k=' + k);
        }

        return {
          k1neg: k1neg,
          k1: k1,
          k2neg: k2neg,
          k2: k2
        };
      }
    }
  }, sha256); // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki

  BigInt(0);

  secp256k1.ProjectivePoint;

  var _excluded = ["commitment"],
      _excluded2 = ["encoding"],
      _excluded3 = ["commitment"],
      _excluded4 = ["commitment"];
  /**
   * A 64 byte secret key, the first 32 bytes of which is the
   * private scalar and the last 32 bytes is the public key.
   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
   */

  /**
   * Ed25519 Keypair
   */

  var generatePrivateKey = ed25519$1.utils.randomPrivateKey;

  var generateKeypair = function generateKeypair() {
    var privateScalar = ed25519$1.utils.randomPrivateKey();
    var publicKey = getPublicKey(privateScalar);
    var secretKey = new Uint8Array(64);
    secretKey.set(privateScalar);
    secretKey.set(publicKey, 32);
    return {
      publicKey: publicKey,
      secretKey: secretKey
    };
  };

  var getPublicKey = ed25519$1.getPublicKey;

  function _isOnCurve(publicKey) {
    try {
      ed25519$1.ExtendedPoint.fromHex(publicKey);
      return true;
    } catch (_unused) {
      return false;
    }
  }

  var _sign = function sign(message, secretKey) {
    return ed25519$1.sign(message, secretKey.slice(0, 32));
  };

  var verify = ed25519$1.verify;

  var toBuffer = function toBuffer(arr) {
    if (Buffer$1.isBuffer(arr)) {
      return arr;
    } else if (arr instanceof Uint8Array) {
      return Buffer$1.from(arr.buffer, arr.byteOffset, arr.byteLength);
    } else {
      return Buffer$1.from(arr);
    }
  }; // Class wrapping a plain object


  var Struct = /*#__PURE__*/function () {
    function Struct(properties) {
      _classCallCheck(this, Struct);

      Object.assign(this, properties);
    }

    _createClass(Struct, [{
      key: "encode",
      value: function encode() {
        return Buffer$1.from(serialize_1(SOLANA_SCHEMA, this));
      }
    }], [{
      key: "decode",
      value: function decode(data) {
        return deserialize_1(SOLANA_SCHEMA, this, data);
      }
    }, {
      key: "decodeUnchecked",
      value: function decodeUnchecked(data) {
        return deserializeUnchecked_1(SOLANA_SCHEMA, this, data);
      }
    }]);

    return Struct;
  }(); // Class representing a Rust-compatible enum, since enums are only strings or
  // numbers in pure JS


  var Enum = /*#__PURE__*/function (_Struct) {
    _inherits(Enum, _Struct);

    var _super = _createSuper(Enum);

    function Enum(properties) {
      var _this;

      _classCallCheck(this, Enum);

      _this = _super.call(this, properties);
      _this["enum"] = '';

      if (Object.keys(properties).length !== 1) {
        throw new Error('Enum can only take single value');
      }

      Object.keys(properties).map(function (key) {
        _this["enum"] = key;
      });
      return _this;
    }

    return _createClass(Enum);
  }(Struct);

  var SOLANA_SCHEMA = new Map();

  var _PublicKey;
  /**
   * Maximum length of derived pubkey seed
   */


  var MAX_SEED_LENGTH = 32;
  /**
   * Size of public key in bytes
   */

  var PUBLIC_KEY_LENGTH = 32;
  /**
   * Value to be converted into public key
   */

  /**
   * JSON object representation of PublicKey class
   */

  function isPublicKeyData(value) {
    return value._bn !== undefined;
  } // local counter used by PublicKey.unique()


  var uniquePublicKeyCounter = 1;
  /**
   * A public key
   */

  var PublicKey = /*#__PURE__*/function (_Struct2, _Symbol$toStringTag) {
    _inherits(PublicKey, _Struct2);

    var _super2 = _createSuper(PublicKey);

    /**
     * Create a new PublicKey object
     * @param value ed25519 public key as buffer or base-58 encoded string
     */
    function PublicKey(value) {
      var _this2;

      _classCallCheck(this, PublicKey);

      _this2 = _super2.call(this, {});
      /** @internal */

      _this2._bn = void 0;

      if (isPublicKeyData(value)) {
        _this2._bn = value._bn;
      } else {
        if (typeof value === 'string') {
          // assume base 58 encoding by default
          var decoded = bs58$5.decode(value);

          if (decoded.length != PUBLIC_KEY_LENGTH) {
            throw new Error("Invalid public key input");
          }

          _this2._bn = new BN$1(decoded);
        } else {
          _this2._bn = new BN$1(value);
        }

        if (_this2._bn.byteLength() > PUBLIC_KEY_LENGTH) {
          throw new Error("Invalid public key input");
        }
      }

      return _this2;
    }
    /**
     * Returns a unique PublicKey for tests and benchmarks using a counter
     */


    _createClass(PublicKey, [{
      key: "equals",
      value:
      /**
       * Default public key value. The base58-encoded string representation is all ones (as seen below)
       * The underlying BN number is 32 bytes that are all zeros
       */

      /**
       * Checks if two publicKeys are equal
       */
      function equals(publicKey) {
        return this._bn.eq(publicKey._bn);
      }
      /**
       * Return the base-58 representation of the public key
       */

    }, {
      key: "toBase58",
      value: function toBase58() {
        return bs58$5.encode(this.toBytes());
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toBase58();
      }
      /**
       * Return the byte array representation of the public key in big endian
       */

    }, {
      key: "toBytes",
      value: function toBytes() {
        var buf = this.toBuffer();
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      /**
       * Return the Buffer representation of the public key in big endian
       */

    }, {
      key: "toBuffer",
      value: function toBuffer() {
        var b = this._bn.toArrayLike(Buffer$1);

        if (b.length === PUBLIC_KEY_LENGTH) {
          return b;
        }

        var zeroPad = Buffer$1.alloc(32);
        b.copy(zeroPad, 32 - b.length);
        return zeroPad;
      }
    }, {
      key: _Symbol$toStringTag,
      get: function get() {
        return "PublicKey(".concat(this.toString(), ")");
      }
      /**
       * Return the base-58 representation of the public key
       */

    }, {
      key: "toString",
      value: function toString() {
        return this.toBase58();
      }
      /**
       * Derive a public key from another key, a seed, and a program ID.
       * The program ID will also serve as the owner of the public key, giving
       * it permission to write data to the account.
       */

      /* eslint-disable require-await */

    }], [{
      key: "unique",
      value: function unique() {
        var key = new PublicKey(uniquePublicKeyCounter);
        uniquePublicKeyCounter += 1;
        return new PublicKey(key.toBuffer());
      }
    }, {
      key: "createWithSeed",
      value: function () {
        var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromPublicKey, seed, programId) {
          var buffer, publicKeyBytes;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                buffer = Buffer$1.concat([fromPublicKey.toBuffer(), Buffer$1.from(seed), programId.toBuffer()]);
                publicKeyBytes = sha256(buffer);
                return _context.abrupt("return", new PublicKey(publicKeyBytes));

              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));

        function createWithSeed(_x, _x2, _x3) {
          return _createWithSeed.apply(this, arguments);
        }

        return createWithSeed;
      }()
      /**
       * Derive a program address from seeds and a program ID.
       */

      /* eslint-disable require-await */

    }, {
      key: "createProgramAddressSync",
      value: function createProgramAddressSync(seeds, programId) {
        var buffer = Buffer$1.alloc(0);
        seeds.forEach(function (seed) {
          if (seed.length > MAX_SEED_LENGTH) {
            throw new TypeError("Max seed length exceeded");
          }

          buffer = Buffer$1.concat([buffer, toBuffer(seed)]);
        });
        buffer = Buffer$1.concat([buffer, programId.toBuffer(), Buffer$1.from('ProgramDerivedAddress')]);
        var publicKeyBytes = sha256(buffer);

        if (_isOnCurve(publicKeyBytes)) {
          throw new Error("Invalid seeds, address must fall off the curve");
        }

        return new PublicKey(publicKeyBytes);
      }
      /**
       * Async version of createProgramAddressSync
       * For backwards compatibility
       *
       * @deprecated Use {@link createProgramAddressSync} instead
       */

      /* eslint-disable require-await */

    }, {
      key: "createProgramAddress",
      value: function () {
        var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seeds, programId) {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.createProgramAddressSync(seeds, programId));

              case 1:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));

        function createProgramAddress(_x4, _x5) {
          return _createProgramAddress.apply(this, arguments);
        }

        return createProgramAddress;
      }()
      /**
       * Find a valid program address
       *
       * Valid program addresses must fall off the ed25519 curve.  This function
       * iterates a nonce until it finds one that when combined with the seeds
       * results in a valid program address.
       */

    }, {
      key: "findProgramAddressSync",
      value: function findProgramAddressSync(seeds, programId) {
        var nonce = 255;
        var address;

        while (nonce != 0) {
          try {
            var seedsWithNonce = seeds.concat(Buffer$1.from([nonce]));
            address = this.createProgramAddressSync(seedsWithNonce, programId);
          } catch (err) {
            if (err instanceof TypeError) {
              throw err;
            }

            nonce--;
            continue;
          }

          return [address, nonce];
        }

        throw new Error("Unable to find a viable program address nonce");
      }
      /**
       * Async version of findProgramAddressSync
       * For backwards compatibility
       *
       * @deprecated Use {@link findProgramAddressSync} instead
       */

    }, {
      key: "findProgramAddress",
      value: function () {
        var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(seeds, programId) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.findProgramAddressSync(seeds, programId));

              case 1:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));

        function findProgramAddress(_x6, _x7) {
          return _findProgramAddress.apply(this, arguments);
        }

        return findProgramAddress;
      }()
      /**
       * Check that a pubkey is on the ed25519 curve.
       */

    }, {
      key: "isOnCurve",
      value: function isOnCurve(pubkeyData) {
        var pubkey = new PublicKey(pubkeyData);
        return _isOnCurve(pubkey.toBytes());
      }
    }]);

    return PublicKey;
  }(Struct, Symbol.toStringTag);

  _PublicKey = PublicKey;
  PublicKey["default"] = new _PublicKey('11111111111111111111111111111111');
  SOLANA_SCHEMA.set(PublicKey, {
    kind: 'struct',
    fields: [['_bn', 'u256']]
  });
  /**
   * An account key pair (public and secret keys).
   *
   * @deprecated since v1.10.0, please use {@link Keypair} instead.
   */

  var Account = /*#__PURE__*/function () {
    /**
     * Create a new Account object
     *
     * If the secretKey parameter is not provided a new key pair is randomly
     * created for the account
     *
     * @param secretKey Secret key for the account
     */
    function Account(secretKey) {
      _classCallCheck(this, Account);

      /** @internal */
      this._publicKey = void 0;
      /** @internal */

      this._secretKey = void 0;

      if (secretKey) {
        var secretKeyBuffer = toBuffer(secretKey);

        if (secretKey.length !== 64) {
          throw new Error('bad secret key size');
        }

        this._publicKey = secretKeyBuffer.slice(32, 64);
        this._secretKey = secretKeyBuffer.slice(0, 32);
      } else {
        this._secretKey = toBuffer(generatePrivateKey());
        this._publicKey = toBuffer(getPublicKey(this._secretKey));
      }
    }
    /**
     * The public key for this account
     */


    _createClass(Account, [{
      key: "publicKey",
      get: function get() {
        return new PublicKey(this._publicKey);
      }
      /**
       * The **unencrypted** secret key for this account. The first 32 bytes
       * is the private scalar and the last 32 bytes is the public key.
       * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
       */

    }, {
      key: "secretKey",
      get: function get() {
        return Buffer$1.concat([this._secretKey, this._publicKey], 64);
      }
    }]);

    return Account;
  }();

  var BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');
  /**
   * Maximum over-the-wire size of a Transaction
   *
   * 1280 is IPv6 minimum MTU
   * 40 bytes is the size of the IPv6 header
   * 8 bytes is the size of the fragment header
   */

  var PACKET_DATA_SIZE = 1280 - 40 - 8;
  var VERSION_PREFIX_MASK = 0x7f;
  var SIGNATURE_LENGTH_IN_BYTES = 64;

  var TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error) {
    _inherits(TransactionExpiredBlockheightExceededError, _Error);

    var _super3 = _createSuper(TransactionExpiredBlockheightExceededError);

    function TransactionExpiredBlockheightExceededError(signature) {
      var _this3;

      _classCallCheck(this, TransactionExpiredBlockheightExceededError);

      _this3 = _super3.call(this, "Signature ".concat(signature, " has expired: block height exceeded."));
      _this3.signature = void 0;
      _this3.signature = signature;
      return _this3;
    }

    return _createClass(TransactionExpiredBlockheightExceededError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {
    value: 'TransactionExpiredBlockheightExceededError'
  });

  var TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error2) {
    _inherits(TransactionExpiredTimeoutError, _Error2);

    var _super4 = _createSuper(TransactionExpiredTimeoutError);

    function TransactionExpiredTimeoutError(signature, timeoutSeconds) {
      var _this4;

      _classCallCheck(this, TransactionExpiredTimeoutError);

      _this4 = _super4.call(this, "Transaction was not confirmed in ".concat(timeoutSeconds.toFixed(2), " seconds. It is ") + 'unknown if it succeeded or failed. Check signature ' + "".concat(signature, " using the Solana Explorer or CLI tools."));
      _this4.signature = void 0;
      _this4.signature = signature;
      return _this4;
    }

    return _createClass(TransactionExpiredTimeoutError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  Object.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {
    value: 'TransactionExpiredTimeoutError'
  });

  var TransactionExpiredNonceInvalidError = /*#__PURE__*/function (_Error3) {
    _inherits(TransactionExpiredNonceInvalidError, _Error3);

    var _super5 = _createSuper(TransactionExpiredNonceInvalidError);

    function TransactionExpiredNonceInvalidError(signature) {
      var _this5;

      _classCallCheck(this, TransactionExpiredNonceInvalidError);

      _this5 = _super5.call(this, "Signature ".concat(signature, " has expired: the nonce is no longer valid."));
      _this5.signature = void 0;
      _this5.signature = signature;
      return _this5;
    }

    return _createClass(TransactionExpiredNonceInvalidError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  Object.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {
    value: 'TransactionExpiredNonceInvalidError'
  });

  var MessageAccountKeys = /*#__PURE__*/function () {
    function MessageAccountKeys(staticAccountKeys, accountKeysFromLookups) {
      _classCallCheck(this, MessageAccountKeys);

      this.staticAccountKeys = void 0;
      this.accountKeysFromLookups = void 0;
      this.staticAccountKeys = staticAccountKeys;
      this.accountKeysFromLookups = accountKeysFromLookups;
    }

    _createClass(MessageAccountKeys, [{
      key: "keySegments",
      value: function keySegments() {
        var keySegments = [this.staticAccountKeys];

        if (this.accountKeysFromLookups) {
          keySegments.push(this.accountKeysFromLookups.writable);
          keySegments.push(this.accountKeysFromLookups.readonly);
        }

        return keySegments;
      }
    }, {
      key: "get",
      value: function get(index) {
        var _iterator = _createForOfIteratorHelper(this.keySegments()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var keySegment = _step.value;

            if (index < keySegment.length) {
              return keySegment[index];
            } else {
              index -= keySegment.length;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return;
      }
    }, {
      key: "length",
      get: function get() {
        return this.keySegments().flat().length;
      }
    }, {
      key: "compileInstructions",
      value: function compileInstructions(instructions) {
        // Bail early if any account indexes would overflow a u8
        var U8_MAX = 255;

        if (this.length > U8_MAX + 1) {
          throw new Error('Account index overflow encountered during compilation');
        }

        var keyIndexMap = new Map();
        this.keySegments().flat().forEach(function (key, index) {
          keyIndexMap.set(key.toBase58(), index);
        });

        var findKeyIndex = function findKeyIndex(key) {
          var keyIndex = keyIndexMap.get(key.toBase58());
          if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');
          return keyIndex;
        };

        return instructions.map(function (instruction) {
          return {
            programIdIndex: findKeyIndex(instruction.programId),
            accountKeyIndexes: instruction.keys.map(function (meta) {
              return findKeyIndex(meta.pubkey);
            }),
            data: instruction.data
          };
        });
      }
    }]);

    return MessageAccountKeys;
  }();
  /**
   * Layout for a public key
   */


  var publicKey = function publicKey() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';
    return blob$1(32, property);
  };
  /**
   * Layout for a signature
   */


  var signature = function signature() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';
    return blob$1(64, property);
  };
  /**
   * Layout for a Rust String type
   */


  var rustString = function rustString() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';
    var rsl = struct([u32('length'), u32('lengthPadding'), blob$1(offset$1(u32(), -8), 'chars')], property);

    var _decode = rsl.decode.bind(rsl);

    var _encode = rsl.encode.bind(rsl);

    var rslShim = rsl;

    rslShim.decode = function (b, offset) {
      var data = _decode(b, offset);

      return data['chars'].toString();
    };

    rslShim.encode = function (str, b, offset) {
      var data = {
        chars: Buffer$1.from(str, 'utf8')
      };
      return _encode(data, b, offset);
    };

    rslShim.alloc = function (str) {
      return u32().span + u32().span + Buffer$1.from(str, 'utf8').length;
    };

    return rslShim;
  };
  /**
   * Layout for an Authorized object
   */


  var authorized = function authorized() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';
    return struct([publicKey('staker'), publicKey('withdrawer')], property);
  };
  /**
   * Layout for a Lockup object
   */


  var lockup = function lockup() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';
    return struct([ns64('unixTimestamp'), ns64('epoch'), publicKey('custodian')], property);
  };
  /**
   *  Layout for a VoteInit object
   */


  var voteInit = function voteInit() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';
    return struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), u8('commission')], property);
  };
  /**
   *  Layout for a VoteAuthorizeWithSeedArgs object
   */


  var voteAuthorizeWithSeedArgs = function voteAuthorizeWithSeedArgs() {
    var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';
    return struct([u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);
  };

  function getAlloc(type, fields) {
    var getItemAlloc = function getItemAlloc(item) {
      if (item.span >= 0) {
        return item.span;
      } else if (typeof item.alloc === 'function') {
        return item.alloc(fields[item.property]);
      } else if ('count' in item && 'elementLayout' in item) {
        var field = fields[item.property];

        if (Array.isArray(field)) {
          return field.length * getItemAlloc(item.elementLayout);
        }
      } else if ('fields' in item) {
        // This is a `Structure` whose size needs to be recursively measured.
        return getAlloc({
          layout: item
        }, fields[item.property]);
      } // Couldn't determine allocated size of layout


      return 0;
    };

    var alloc = 0;
    type.layout.fields.forEach(function (item) {
      alloc += getItemAlloc(item);
    });
    return alloc;
  }

  function decodeLength(bytes) {
    var len = 0;
    var size = 0;

    for (;;) {
      var elem = bytes.shift();
      len |= (elem & 0x7f) << size * 7;
      size += 1;

      if ((elem & 0x80) === 0) {
        break;
      }
    }

    return len;
  }

  function encodeLength(bytes, len) {
    var rem_len = len;

    for (;;) {
      var elem = rem_len & 0x7f;
      rem_len >>= 7;

      if (rem_len == 0) {
        bytes.push(elem);
        break;
      } else {
        elem |= 0x80;
        bytes.push(elem);
      }
    }
  }

  function assert$1(condition, message) {
    if (!condition) {
      throw new Error(message || 'Assertion failed');
    }
  }

  var CompiledKeys = /*#__PURE__*/function () {
    function CompiledKeys(payer, keyMetaMap) {
      _classCallCheck(this, CompiledKeys);

      this.payer = void 0;
      this.keyMetaMap = void 0;
      this.payer = payer;
      this.keyMetaMap = keyMetaMap;
    }

    _createClass(CompiledKeys, [{
      key: "getMessageComponents",
      value: function getMessageComponents() {
        var mapEntries = _toConsumableArray(this.keyMetaMap.entries());

        assert$1(mapEntries.length <= 256, 'Max static account keys length exceeded');
        var writableSigners = mapEntries.filter(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              meta = _ref2[1];

          return meta.isSigner && meta.isWritable;
        });
        var readonlySigners = mapEntries.filter(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              meta = _ref4[1];

          return meta.isSigner && !meta.isWritable;
        });
        var writableNonSigners = mapEntries.filter(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
              meta = _ref6[1];

          return !meta.isSigner && meta.isWritable;
        });
        var readonlyNonSigners = mapEntries.filter(function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
              meta = _ref8[1];

          return !meta.isSigner && !meta.isWritable;
        });
        var header = {
          numRequiredSignatures: writableSigners.length + readonlySigners.length,
          numReadonlySignedAccounts: readonlySigners.length,
          numReadonlyUnsignedAccounts: readonlyNonSigners.length
        }; // sanity checks

        {
          assert$1(writableSigners.length > 0, 'Expected at least one writable signer key');

          var _writableSigners$2 = _slicedToArray(writableSigners[0], 1),
              payerAddress = _writableSigners$2[0];

          assert$1(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');
        }
        var staticAccountKeys = [].concat(_toConsumableArray(writableSigners.map(function (_ref9) {
          var _ref10 = _slicedToArray(_ref9, 1),
              address = _ref10[0];

          return new PublicKey(address);
        })), _toConsumableArray(readonlySigners.map(function (_ref11) {
          var _ref12 = _slicedToArray(_ref11, 1),
              address = _ref12[0];

          return new PublicKey(address);
        })), _toConsumableArray(writableNonSigners.map(function (_ref13) {
          var _ref14 = _slicedToArray(_ref13, 1),
              address = _ref14[0];

          return new PublicKey(address);
        })), _toConsumableArray(readonlyNonSigners.map(function (_ref15) {
          var _ref16 = _slicedToArray(_ref15, 1),
              address = _ref16[0];

          return new PublicKey(address);
        })));
        return [header, staticAccountKeys];
      }
    }, {
      key: "extractTableLookup",
      value: function extractTableLookup(lookupTable) {
        var _this$drainKeysFoundI = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {
          return !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable;
        }),
            _this$drainKeysFoundI2 = _slicedToArray(_this$drainKeysFoundI, 2),
            writableIndexes = _this$drainKeysFoundI2[0],
            drainedWritableKeys = _this$drainKeysFoundI2[1];

        var _this$drainKeysFoundI3 = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {
          return !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable;
        }),
            _this$drainKeysFoundI4 = _slicedToArray(_this$drainKeysFoundI3, 2),
            readonlyIndexes = _this$drainKeysFoundI4[0],
            drainedReadonlyKeys = _this$drainKeysFoundI4[1]; // Don't extract lookup if no keys were found


        if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {
          return;
        }

        return [{
          accountKey: lookupTable.key,
          writableIndexes: writableIndexes,
          readonlyIndexes: readonlyIndexes
        }, {
          writable: drainedWritableKeys,
          readonly: drainedReadonlyKeys
        }];
      }
      /** @internal */

    }, {
      key: "drainKeysFoundInLookupTable",
      value: function drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {
        var _this6 = this;

        var lookupTableIndexes = new Array();
        var drainedKeys = new Array();

        var _iterator2 = _createForOfIteratorHelper(this.keyMetaMap.entries()),
            _step2;

        try {
          var _loop = function _loop() {
            var _step2$value = _slicedToArray(_step2.value, 2),
                address = _step2$value[0],
                keyMeta = _step2$value[1];

            if (keyMetaFilter(keyMeta)) {
              var key = new PublicKey(address);
              var lookupTableIndex = lookupTableEntries.findIndex(function (entry) {
                return entry.equals(key);
              });

              if (lookupTableIndex >= 0) {
                assert$1(lookupTableIndex < 256, 'Max lookup table index exceeded');
                lookupTableIndexes.push(lookupTableIndex);
                drainedKeys.push(key);

                _this6.keyMetaMap["delete"](address);
              }
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return [lookupTableIndexes, drainedKeys];
      }
    }], [{
      key: "compile",
      value: function compile(instructions, payer) {
        var keyMetaMap = new Map();

        var getOrInsertDefault = function getOrInsertDefault(pubkey) {
          var address = pubkey.toBase58();
          var keyMeta = keyMetaMap.get(address);

          if (keyMeta === undefined) {
            keyMeta = {
              isSigner: false,
              isWritable: false,
              isInvoked: false
            };
            keyMetaMap.set(address, keyMeta);
          }

          return keyMeta;
        };

        var payerKeyMeta = getOrInsertDefault(payer);
        payerKeyMeta.isSigner = true;
        payerKeyMeta.isWritable = true;

        var _iterator3 = _createForOfIteratorHelper(instructions),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var ix = _step3.value;
            getOrInsertDefault(ix.programId).isInvoked = true;

            var _iterator4 = _createForOfIteratorHelper(ix.keys),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var accountMeta = _step4.value;
                var keyMeta = getOrInsertDefault(accountMeta.pubkey);
                keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);
                keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return new CompiledKeys(payer, keyMetaMap);
      }
    }]);

    return CompiledKeys;
  }();

  var END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';
  /**
   * Delegates to `Array#shift`, but throws if the array is zero-length.
   */

  function guardedShift(byteArray) {
    if (byteArray.length === 0) {
      throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
    }

    return byteArray.shift();
  }
  /**
   * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of
   * the array.
   */


  function guardedSplice(byteArray) {
    var _args$;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var start = args[0];

    if (args.length === 2 // Implies that `deleteCount` was supplied
    ? start + ((_args$ = args[1]) !== null && _args$ !== void 0 ? _args$ : 0) > byteArray.length : start >= byteArray.length) {
      throw new Error(END_OF_BUFFER_ERROR_MESSAGE);
    }

    return byteArray.splice.apply(byteArray, args);
  }
  /**
   * An instruction to execute by a program
   *
   * @property {number} programIdIndex
   * @property {number[]} accounts
   * @property {string} data
   */

  /**
   * Message constructor arguments
   */

  /**
   * List of instructions to be processed atomically
   */


  var Message = /*#__PURE__*/function () {
    function Message(args) {
      var _this7 = this;

      _classCallCheck(this, Message);

      this.header = void 0;
      this.accountKeys = void 0;
      this.recentBlockhash = void 0;
      this.instructions = void 0;
      this.indexToProgramIds = new Map();
      this.header = args.header;
      this.accountKeys = args.accountKeys.map(function (account) {
        return new PublicKey(account);
      });
      this.recentBlockhash = args.recentBlockhash;
      this.instructions = args.instructions;
      this.instructions.forEach(function (ix) {
        return _this7.indexToProgramIds.set(ix.programIdIndex, _this7.accountKeys[ix.programIdIndex]);
      });
    }

    _createClass(Message, [{
      key: "version",
      get: function get() {
        return 'legacy';
      }
    }, {
      key: "staticAccountKeys",
      get: function get() {
        return this.accountKeys;
      }
    }, {
      key: "compiledInstructions",
      get: function get() {
        return this.instructions.map(function (ix) {
          return {
            programIdIndex: ix.programIdIndex,
            accountKeyIndexes: ix.accounts,
            data: bs58$5.decode(ix.data)
          };
        });
      }
    }, {
      key: "addressTableLookups",
      get: function get() {
        return [];
      }
    }, {
      key: "getAccountKeys",
      value: function getAccountKeys() {
        return new MessageAccountKeys(this.staticAccountKeys);
      }
    }, {
      key: "isAccountSigner",
      value: function isAccountSigner(index) {
        return index < this.header.numRequiredSignatures;
      }
    }, {
      key: "isAccountWritable",
      value: function isAccountWritable(index) {
        var numSignedAccounts = this.header.numRequiredSignatures;

        if (index >= this.header.numRequiredSignatures) {
          var unsignedAccountIndex = index - numSignedAccounts;
          var numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;
          var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
          return unsignedAccountIndex < numWritableUnsignedAccounts;
        } else {
          var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
          return index < numWritableSignedAccounts;
        }
      }
    }, {
      key: "isProgramId",
      value: function isProgramId(index) {
        return this.indexToProgramIds.has(index);
      }
    }, {
      key: "programIds",
      value: function programIds() {
        return _toConsumableArray(this.indexToProgramIds.values());
      }
    }, {
      key: "nonProgramIds",
      value: function nonProgramIds() {
        var _this8 = this;

        return this.accountKeys.filter(function (_, index) {
          return !_this8.isProgramId(index);
        });
      }
    }, {
      key: "serialize",
      value: function serialize() {
        var numKeys = this.accountKeys.length;
        var keyCount = [];
        encodeLength(keyCount, numKeys);
        var instructions = this.instructions.map(function (instruction) {
          var accounts = instruction.accounts,
              programIdIndex = instruction.programIdIndex;
          var data = Array.from(bs58$5.decode(instruction.data));
          var keyIndicesCount = [];
          encodeLength(keyIndicesCount, accounts.length);
          var dataCount = [];
          encodeLength(dataCount, data.length);
          return {
            programIdIndex: programIdIndex,
            keyIndicesCount: Buffer$1.from(keyIndicesCount),
            keyIndices: accounts,
            dataLength: Buffer$1.from(dataCount),
            data: data
          };
        });
        var instructionCount = [];
        encodeLength(instructionCount, instructions.length);
        var instructionBuffer = Buffer$1.alloc(PACKET_DATA_SIZE);
        Buffer$1.from(instructionCount).copy(instructionBuffer);
        var instructionBufferLength = instructionCount.length;
        instructions.forEach(function (instruction) {
          var instructionLayout = struct([u8('programIdIndex'), blob$1(instruction.keyIndicesCount.length, 'keyIndicesCount'), seq$1(u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), blob$1(instruction.dataLength.length, 'dataLength'), seq$1(u8('userdatum'), instruction.data.length, 'data')]);
          var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);
          instructionBufferLength += length;
        });
        instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);
        var signDataLayout = struct([blob$1(1, 'numRequiredSignatures'), blob$1(1, 'numReadonlySignedAccounts'), blob$1(1, 'numReadonlyUnsignedAccounts'), blob$1(keyCount.length, 'keyCount'), seq$1(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);
        var transaction = {
          numRequiredSignatures: Buffer$1.from([this.header.numRequiredSignatures]),
          numReadonlySignedAccounts: Buffer$1.from([this.header.numReadonlySignedAccounts]),
          numReadonlyUnsignedAccounts: Buffer$1.from([this.header.numReadonlyUnsignedAccounts]),
          keyCount: Buffer$1.from(keyCount),
          keys: this.accountKeys.map(function (key) {
            return toBuffer(key.toBytes());
          }),
          recentBlockhash: bs58$5.decode(this.recentBlockhash)
        };
        var signData = Buffer$1.alloc(2048);
        var length = signDataLayout.encode(transaction, signData);
        instructionBuffer.copy(signData, length);
        return signData.slice(0, length + instructionBuffer.length);
      }
      /**
       * Decode a compiled message into a Message object.
       */

    }], [{
      key: "compile",
      value: function compile(args) {
        var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);

        var _compiledKeys$getMess = compiledKeys.getMessageComponents(),
            _compiledKeys$getMess2 = _slicedToArray(_compiledKeys$getMess, 2),
            header = _compiledKeys$getMess2[0],
            staticAccountKeys = _compiledKeys$getMess2[1];

        var accountKeys = new MessageAccountKeys(staticAccountKeys);
        var instructions = accountKeys.compileInstructions(args.instructions).map(function (ix) {
          return {
            programIdIndex: ix.programIdIndex,
            accounts: ix.accountKeyIndexes,
            data: bs58$5.encode(ix.data)
          };
        });
        return new Message({
          header: header,
          accountKeys: staticAccountKeys,
          recentBlockhash: args.recentBlockhash,
          instructions: instructions
        });
      }
    }, {
      key: "from",
      value: function from(buffer) {
        // Slice up wire data
        var byteArray = _toConsumableArray(buffer);

        var numRequiredSignatures = guardedShift(byteArray);

        if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {
          throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');
        }

        var numReadonlySignedAccounts = guardedShift(byteArray);
        var numReadonlyUnsignedAccounts = guardedShift(byteArray);
        var accountCount = decodeLength(byteArray);
        var accountKeys = [];

        for (var i = 0; i < accountCount; i++) {
          var account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
          accountKeys.push(new PublicKey(Buffer$1.from(account)));
        }

        var recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);
        var instructionCount = decodeLength(byteArray);
        var instructions = [];

        for (var _i2 = 0; _i2 < instructionCount; _i2++) {
          var programIdIndex = guardedShift(byteArray);

          var _accountCount = decodeLength(byteArray);

          var accounts = guardedSplice(byteArray, 0, _accountCount);
          var dataLength = decodeLength(byteArray);
          var dataSlice = guardedSplice(byteArray, 0, dataLength);
          var data = bs58$5.encode(Buffer$1.from(dataSlice));
          instructions.push({
            programIdIndex: programIdIndex,
            accounts: accounts,
            data: data
          });
        }

        var messageArgs = {
          header: {
            numRequiredSignatures: numRequiredSignatures,
            numReadonlySignedAccounts: numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts
          },
          recentBlockhash: bs58$5.encode(Buffer$1.from(recentBlockhash)),
          accountKeys: accountKeys,
          instructions: instructions
        };
        return new Message(messageArgs);
      }
    }]);

    return Message;
  }();
  /**
   * Message constructor arguments
   */


  var MessageV0 = /*#__PURE__*/function () {
    function MessageV0(args) {
      _classCallCheck(this, MessageV0);

      this.header = void 0;
      this.staticAccountKeys = void 0;
      this.recentBlockhash = void 0;
      this.compiledInstructions = void 0;
      this.addressTableLookups = void 0;
      this.header = args.header;
      this.staticAccountKeys = args.staticAccountKeys;
      this.recentBlockhash = args.recentBlockhash;
      this.compiledInstructions = args.compiledInstructions;
      this.addressTableLookups = args.addressTableLookups;
    }

    _createClass(MessageV0, [{
      key: "version",
      get: function get() {
        return 0;
      }
    }, {
      key: "numAccountKeysFromLookups",
      get: function get() {
        var count = 0;

        var _iterator5 = _createForOfIteratorHelper(this.addressTableLookups),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var lookup = _step5.value;
            count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return count;
      }
    }, {
      key: "getAccountKeys",
      value: function getAccountKeys(args) {
        var accountKeysFromLookups;

        if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {
          if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {
            throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');
          }

          accountKeysFromLookups = args.accountKeysFromLookups;
        } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {
          accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);
        } else if (this.addressTableLookups.length > 0) {
          throw new Error('Failed to get account keys because address table lookups were not resolved');
        }

        return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);
      }
    }, {
      key: "isAccountSigner",
      value: function isAccountSigner(index) {
        return index < this.header.numRequiredSignatures;
      }
    }, {
      key: "isAccountWritable",
      value: function isAccountWritable(index) {
        var numSignedAccounts = this.header.numRequiredSignatures;
        var numStaticAccountKeys = this.staticAccountKeys.length;

        if (index >= numStaticAccountKeys) {
          var lookupAccountKeysIndex = index - numStaticAccountKeys;
          var numWritableLookupAccountKeys = this.addressTableLookups.reduce(function (count, lookup) {
            return count + lookup.writableIndexes.length;
          }, 0);
          return lookupAccountKeysIndex < numWritableLookupAccountKeys;
        } else if (index >= this.header.numRequiredSignatures) {
          var unsignedAccountIndex = index - numSignedAccounts;
          var numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;
          var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;
          return unsignedAccountIndex < numWritableUnsignedAccounts;
        } else {
          var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;
          return index < numWritableSignedAccounts;
        }
      }
    }, {
      key: "resolveAddressTableLookups",
      value: function resolveAddressTableLookups(addressLookupTableAccounts) {
        var accountKeysFromLookups = {
          writable: [],
          readonly: []
        };

        var _iterator6 = _createForOfIteratorHelper(this.addressTableLookups),
            _step6;

        try {
          var _loop2 = function _loop2() {
            var tableLookup = _step6.value;
            var tableAccount = addressLookupTableAccounts.find(function (account) {
              return account.key.equals(tableLookup.accountKey);
            });

            if (!tableAccount) {
              throw new Error("Failed to find address lookup table account for table key ".concat(tableLookup.accountKey.toBase58()));
            }

            var _iterator7 = _createForOfIteratorHelper(tableLookup.writableIndexes),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var index = _step7.value;

                if (index < tableAccount.state.addresses.length) {
                  accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);
                } else {
                  throw new Error("Failed to find address for index ".concat(index, " in address lookup table ").concat(tableLookup.accountKey.toBase58()));
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            var _iterator8 = _createForOfIteratorHelper(tableLookup.readonlyIndexes),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var _index = _step8.value;

                if (_index < tableAccount.state.addresses.length) {
                  accountKeysFromLookups.readonly.push(tableAccount.state.addresses[_index]);
                } else {
                  throw new Error("Failed to find address for index ".concat(_index, " in address lookup table ").concat(tableLookup.accountKey.toBase58()));
                }
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          };

          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return accountKeysFromLookups;
      }
    }, {
      key: "serialize",
      value: function serialize() {
        var encodedStaticAccountKeysLength = Array();
        encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);
        var serializedInstructions = this.serializeInstructions();
        var encodedInstructionsLength = Array();
        encodeLength(encodedInstructionsLength, this.compiledInstructions.length);
        var serializedAddressTableLookups = this.serializeAddressTableLookups();
        var encodedAddressTableLookupsLength = Array();
        encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);
        var messageLayout = struct([u8('prefix'), struct([u8('numRequiredSignatures'), u8('numReadonlySignedAccounts'), u8('numReadonlyUnsignedAccounts')], 'header'), blob$1(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), seq$1(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), blob$1(encodedInstructionsLength.length, 'instructionsLength'), blob$1(serializedInstructions.length, 'serializedInstructions'), blob$1(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), blob$1(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);
        var serializedMessage = new Uint8Array(PACKET_DATA_SIZE);
        var MESSAGE_VERSION_0_PREFIX = 1 << 7;
        var serializedMessageLength = messageLayout.encode({
          prefix: MESSAGE_VERSION_0_PREFIX,
          header: this.header,
          staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),
          staticAccountKeys: this.staticAccountKeys.map(function (key) {
            return key.toBytes();
          }),
          recentBlockhash: bs58$5.decode(this.recentBlockhash),
          instructionsLength: new Uint8Array(encodedInstructionsLength),
          serializedInstructions: serializedInstructions,
          addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),
          serializedAddressTableLookups: serializedAddressTableLookups
        }, serializedMessage);
        return serializedMessage.slice(0, serializedMessageLength);
      }
    }, {
      key: "serializeInstructions",
      value: function serializeInstructions() {
        var serializedLength = 0;
        var serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);

        var _iterator9 = _createForOfIteratorHelper(this.compiledInstructions),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var instruction = _step9.value;
            var encodedAccountKeyIndexesLength = Array();
            encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);
            var encodedDataLength = Array();
            encodeLength(encodedDataLength, instruction.data.length);
            var instructionLayout = struct([u8('programIdIndex'), blob$1(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), seq$1(u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), blob$1(encodedDataLength.length, 'encodedDataLength'), blob$1(instruction.data.length, 'data')]);
            serializedLength += instructionLayout.encode({
              programIdIndex: instruction.programIdIndex,
              encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),
              accountKeyIndexes: instruction.accountKeyIndexes,
              encodedDataLength: new Uint8Array(encodedDataLength),
              data: instruction.data
            }, serializedInstructions, serializedLength);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }

        return serializedInstructions.slice(0, serializedLength);
      }
    }, {
      key: "serializeAddressTableLookups",
      value: function serializeAddressTableLookups() {
        var serializedLength = 0;
        var serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);

        var _iterator10 = _createForOfIteratorHelper(this.addressTableLookups),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var lookup = _step10.value;
            var encodedWritableIndexesLength = Array();
            encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);
            var encodedReadonlyIndexesLength = Array();
            encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);
            var addressTableLookupLayout = struct([publicKey('accountKey'), blob$1(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), seq$1(u8(), lookup.writableIndexes.length, 'writableIndexes'), blob$1(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), seq$1(u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);
            serializedLength += addressTableLookupLayout.encode({
              accountKey: lookup.accountKey.toBytes(),
              encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),
              writableIndexes: lookup.writableIndexes,
              encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),
              readonlyIndexes: lookup.readonlyIndexes
            }, serializedAddressTableLookups, serializedLength);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }

        return serializedAddressTableLookups.slice(0, serializedLength);
      }
    }], [{
      key: "compile",
      value: function compile(args) {
        var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);
        var addressTableLookups = new Array();
        var accountKeysFromLookups = {
          writable: new Array(),
          readonly: new Array()
        };
        var lookupTableAccounts = args.addressLookupTableAccounts || [];

        var _iterator11 = _createForOfIteratorHelper(lookupTableAccounts),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var lookupTable = _step11.value;
            var extractResult = compiledKeys.extractTableLookup(lookupTable);

            if (extractResult !== undefined) {
              var _accountKeysFromLooku, _accountKeysFromLooku2;

              var _extractResult2 = _slicedToArray(extractResult, 2),
                  addressTableLookup = _extractResult2[0],
                  _extractResult$2 = _extractResult2[1],
                  writable = _extractResult$2.writable,
                  readonly = _extractResult$2.readonly;

              addressTableLookups.push(addressTableLookup);

              (_accountKeysFromLooku = accountKeysFromLookups.writable).push.apply(_accountKeysFromLooku, _toConsumableArray(writable));

              (_accountKeysFromLooku2 = accountKeysFromLookups.readonly).push.apply(_accountKeysFromLooku2, _toConsumableArray(readonly));
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }

        var _compiledKeys$getMess3 = compiledKeys.getMessageComponents(),
            _compiledKeys$getMess4 = _slicedToArray(_compiledKeys$getMess3, 2),
            header = _compiledKeys$getMess4[0],
            staticAccountKeys = _compiledKeys$getMess4[1];

        var accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);
        var compiledInstructions = accountKeys.compileInstructions(args.instructions);
        return new MessageV0({
          header: header,
          staticAccountKeys: staticAccountKeys,
          recentBlockhash: args.recentBlockhash,
          compiledInstructions: compiledInstructions,
          addressTableLookups: addressTableLookups
        });
      }
    }, {
      key: "deserialize",
      value: function deserialize(serializedMessage) {
        var byteArray = _toConsumableArray(serializedMessage);

        var prefix = guardedShift(byteArray);
        var maskedPrefix = prefix & VERSION_PREFIX_MASK;
        assert$1(prefix !== maskedPrefix, "Expected versioned message but received legacy message");
        var version = maskedPrefix;
        assert$1(version === 0, "Expected versioned message with version 0 but found version ".concat(version));
        var header = {
          numRequiredSignatures: guardedShift(byteArray),
          numReadonlySignedAccounts: guardedShift(byteArray),
          numReadonlyUnsignedAccounts: guardedShift(byteArray)
        };
        var staticAccountKeys = [];
        var staticAccountKeysLength = decodeLength(byteArray);

        for (var i = 0; i < staticAccountKeysLength; i++) {
          staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));
        }

        var recentBlockhash = bs58$5.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
        var instructionCount = decodeLength(byteArray);
        var compiledInstructions = [];

        for (var _i4 = 0; _i4 < instructionCount; _i4++) {
          var programIdIndex = guardedShift(byteArray);
          var accountKeyIndexesLength = decodeLength(byteArray);
          var accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);
          var dataLength = decodeLength(byteArray);
          var data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));
          compiledInstructions.push({
            programIdIndex: programIdIndex,
            accountKeyIndexes: accountKeyIndexes,
            data: data
          });
        }

        var addressTableLookupsCount = decodeLength(byteArray);
        var addressTableLookups = [];

        for (var _i6 = 0; _i6 < addressTableLookupsCount; _i6++) {
          var accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));
          var writableIndexesLength = decodeLength(byteArray);
          var writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);
          var readonlyIndexesLength = decodeLength(byteArray);
          var readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);
          addressTableLookups.push({
            accountKey: accountKey,
            writableIndexes: writableIndexes,
            readonlyIndexes: readonlyIndexes
          });
        }

        return new MessageV0({
          header: header,
          staticAccountKeys: staticAccountKeys,
          recentBlockhash: recentBlockhash,
          compiledInstructions: compiledInstructions,
          addressTableLookups: addressTableLookups
        });
      }
    }]);

    return MessageV0;
  }(); // eslint-disable-next-line no-redeclare


  var VersionedMessage = {
    deserializeMessageVersion: function deserializeMessageVersion(serializedMessage) {
      var prefix = serializedMessage[0];
      var maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned

      if (maskedPrefix === prefix) {
        return 'legacy';
      } // the lower 7 bits of the prefix indicate the message version


      return maskedPrefix;
    },
    deserialize: function deserialize(serializedMessage) {
      var version = VersionedMessage.deserializeMessageVersion(serializedMessage);

      if (version === 'legacy') {
        return Message.from(serializedMessage);
      }

      if (version === 0) {
        return MessageV0.deserialize(serializedMessage);
      } else {
        throw new Error("Transaction message version ".concat(version, " deserialization is not supported"));
      }
    }
  };
  /** @internal */

  /**
   * Transaction signature as base-58 encoded string
   */

  var TransactionStatus = /*#__PURE__*/function (TransactionStatus) {
    TransactionStatus[TransactionStatus["BLOCKHEIGHT_EXCEEDED"] = 0] = "BLOCKHEIGHT_EXCEEDED";
    TransactionStatus[TransactionStatus["PROCESSED"] = 1] = "PROCESSED";
    TransactionStatus[TransactionStatus["TIMED_OUT"] = 2] = "TIMED_OUT";
    TransactionStatus[TransactionStatus["NONCE_INVALID"] = 3] = "NONCE_INVALID";
    return TransactionStatus;
  }({});
  /**
   * Default (empty) signature
   */


  var DEFAULT_SIGNATURE = Buffer$1.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);
  /**
   * Account metadata used to define instructions
   */

  /**
   * List of TransactionInstruction object fields that may be initialized at construction
   */

  /**
   * Configuration object for Transaction.serialize()
   */

  /**
   * @internal
   */

  /**
   * Transaction Instruction class
   */

  var TransactionInstruction = /*#__PURE__*/function () {
    function TransactionInstruction(opts) {
      _classCallCheck(this, TransactionInstruction);

      /**
       * Public keys to include in this transaction
       * Boolean represents whether this pubkey needs to sign the transaction
       */
      this.keys = void 0;
      /**
       * Program Id to execute
       */

      this.programId = void 0;
      /**
       * Program input
       */

      this.data = Buffer$1.alloc(0);
      this.programId = opts.programId;
      this.keys = opts.keys;

      if (opts.data) {
        this.data = opts.data;
      }
    }
    /**
     * @internal
     */


    _createClass(TransactionInstruction, [{
      key: "toJSON",
      value: function toJSON() {
        return {
          keys: this.keys.map(function (_ref17) {
            var pubkey = _ref17.pubkey,
                isSigner = _ref17.isSigner,
                isWritable = _ref17.isWritable;
            return {
              pubkey: pubkey.toJSON(),
              isSigner: isSigner,
              isWritable: isWritable
            };
          }),
          programId: this.programId.toJSON(),
          data: _toConsumableArray(this.data)
        };
      }
    }]);

    return TransactionInstruction;
  }();
  /**
   * Pair of signature and corresponding public key
   */

  /**
   * List of Transaction object fields that may be initialized at construction
   */
  // For backward compatibility; an unfortunate consequence of being
  // forced to over-export types by the documentation generator.
  // See https://github.com/solana-labs/solana/pull/25820

  /**
   * Blockhash-based transactions have a lifetime that are defined by
   * the blockhash they include. Any transaction whose blockhash is
   * too old will be rejected.
   */

  /**
   * Use these options to construct a durable nonce transaction.
   */

  /**
   * Nonce information to be used to build an offline Transaction.
   */

  /**
   * @internal
   */

  /**
   * Transaction class
   */


  var Transaction = /*#__PURE__*/function () {
    /**
     * The transaction fee payer
     */
    // Construct a transaction with a blockhash and lastValidBlockHeight
    // Construct a transaction using a durable nonce

    /**
     * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.
     * Please supply a `TransactionBlockhashCtor` instead.
     */

    /**
     * Construct an empty Transaction
     */
    function Transaction(opts) {
      _classCallCheck(this, Transaction);

      /**
       * Signatures for the transaction.  Typically created by invoking the
       * `sign()` method
       */
      this.signatures = [];
      this.feePayer = void 0;
      /**
       * The instructions to atomically execute
       */

      this.instructions = [];
      /**
       * A recent transaction id. Must be populated by the caller
       */

      this.recentBlockhash = void 0;
      /**
       * the last block chain can advance to before tx is declared expired
       * */

      this.lastValidBlockHeight = void 0;
      /**
       * Optional Nonce information. If populated, transaction will use a durable
       * Nonce hash instead of a recentBlockhash. Must be populated by the caller
       */

      this.nonceInfo = void 0;
      /**
       * If this is a nonce transaction this represents the minimum slot from which
       * to evaluate if the nonce has advanced when attempting to confirm the
       * transaction. This protects against a case where the transaction confirmation
       * logic loads the nonce account from an old slot and assumes the mismatch in
       * nonce value implies that the nonce has been advanced.
       */

      this.minNonceContextSlot = void 0;
      /**
       * @internal
       */

      this._message = void 0;
      /**
       * @internal
       */

      this._json = void 0;

      if (!opts) {
        return;
      }

      if (opts.feePayer) {
        this.feePayer = opts.feePayer;
      }

      if (opts.signatures) {
        this.signatures = opts.signatures;
      }

      if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {
        var minContextSlot = opts.minContextSlot,
            nonceInfo = opts.nonceInfo;
        this.minNonceContextSlot = minContextSlot;
        this.nonceInfo = nonceInfo;
      } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {
        var blockhash = opts.blockhash,
            lastValidBlockHeight = opts.lastValidBlockHeight;
        this.recentBlockhash = blockhash;
        this.lastValidBlockHeight = lastValidBlockHeight;
      } else {
        var recentBlockhash = opts.recentBlockhash,
            _nonceInfo = opts.nonceInfo;

        if (_nonceInfo) {
          this.nonceInfo = _nonceInfo;
        }

        this.recentBlockhash = recentBlockhash;
      }
    }
    /**
     * @internal
     */


    _createClass(Transaction, [{
      key: "signature",
      get:
      /**
       * The first (payer) Transaction signature
       *
       * @returns {Buffer | null} Buffer of payer's signature
       */
      function get() {
        if (this.signatures.length > 0) {
          return this.signatures[0].signature;
        }

        return null;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          recentBlockhash: this.recentBlockhash || null,
          feePayer: this.feePayer ? this.feePayer.toJSON() : null,
          nonceInfo: this.nonceInfo ? {
            nonce: this.nonceInfo.nonce,
            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()
          } : null,
          instructions: this.instructions.map(function (instruction) {
            return instruction.toJSON();
          }),
          signers: this.signatures.map(function (_ref18) {
            var publicKey = _ref18.publicKey;
            return publicKey.toJSON();
          })
        };
      }
      /**
       * Add one or more instructions to this Transaction
       *
       * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction
       */

    }, {
      key: "add",
      value: function add() {
        var _this9 = this;

        for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          items[_key2] = arguments[_key2];
        }

        if (items.length === 0) {
          throw new Error('No instructions');
        }

        items.forEach(function (item) {
          if ('instructions' in item) {
            _this9.instructions = _this9.instructions.concat(item.instructions);
          } else if ('data' in item && 'programId' in item && 'keys' in item) {
            _this9.instructions.push(item);
          } else {
            _this9.instructions.push(new TransactionInstruction(item));
          }
        });
        return this;
      }
      /**
       * Compile transaction data
       */

    }, {
      key: "compileMessage",
      value: function compileMessage() {
        if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {
          return this._message;
        }

        var recentBlockhash;
        var instructions;

        if (this.nonceInfo) {
          recentBlockhash = this.nonceInfo.nonce;

          if (this.instructions[0] != this.nonceInfo.nonceInstruction) {
            instructions = [this.nonceInfo.nonceInstruction].concat(_toConsumableArray(this.instructions));
          } else {
            instructions = this.instructions;
          }
        } else {
          recentBlockhash = this.recentBlockhash;
          instructions = this.instructions;
        }

        if (!recentBlockhash) {
          throw new Error('Transaction recentBlockhash required');
        }

        if (instructions.length < 1) {
          console.warn('No instructions provided');
        }

        var feePayer;

        if (this.feePayer) {
          feePayer = this.feePayer;
        } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {
          // Use implicit fee payer
          feePayer = this.signatures[0].publicKey;
        } else {
          throw new Error('Transaction fee payer required');
        }

        for (var i = 0; i < instructions.length; i++) {
          if (instructions[i].programId === undefined) {
            throw new Error("Transaction instruction index ".concat(i, " has undefined program id"));
          }
        }

        var programIds = [];
        var accountMetas = [];
        instructions.forEach(function (instruction) {
          instruction.keys.forEach(function (accountMeta) {
            accountMetas.push(_objectSpread2({}, accountMeta));
          });
          var programId = instruction.programId.toString();

          if (!programIds.includes(programId)) {
            programIds.push(programId);
          }
        }); // Append programID account metas

        programIds.forEach(function (programId) {
          accountMetas.push({
            pubkey: new PublicKey(programId),
            isSigner: false,
            isWritable: false
          });
        }); // Cull duplicate account metas

        var uniqueMetas = [];
        accountMetas.forEach(function (accountMeta) {
          var pubkeyString = accountMeta.pubkey.toString();
          var uniqueIndex = uniqueMetas.findIndex(function (x) {
            return x.pubkey.toString() === pubkeyString;
          });

          if (uniqueIndex > -1) {
            uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;
            uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;
          } else {
            uniqueMetas.push(accountMeta);
          }
        }); // Sort. Prioritizing first by signer, then by writable

        uniqueMetas.sort(function (x, y) {
          if (x.isSigner !== y.isSigner) {
            // Signers always come before non-signers
            return x.isSigner ? -1 : 1;
          }

          if (x.isWritable !== y.isWritable) {
            // Writable accounts always come before read-only accounts
            return x.isWritable ? -1 : 1;
          } // Otherwise, sort by pubkey, stringwise.


          var options = {
            localeMatcher: 'best fit',
            usage: 'sort',
            sensitivity: 'variant',
            ignorePunctuation: false,
            numeric: false,
            caseFirst: 'lower'
          };
          return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);
        }); // Move fee payer to the front

        var feePayerIndex = uniqueMetas.findIndex(function (x) {
          return x.pubkey.equals(feePayer);
        });

        if (feePayerIndex > -1) {
          var _uniqueMetas$splice3 = uniqueMetas.splice(feePayerIndex, 1),
              _uniqueMetas$splice4 = _slicedToArray(_uniqueMetas$splice3, 1),
              payerMeta = _uniqueMetas$splice4[0];

          payerMeta.isSigner = true;
          payerMeta.isWritable = true;
          uniqueMetas.unshift(payerMeta);
        } else {
          uniqueMetas.unshift({
            pubkey: feePayer,
            isSigner: true,
            isWritable: true
          });
        } // Disallow unknown signers


        var _iterator12 = _createForOfIteratorHelper(this.signatures),
            _step12;

        try {
          var _loop3 = function _loop3() {
            var signature = _step12.value;
            var uniqueIndex = uniqueMetas.findIndex(function (x) {
              return x.pubkey.equals(signature.publicKey);
            });

            if (uniqueIndex > -1) {
              if (!uniqueMetas[uniqueIndex].isSigner) {
                uniqueMetas[uniqueIndex].isSigner = true;
                console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');
              }
            } else {
              throw new Error("unknown signer: ".concat(signature.publicKey.toString()));
            }
          };

          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            _loop3();
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }

        var numRequiredSignatures = 0;
        var numReadonlySignedAccounts = 0;
        var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values

        var signedKeys = [];
        var unsignedKeys = [];
        uniqueMetas.forEach(function (_ref19) {
          var pubkey = _ref19.pubkey,
              isSigner = _ref19.isSigner,
              isWritable = _ref19.isWritable;

          if (isSigner) {
            signedKeys.push(pubkey.toString());
            numRequiredSignatures += 1;

            if (!isWritable) {
              numReadonlySignedAccounts += 1;
            }
          } else {
            unsignedKeys.push(pubkey.toString());

            if (!isWritable) {
              numReadonlyUnsignedAccounts += 1;
            }
          }
        });
        var accountKeys = signedKeys.concat(unsignedKeys);
        var compiledInstructions = instructions.map(function (instruction) {
          var data = instruction.data,
              programId = instruction.programId;
          return {
            programIdIndex: accountKeys.indexOf(programId.toString()),
            accounts: instruction.keys.map(function (meta) {
              return accountKeys.indexOf(meta.pubkey.toString());
            }),
            data: bs58$5.encode(data)
          };
        });
        compiledInstructions.forEach(function (instruction) {
          assert$1(instruction.programIdIndex >= 0);
          instruction.accounts.forEach(function (keyIndex) {
            return assert$1(keyIndex >= 0);
          });
        });
        return new Message({
          header: {
            numRequiredSignatures: numRequiredSignatures,
            numReadonlySignedAccounts: numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts
          },
          accountKeys: accountKeys,
          recentBlockhash: recentBlockhash,
          instructions: compiledInstructions
        });
      }
      /**
       * @internal
       */

    }, {
      key: "_compile",
      value: function _compile() {
        var message = this.compileMessage();
        var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);

        if (this.signatures.length === signedKeys.length) {
          var valid = this.signatures.every(function (pair, index) {
            return signedKeys[index].equals(pair.publicKey);
          });
          if (valid) return message;
        }

        this.signatures = signedKeys.map(function (publicKey) {
          return {
            signature: null,
            publicKey: publicKey
          };
        });
        return message;
      }
      /**
       * Get a buffer of the Transaction data that need to be covered by signatures
       */

    }, {
      key: "serializeMessage",
      value: function serializeMessage() {
        return this._compile().serialize();
      }
      /**
       * Get the estimated fee associated with a transaction
       *
       * @param {Connection} connection Connection to RPC Endpoint.
       *
       * @returns {Promise<number | null>} The estimated fee for the transaction
       */

    }, {
      key: "getEstimatedFee",
      value: function () {
        var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection) {
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return connection.getFeeForMessage(this.compileMessage());

              case 2:
                return _context4.abrupt("return", _context4.sent.value);

              case 3:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));

        function getEstimatedFee(_x8) {
          return _getEstimatedFee.apply(this, arguments);
        }

        return getEstimatedFee;
      }()
      /**
       * Specify the public keys which will be used to sign the Transaction.
       * The first signer will be used as the transaction fee payer account.
       *
       * Signatures can be added with either `partialSign` or `addSignature`
       *
       * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be
       * specified and it can be set in the Transaction constructor or with the
       * `feePayer` property.
       */

    }, {
      key: "setSigners",
      value: function setSigners() {
        for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          signers[_key3] = arguments[_key3];
        }

        if (signers.length === 0) {
          throw new Error('No signers');
        }

        var seen = new Set();
        this.signatures = signers.filter(function (publicKey) {
          var key = publicKey.toString();

          if (seen.has(key)) {
            return false;
          } else {
            seen.add(key);
            return true;
          }
        }).map(function (publicKey) {
          return {
            signature: null,
            publicKey: publicKey
          };
        });
      }
      /**
       * Sign the Transaction with the specified signers. Multiple signatures may
       * be applied to a Transaction. The first signature is considered "primary"
       * and is used identify and confirm transactions.
       *
       * If the Transaction `feePayer` is not set, the first signer will be used
       * as the transaction fee payer account.
       *
       * Transaction fields should not be modified after the first call to `sign`,
       * as doing so may invalidate the signature and cause the Transaction to be
       * rejected.
       *
       * The Transaction must be assigned a valid `recentBlockhash` before invoking this method
       *
       * @param {Array<Signer>} signers Array of signers that will sign the transaction
       */

    }, {
      key: "sign",
      value: function sign() {
        for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          signers[_key4] = arguments[_key4];
        }

        if (signers.length === 0) {
          throw new Error('No signers');
        } // Dedupe signers


        var seen = new Set();
        var uniqueSigners = [];

        for (var _i7 = 0, _signers = signers; _i7 < _signers.length; _i7++) {
          var signer = _signers[_i7];
          var key = signer.publicKey.toString();

          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }

        this.signatures = uniqueSigners.map(function (signer) {
          return {
            signature: null,
            publicKey: signer.publicKey
          };
        });

        var message = this._compile();

        this._partialSign.apply(this, [message].concat(uniqueSigners));
      }
      /**
       * Partially sign a transaction with the specified accounts. All accounts must
       * correspond to either the fee payer or a signer account in the transaction
       * instructions.
       *
       * All the caveats from the `sign` method apply to `partialSign`
       *
       * @param {Array<Signer>} signers Array of signers that will sign the transaction
       */

    }, {
      key: "partialSign",
      value: function partialSign() {
        for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          signers[_key5] = arguments[_key5];
        }

        if (signers.length === 0) {
          throw new Error('No signers');
        } // Dedupe signers


        var seen = new Set();
        var uniqueSigners = [];

        for (var _i8 = 0, _signers2 = signers; _i8 < _signers2.length; _i8++) {
          var signer = _signers2[_i8];
          var key = signer.publicKey.toString();

          if (seen.has(key)) {
            continue;
          } else {
            seen.add(key);
            uniqueSigners.push(signer);
          }
        }

        var message = this._compile();

        this._partialSign.apply(this, [message].concat(uniqueSigners));
      }
      /**
       * @internal
       */

    }, {
      key: "_partialSign",
      value: function _partialSign(message) {
        var _this10 = this;

        var signData = message.serialize();

        for (var _len6 = arguments.length, signers = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          signers[_key6 - 1] = arguments[_key6];
        }

        signers.forEach(function (signer) {
          var signature = _sign(signData, signer.secretKey);

          _this10._addSignature(signer.publicKey, toBuffer(signature));
        });
      }
      /**
       * Add an externally created signature to a transaction. The public key
       * must correspond to either the fee payer or a signer account in the transaction
       * instructions.
       *
       * @param {PublicKey} pubkey Public key that will be added to the transaction.
       * @param {Buffer} signature An externally created signature to add to the transaction.
       */

    }, {
      key: "addSignature",
      value: function addSignature(pubkey, signature) {
        this._compile(); // Ensure signatures array is populated


        this._addSignature(pubkey, signature);
      }
      /**
       * @internal
       */

    }, {
      key: "_addSignature",
      value: function _addSignature(pubkey, signature) {
        assert$1(signature.length === 64);
        var index = this.signatures.findIndex(function (sigpair) {
          return pubkey.equals(sigpair.publicKey);
        });

        if (index < 0) {
          throw new Error("unknown signer: ".concat(pubkey.toString()));
        }

        this.signatures[index].signature = Buffer$1.from(signature);
      }
      /**
       * Verify signatures of a Transaction
       * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.
       * If no boolean is provided, we expect a fully signed Transaction by default.
       *
       * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction
       */

    }, {
      key: "verifySignatures",
      value: function verifySignatures() {
        var requireAllSignatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        var signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);

        return !signatureErrors;
      }
      /**
       * @internal
       */

    }, {
      key: "_getMessageSignednessErrors",
      value: function _getMessageSignednessErrors(message, requireAllSignatures) {
        var errors = {};

        var _iterator13 = _createForOfIteratorHelper(this.signatures),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _step13$value2 = _step13.value,
                _signature = _step13$value2.signature,
                _publicKey = _step13$value2.publicKey;

            if (_signature === null) {
              if (requireAllSignatures) {
                (errors.missing || (errors.missing = [])).push(_publicKey);
              }
            } else {
              if (!verify(_signature, message, _publicKey.toBytes())) {
                (errors.invalid || (errors.invalid = [])).push(_publicKey);
              }
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }

        return errors.invalid || errors.missing ? errors : undefined;
      }
      /**
       * Serialize the Transaction in the wire format.
       *
       * @param {Buffer} [config] Config of transaction.
       *
       * @returns {Buffer} Signature of transaction in wire format.
       */

    }, {
      key: "serialize",
      value: function serialize(config) {
        var _Object$assign = Object.assign({
          requireAllSignatures: true,
          verifySignatures: true
        }, config),
            requireAllSignatures = _Object$assign.requireAllSignatures,
            verifySignatures = _Object$assign.verifySignatures;

        var signData = this.serializeMessage();

        if (verifySignatures) {
          var sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);

          if (sigErrors) {
            var errorMessage = 'Signature verification failed.';

            if (sigErrors.invalid) {
              errorMessage += "\nInvalid signature for public key".concat(sigErrors.invalid.length === 1 ? '' : '(s)', " [`").concat(sigErrors.invalid.map(function (p) {
                return p.toBase58();
              }).join('`, `'), "`].");
            }

            if (sigErrors.missing) {
              errorMessage += "\nMissing signature for public key".concat(sigErrors.missing.length === 1 ? '' : '(s)', " [`").concat(sigErrors.missing.map(function (p) {
                return p.toBase58();
              }).join('`, `'), "`].");
            }

            throw new Error(errorMessage);
          }
        }

        return this._serialize(signData);
      }
      /**
       * @internal
       */

    }, {
      key: "_serialize",
      value: function _serialize(signData) {
        var signatures = this.signatures;
        var signatureCount = [];
        encodeLength(signatureCount, signatures.length);
        var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;
        var wireTransaction = Buffer$1.alloc(transactionLength);
        assert$1(signatures.length < 256);
        Buffer$1.from(signatureCount).copy(wireTransaction, 0);
        signatures.forEach(function (_ref20, index) {
          var signature = _ref20.signature;

          if (signature !== null) {
            assert$1(signature.length === 64, "signature has invalid length");
            Buffer$1.from(signature).copy(wireTransaction, signatureCount.length + index * 64);
          }
        });
        signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);
        assert$1(wireTransaction.length <= PACKET_DATA_SIZE, "Transaction too large: ".concat(wireTransaction.length, " > ").concat(PACKET_DATA_SIZE));
        return wireTransaction;
      }
      /**
       * Deprecated method
       * @internal
       */

    }, {
      key: "keys",
      get: function get() {
        assert$1(this.instructions.length === 1);
        return this.instructions[0].keys.map(function (keyObj) {
          return keyObj.pubkey;
        });
      }
      /**
       * Deprecated method
       * @internal
       */

    }, {
      key: "programId",
      get: function get() {
        assert$1(this.instructions.length === 1);
        return this.instructions[0].programId;
      }
      /**
       * Deprecated method
       * @internal
       */

    }, {
      key: "data",
      get: function get() {
        assert$1(this.instructions.length === 1);
        return this.instructions[0].data;
      }
      /**
       * Parse a wire transaction into a Transaction object.
       *
       * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction
       *
       * @returns {Transaction} Transaction associated with the signature
       */

    }], [{
      key: "from",
      value: function from(buffer) {
        // Slice up wire data
        var byteArray = _toConsumableArray(buffer);

        var signatureCount = decodeLength(byteArray);
        var signatures = [];

        for (var i = 0; i < signatureCount; i++) {
          var _signature2 = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);

          signatures.push(bs58$5.encode(Buffer$1.from(_signature2)));
        }

        return Transaction.populate(Message.from(byteArray), signatures);
      }
      /**
       * Populate Transaction object from message and signatures
       *
       * @param {Message} message Message of transaction
       * @param {Array<string>} signatures List of signatures to assign to the transaction
       *
       * @returns {Transaction} The populated Transaction
       */

    }, {
      key: "populate",
      value: function populate(message) {
        var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var transaction = new Transaction();
        transaction.recentBlockhash = message.recentBlockhash;

        if (message.header.numRequiredSignatures > 0) {
          transaction.feePayer = message.accountKeys[0];
        }

        signatures.forEach(function (signature, index) {
          var sigPubkeyPair = {
            signature: signature == bs58$5.encode(DEFAULT_SIGNATURE) ? null : bs58$5.decode(signature),
            publicKey: message.accountKeys[index]
          };
          transaction.signatures.push(sigPubkeyPair);
        });
        message.instructions.forEach(function (instruction) {
          var keys = instruction.accounts.map(function (account) {
            var pubkey = message.accountKeys[account];
            return {
              pubkey: pubkey,
              isSigner: transaction.signatures.some(function (keyObj) {
                return keyObj.publicKey.toString() === pubkey.toString();
              }) || message.isAccountSigner(account),
              isWritable: message.isAccountWritable(account)
            };
          });
          transaction.instructions.push(new TransactionInstruction({
            keys: keys,
            programId: message.accountKeys[instruction.programIdIndex],
            data: bs58$5.decode(instruction.data)
          }));
        });
        transaction._message = message;
        transaction._json = transaction.toJSON();
        return transaction;
      }
    }]);

    return Transaction;
  }();

  var TransactionMessage = /*#__PURE__*/function () {
    function TransactionMessage(args) {
      _classCallCheck(this, TransactionMessage);

      this.payerKey = void 0;
      this.instructions = void 0;
      this.recentBlockhash = void 0;
      this.payerKey = args.payerKey;
      this.instructions = args.instructions;
      this.recentBlockhash = args.recentBlockhash;
    }

    _createClass(TransactionMessage, [{
      key: "compileToLegacyMessage",
      value: function compileToLegacyMessage() {
        return Message.compile({
          payerKey: this.payerKey,
          recentBlockhash: this.recentBlockhash,
          instructions: this.instructions
        });
      }
    }, {
      key: "compileToV0Message",
      value: function compileToV0Message(addressLookupTableAccounts) {
        return MessageV0.compile({
          payerKey: this.payerKey,
          recentBlockhash: this.recentBlockhash,
          instructions: this.instructions,
          addressLookupTableAccounts: addressLookupTableAccounts
        });
      }
    }], [{
      key: "decompile",
      value: function decompile(message, args) {
        var header = message.header,
            compiledInstructions = message.compiledInstructions,
            recentBlockhash = message.recentBlockhash;
        var numRequiredSignatures = header.numRequiredSignatures,
            numReadonlySignedAccounts = header.numReadonlySignedAccounts,
            numReadonlyUnsignedAccounts = header.numReadonlyUnsignedAccounts;
        var numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;
        assert$1(numWritableSignedAccounts > 0, 'Message header is invalid');
        var numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;
        assert$1(numWritableUnsignedAccounts >= 0, 'Message header is invalid');
        var accountKeys = message.getAccountKeys(args);
        var payerKey = accountKeys.get(0);

        if (payerKey === undefined) {
          throw new Error('Failed to decompile message because no account keys were found');
        }

        var instructions = [];

        var _iterator14 = _createForOfIteratorHelper(compiledInstructions),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var compiledIx = _step14.value;
            var keys = [];

            var _iterator15 = _createForOfIteratorHelper(compiledIx.accountKeyIndexes),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var keyIndex = _step15.value;
                var pubkey = accountKeys.get(keyIndex);

                if (pubkey === undefined) {
                  throw new Error("Failed to find key for account key index ".concat(keyIndex));
                }

                var isSigner = keyIndex < numRequiredSignatures;
                var isWritable = void 0;

                if (isSigner) {
                  isWritable = keyIndex < numWritableSignedAccounts;
                } else if (keyIndex < accountKeys.staticAccountKeys.length) {
                  isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;
                } else {
                  isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above
                  accountKeys.accountKeysFromLookups.writable.length;
                }

                keys.push({
                  pubkey: pubkey,
                  isSigner: keyIndex < header.numRequiredSignatures,
                  isWritable: isWritable
                });
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }

            var programId = accountKeys.get(compiledIx.programIdIndex);

            if (programId === undefined) {
              throw new Error("Failed to find program id for program id index ".concat(compiledIx.programIdIndex));
            }

            instructions.push(new TransactionInstruction({
              programId: programId,
              data: toBuffer(compiledIx.data),
              keys: keys
            }));
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        return new TransactionMessage({
          payerKey: payerKey,
          instructions: instructions,
          recentBlockhash: recentBlockhash
        });
      }
    }]);

    return TransactionMessage;
  }();
  /**
   * Versioned transaction class
   */


  var VersionedTransaction = /*#__PURE__*/function () {
    function VersionedTransaction(message, signatures) {
      _classCallCheck(this, VersionedTransaction);

      this.signatures = void 0;
      this.message = void 0;

      if (signatures !== undefined) {
        assert$1(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');
        this.signatures = signatures;
      } else {
        var defaultSignatures = [];

        for (var i = 0; i < message.header.numRequiredSignatures; i++) {
          defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));
        }

        this.signatures = defaultSignatures;
      }

      this.message = message;
    }

    _createClass(VersionedTransaction, [{
      key: "version",
      get: function get() {
        return this.message.version;
      }
    }, {
      key: "serialize",
      value: function serialize() {
        var serializedMessage = this.message.serialize();
        var encodedSignaturesLength = Array();
        encodeLength(encodedSignaturesLength, this.signatures.length);
        var transactionLayout = struct([blob$1(encodedSignaturesLength.length, 'encodedSignaturesLength'), seq$1(signature(), this.signatures.length, 'signatures'), blob$1(serializedMessage.length, 'serializedMessage')]);
        var serializedTransaction = new Uint8Array(2048);
        var serializedTransactionLength = transactionLayout.encode({
          encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),
          signatures: this.signatures,
          serializedMessage: serializedMessage
        }, serializedTransaction);
        return serializedTransaction.slice(0, serializedTransactionLength);
      }
    }, {
      key: "sign",
      value: function sign(signers) {
        var _this11 = this;

        var messageData = this.message.serialize();
        var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);

        var _iterator16 = _createForOfIteratorHelper(signers),
            _step16;

        try {
          var _loop4 = function _loop4() {
            var signer = _step16.value;
            var signerIndex = signerPubkeys.findIndex(function (pubkey) {
              return pubkey.equals(signer.publicKey);
            });
            assert$1(signerIndex >= 0, "Cannot sign with non signer key ".concat(signer.publicKey.toBase58()));
            _this11.signatures[signerIndex] = _sign(messageData, signer.secretKey);
          };

          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            _loop4();
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      }
    }, {
      key: "addSignature",
      value: function addSignature(publicKey, signature) {
        assert$1(signature.byteLength === 64, 'Signature must be 64 bytes long');
        var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);
        var signerIndex = signerPubkeys.findIndex(function (pubkey) {
          return pubkey.equals(publicKey);
        });
        assert$1(signerIndex >= 0, "Can not add signature; `".concat(publicKey.toBase58(), "` is not required to sign this transaction"));
        this.signatures[signerIndex] = signature;
      }
    }], [{
      key: "deserialize",
      value: function deserialize(serializedTransaction) {
        var byteArray = _toConsumableArray(serializedTransaction);

        var signatures = [];
        var signaturesLength = decodeLength(byteArray);

        for (var i = 0; i < signaturesLength; i++) {
          signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));
        }

        var message = VersionedMessage.deserialize(new Uint8Array(byteArray));
        return new VersionedTransaction(message, signatures);
      }
    }]);

    return VersionedTransaction;
  }(); // TODO: These constants should be removed in favor of reading them out of a
  // Syscall account

  /**
   * @internal
   */


  var NUM_TICKS_PER_SECOND = 160;
  /**
   * @internal
   */

  var DEFAULT_TICKS_PER_SLOT = 64;
  /**
   * @internal
   */

  var NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;
  /**
   * @internal
   */

  var MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;
  var SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');
  var SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');
  var SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');
  var SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');
  var SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');
  var SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');
  var SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');
  var SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');
  var SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');

  var SendTransactionError = /*#__PURE__*/function (_Error4) {
    _inherits(SendTransactionError, _Error4);

    var _super6 = _createSuper(SendTransactionError);

    function SendTransactionError(_ref21) {
      var _this12;

      var action = _ref21.action,
          signature = _ref21.signature,
          transactionMessage = _ref21.transactionMessage,
          logs = _ref21.logs;

      _classCallCheck(this, SendTransactionError);

      var maybeLogsOutput = logs ? "Logs: \n".concat(JSON.stringify(logs.slice(-10), null, 2), ". ") : '';
      var guideText = '\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';
      var message;

      switch (action) {
        case 'send':
          message = "Transaction ".concat(signature, " resulted in an error. \n") + "".concat(transactionMessage, ". ") + maybeLogsOutput + guideText;
          break;

        case 'simulate':
          message = "Simulation failed. \nMessage: ".concat(transactionMessage, ". \n") + maybeLogsOutput + guideText;
          break;

        default:
          {
            message = "Unknown action '".concat(function (a) {
              return a;
            }(action), "'");
          }
      }

      _this12 = _super6.call(this, message);
      _this12.signature = void 0;
      _this12.transactionMessage = void 0;
      _this12.transactionLogs = void 0;
      _this12.signature = signature;
      _this12.transactionMessage = transactionMessage;
      _this12.transactionLogs = logs ? logs : undefined;
      return _this12;
    }

    _createClass(SendTransactionError, [{
      key: "transactionError",
      get: function get() {
        return {
          message: this.transactionMessage,
          logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined
        };
      }
      /* @deprecated Use `await getLogs()` instead */

    }, {
      key: "logs",
      get: function get() {
        var cachedLogs = this.transactionLogs;

        if (cachedLogs != null && _typeof(cachedLogs) === 'object' && 'then' in cachedLogs) {
          return undefined;
        }

        return cachedLogs;
      }
    }, {
      key: "getLogs",
      value: function () {
        var _getLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(connection) {
          var _this13 = this;

          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                if (!Array.isArray(this.transactionLogs)) {
                  this.transactionLogs = new Promise(function (resolve, reject) {
                    connection.getTransaction(_this13.signature).then(function (tx) {
                      if (tx && tx.meta && tx.meta.logMessages) {
                        var logs = tx.meta.logMessages;
                        _this13.transactionLogs = logs;
                        resolve(logs);
                      } else {
                        reject(new Error('Log messages not found'));
                      }
                    })["catch"](reject);
                  });
                }

                _context5.next = 3;
                return this.transactionLogs;

              case 3:
                return _context5.abrupt("return", _context5.sent);

              case 4:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this);
        }));

        function getLogs(_x9) {
          return _getLogs.apply(this, arguments);
        }

        return getLogs;
      }()
    }]);

    return SendTransactionError;
  }( /*#__PURE__*/_wrapNativeSuper(Error)); // Keep in sync with client/src/rpc_custom_errors.rs
  // Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/


  var SolanaJSONRPCErrorCode = {
    JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,
    JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,
    JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,
    JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,
    JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,
    JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,
    JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,
    JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,
    JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,
    JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,
    JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,
    JSON_RPC_SCAN_ERROR: -32012,
    JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,
    JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,
    JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,
    JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016
  };

  var SolanaJSONRPCError = /*#__PURE__*/function (_Error5) {
    _inherits(SolanaJSONRPCError, _Error5);

    var _super7 = _createSuper(SolanaJSONRPCError);

    function SolanaJSONRPCError(_ref22, customMessage) {
      var _this14;

      var code = _ref22.code,
          message = _ref22.message,
          data = _ref22.data;

      _classCallCheck(this, SolanaJSONRPCError);

      _this14 = _super7.call(this, customMessage != null ? "".concat(customMessage, ": ").concat(message) : message);
      _this14.code = void 0;
      _this14.data = void 0;
      _this14.code = code;
      _this14.data = data;
      _this14.name = 'SolanaJSONRPCError';
      return _this14;
    }

    return _createClass(SolanaJSONRPCError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  /**
   * Sign, send and confirm a transaction.
   *
   * If `commitment` option is not specified, defaults to 'max' commitment.
   *
   * @param {Connection} connection
   * @param {Transaction} transaction
   * @param {Array<Signer>} signers
   * @param {ConfirmOptions} [options]
   * @returns {Promise<TransactionSignature>}
   */


  function sendAndConfirmTransaction(_x10, _x11, _x12, _x13) {
    return _sendAndConfirmTransaction.apply(this, arguments);
  } // zzz


  function _sendAndConfirmTransaction() {
    _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee110(connection, transaction, signers, options) {
      var sendOptions, signature, status, nonceInstruction, nonceAccountPubkey;
      return _regeneratorRuntime().wrap(function _callee110$(_context110) {
        while (1) switch (_context110.prev = _context110.next) {
          case 0:
            sendOptions = options && {
              skipPreflight: options.skipPreflight,
              preflightCommitment: options.preflightCommitment || options.commitment,
              maxRetries: options.maxRetries,
              minContextSlot: options.minContextSlot
            };
            _context110.next = 3;
            return connection.sendTransaction(transaction, signers, sendOptions);

          case 3:
            signature = _context110.sent;

            if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {
              _context110.next = 10;
              break;
            }

            _context110.next = 7;
            return connection.confirmTransaction({
              abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
              signature: signature,
              blockhash: transaction.recentBlockhash,
              lastValidBlockHeight: transaction.lastValidBlockHeight
            }, options && options.commitment);

          case 7:
            status = _context110.sent.value;
            _context110.next = 22;
            break;

          case 10:
            if (!(transaction.minNonceContextSlot != null && transaction.nonceInfo != null)) {
              _context110.next = 18;
              break;
            }

            nonceInstruction = transaction.nonceInfo.nonceInstruction;
            nonceAccountPubkey = nonceInstruction.keys[0].pubkey;
            _context110.next = 15;
            return connection.confirmTransaction({
              abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
              minContextSlot: transaction.minNonceContextSlot,
              nonceAccountPubkey: nonceAccountPubkey,
              nonceValue: transaction.nonceInfo.nonce,
              signature: signature
            }, options && options.commitment);

          case 15:
            status = _context110.sent.value;
            _context110.next = 22;
            break;

          case 18:
            if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {
              console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');
            }

            _context110.next = 21;
            return connection.confirmTransaction(signature, options && options.commitment);

          case 21:
            status = _context110.sent.value;

          case 22:
            if (!status.err) {
              _context110.next = 26;
              break;
            }

            if (!(signature != null)) {
              _context110.next = 25;
              break;
            }

            throw new SendTransactionError({
              action: 'send',
              signature: signature,
              transactionMessage: "Status: (".concat(JSON.stringify(status), ")")
            });

          case 25:
            throw new Error("Transaction ".concat(signature, " failed (").concat(JSON.stringify(status), ")"));

          case 26:
            return _context110.abrupt("return", signature);

          case 27:
          case "end":
            return _context110.stop();
        }
      }, _callee110);
    }));
    return _sendAndConfirmTransaction.apply(this, arguments);
  }

  function sleep(ms) {
    return new Promise(function (resolve) {
      return setTimeout(resolve, ms);
    });
  }
  /**
   * @internal
   */

  /**
   * Populate a buffer of instruction data using an InstructionType
   * @internal
   */


  function encodeData(type, fields) {
    var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);
    var data = Buffer$1.alloc(allocLength);
    var layoutFields = Object.assign({
      instruction: type.index
    }, fields);
    type.layout.encode(layoutFields, data);
    return data;
  }
  /**
   * Decode instruction data buffer using an InstructionType
   * @internal
   */


  function decodeData$1(type, buffer) {
    var data;

    try {
      data = type.layout.decode(buffer);
    } catch (err) {
      throw new Error('invalid instruction; ' + err);
    }

    if (data.instruction !== type.index) {
      throw new Error("invalid instruction; instruction index mismatch ".concat(data.instruction, " != ").concat(type.index));
    }

    return data;
  }
  /**
   * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11
   *
   * @internal
   */


  var FeeCalculatorLayout = nu64$1('lamportsPerSignature');
  /**
   * Calculator for transaction fees.
   *
   * @deprecated Deprecated since Solana v1.8.0.
   */

  /**
   * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32
   *
   * @internal
   */

  var NonceAccountLayout = struct([u32('version'), u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), struct([FeeCalculatorLayout], 'feeCalculator')]);
  var NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;
  /**
   * A durable nonce is a 32 byte value encoded as a base58 string.
   */

  /**
   * NonceAccount class
   */

  var NonceAccount = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function NonceAccount(args) {
      _classCallCheck(this, NonceAccount);

      this.authorizedPubkey = void 0;
      this.nonce = void 0;
      this.feeCalculator = void 0;
      this.authorizedPubkey = args.authorizedPubkey;
      this.nonce = args.nonce;
      this.feeCalculator = args.feeCalculator;
    }
    /**
     * Deserialize NonceAccount from the account data.
     *
     * @param buffer account data
     * @return NonceAccount
     */


    _createClass(NonceAccount, null, [{
      key: "fromAccountData",
      value: function fromAccountData(buffer) {
        var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);
        return new NonceAccount({
          authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),
          nonce: new PublicKey(nonceAccount.nonce).toString(),
          feeCalculator: nonceAccount.feeCalculator
        });
      }
    }]);

    return NonceAccount;
  }();

  var encodeDecode = function encodeDecode(layout) {
    var decode = layout.decode.bind(layout);
    var encode = layout.encode.bind(layout);
    return {
      decode: decode,
      encode: encode
    };
  };

  var bigInt = function bigInt(length) {
    return function (property) {
      var layout = blob$1(length, property);

      var _encodeDecode = encodeDecode(layout),
          encode = _encodeDecode.encode,
          decode = _encodeDecode.decode;

      var bigIntLayout = layout;

      bigIntLayout.decode = function (buffer, offset) {
        var src = decode(buffer, offset);
        return toBigIntLE_1(Buffer$1.from(src));
      };

      bigIntLayout.encode = function (bigInt, buffer, offset) {
        var src = toBufferLE_1(bigInt, length);
        return encode(src, buffer, offset);
      };

      return bigIntLayout;
    };
  };

  var u64$1 = bigInt(8);
  /**
   * Create account system transaction params
   */

  /**
   * Transfer system transaction params
   */

  /**
   * Assign system transaction params
   */

  /**
   * Create account with seed system transaction params
   */

  /**
   * Create nonce account system transaction params
   */

  /**
   * Create nonce account with seed system transaction params
   */

  /**
   * Initialize nonce account system instruction params
   */

  /**
   * Advance nonce account system instruction params
   */

  /**
   * Withdraw nonce account system transaction params
   */

  /**
   * Authorize nonce account system transaction params
   */

  /**
   * Allocate account system transaction params
   */

  /**
   * Allocate account with seed system transaction params
   */

  /**
   * Assign account with seed system transaction params
   */

  /**
   * Transfer with seed system transaction params
   */

  /** Decoded transfer system transaction instruction */

  /** Decoded transferWithSeed system transaction instruction */

  /**
   * System Instruction class
   */

  var SystemInstruction = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function SystemInstruction() {
      _classCallCheck(this, SystemInstruction);
    }
    /**
     * Decode a system instruction and retrieve the instruction type.
     */


    _createClass(SystemInstruction, null, [{
      key: "decodeInstructionType",
      value: function decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        var instructionTypeLayout = u32('instruction');
        var typeIndex = instructionTypeLayout.decode(instruction.data);
        var type;

        for (var _i9 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i9 < _Object$entries.length; _i9++) {
          var _Object$entries$_i2 = _slicedToArray(_Object$entries[_i9], 2),
              ixType = _Object$entries$_i2[0],
              layout = _Object$entries$_i2[1];

          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a SystemInstruction');
        }

        return type;
      }
      /**
       * Decode a create account system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeCreateAccount",
      value: function decodeCreateAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$ = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),
            lamports = _decodeData$.lamports,
            space = _decodeData$.space,
            programId = _decodeData$.programId;

        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          lamports: lamports,
          space: space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a transfer system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeTransfer",
      value: function decodeTransfer(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$2 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),
            lamports = _decodeData$2.lamports;

        return {
          fromPubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          lamports: lamports
        };
      }
      /**
       * Decode a transfer with seed system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeTransferWithSeed",
      value: function decodeTransferWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$3 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),
            lamports = _decodeData$3.lamports,
            seed = _decodeData$3.seed,
            programId = _decodeData$3.programId;

        return {
          fromPubkey: instruction.keys[0].pubkey,
          basePubkey: instruction.keys[1].pubkey,
          toPubkey: instruction.keys[2].pubkey,
          lamports: lamports,
          seed: seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an allocate system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAllocate",
      value: function decodeAllocate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);

        var _decodeData$4 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),
            space = _decodeData$4.space;

        return {
          accountPubkey: instruction.keys[0].pubkey,
          space: space
        };
      }
      /**
       * Decode an allocate with seed system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAllocateWithSeed",
      value: function decodeAllocateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);

        var _decodeData$5 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),
            base = _decodeData$5.base,
            seed = _decodeData$5.seed,
            space = _decodeData$5.space,
            programId = _decodeData$5.programId;

        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed: seed,
          space: space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAssign",
      value: function decodeAssign(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);

        var _decodeData$6 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),
            programId = _decodeData$6.programId;

        return {
          accountPubkey: instruction.keys[0].pubkey,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode an assign with seed system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAssignWithSeed",
      value: function decodeAssignWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 1);

        var _decodeData$7 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),
            base = _decodeData$7.base,
            seed = _decodeData$7.seed,
            programId = _decodeData$7.programId;

        return {
          accountPubkey: instruction.keys[0].pubkey,
          basePubkey: new PublicKey(base),
          seed: seed,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a create account with seed system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeCreateWithSeed",
      value: function decodeCreateWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$8 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),
            base = _decodeData$8.base,
            seed = _decodeData$8.seed,
            lamports = _decodeData$8.lamports,
            space = _decodeData$8.space,
            programId = _decodeData$8.programId;

        return {
          fromPubkey: instruction.keys[0].pubkey,
          newAccountPubkey: instruction.keys[1].pubkey,
          basePubkey: new PublicKey(base),
          seed: seed,
          lamports: lamports,
          space: space,
          programId: new PublicKey(programId)
        };
      }
      /**
       * Decode a nonce initialize system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeNonceInitialize",
      value: function decodeNonceInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$9 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),
            authorized = _decodeData$9.authorized;

        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: new PublicKey(authorized)
        };
      }
      /**
       * Decode a nonce advance system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeNonceAdvance",
      value: function decodeNonceAdvance(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);
        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * Decode a nonce withdraw system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeNonceWithdraw",
      value: function decodeNonceWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);

        var _decodeData$10 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),
            lamports = _decodeData$10.lamports;

        return {
          noncePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports: lamports
        };
      }
      /**
       * Decode a nonce authorize system instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeNonceAuthorize",
      value: function decodeNonceAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$11 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),
            authorized = _decodeData$11.authorized;

        return {
          noncePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[1].pubkey,
          newAuthorizedPubkey: new PublicKey(authorized)
        };
      }
      /**
       * @internal
       */

    }, {
      key: "checkProgramId",
      value: function checkProgramId(programId) {
        if (!programId.equals(SystemProgram.programId)) {
          throw new Error('invalid instruction; programId is not SystemProgram');
        }
      }
      /**
       * @internal
       */

    }, {
      key: "checkKeyLength",
      value: function checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error("invalid instruction; found ".concat(keys.length, " keys, expected at least ").concat(expectedLength));
        }
      }
    }]);

    return SystemInstruction;
  }();
  /**
   * An enumeration of valid SystemInstructionType's
   */

  /**
   * An enumeration of valid system InstructionType's
   * @internal
   */


  var SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({
    Create: {
      index: 0,
      layout: struct([u32('instruction'), ns64('lamports'), ns64('space'), publicKey('programId')])
    },
    Assign: {
      index: 1,
      layout: struct([u32('instruction'), publicKey('programId')])
    },
    Transfer: {
      index: 2,
      layout: struct([u32('instruction'), u64$1('lamports')])
    },
    CreateWithSeed: {
      index: 3,
      layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), ns64('lamports'), ns64('space'), publicKey('programId')])
    },
    AdvanceNonceAccount: {
      index: 4,
      layout: struct([u32('instruction')])
    },
    WithdrawNonceAccount: {
      index: 5,
      layout: struct([u32('instruction'), ns64('lamports')])
    },
    InitializeNonceAccount: {
      index: 6,
      layout: struct([u32('instruction'), publicKey('authorized')])
    },
    AuthorizeNonceAccount: {
      index: 7,
      layout: struct([u32('instruction'), publicKey('authorized')])
    },
    Allocate: {
      index: 8,
      layout: struct([u32('instruction'), ns64('space')])
    },
    AllocateWithSeed: {
      index: 9,
      layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), ns64('space'), publicKey('programId')])
    },
    AssignWithSeed: {
      index: 10,
      layout: struct([u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])
    },
    TransferWithSeed: {
      index: 11,
      layout: struct([u32('instruction'), u64$1('lamports'), rustString('seed'), publicKey('programId')])
    },
    UpgradeNonceAccount: {
      index: 12,
      layout: struct([u32('instruction')])
    }
  });
  /**
   * Factory class for transactions to interact with the System program
   */

  var SystemProgram = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function SystemProgram() {
      _classCallCheck(this, SystemProgram);
    }
    /**
     * Public key that identifies the System program
     */

    /**
     * Generate a transaction instruction that creates a new account
     */


    _createClass(SystemProgram, null, [{
      key: "createAccount",
      value: function createAccount(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;
        var data = encodeData(type, {
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer(params.programId.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.newAccountPubkey,
            isSigner: true,
            isWritable: true
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction instruction that transfers lamports from one account to another
       */

    }, {
      key: "transfer",
      value: function transfer(params) {
        var data;
        var keys;

        if ('basePubkey' in params) {
          var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;
          data = encodeData(_type, {
            lamports: BigInt(params.lamports),
            seed: params.seed,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        } else {
          var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
          data = encodeData(_type2, {
            lamports: BigInt(params.lamports)
          });
          keys = [{
            pubkey: params.fromPubkey,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction instruction that assigns an account to a program
       */

    }, {
      key: "assign",
      value: function assign(params) {
        var data;
        var keys;

        if ('basePubkey' in params) {
          var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;
          data = encodeData(_type3, {
            base: toBuffer(params.basePubkey.toBuffer()),
            seed: params.seed,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;
          data = encodeData(_type4, {
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction instruction that creates a new account at
       *   an address generated with `from`, a seed, and programId
       */

    }, {
      key: "createAccountWithSeed",
      value: function createAccountWithSeed(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;
        var data = encodeData(type, {
          base: toBuffer(params.basePubkey.toBuffer()),
          seed: params.seed,
          lamports: params.lamports,
          space: params.space,
          programId: toBuffer(params.programId.toBuffer())
        });
        var keys = [{
          pubkey: params.fromPubkey,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: params.newAccountPubkey,
          isSigner: false,
          isWritable: true
        }];

        if (!params.basePubkey.equals(params.fromPubkey)) {
          keys.push({
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          });
        }

        return new TransactionInstruction({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction that creates a new Nonce account
       */

    }, {
      key: "createNonceAccount",
      value: function createNonceAccount(params) {
        var transaction = new Transaction();

        if ('basePubkey' in params && 'seed' in params) {
          transaction.add(SystemProgram.createAccountWithSeed({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            basePubkey: params.basePubkey,
            seed: params.seed,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        } else {
          transaction.add(SystemProgram.createAccount({
            fromPubkey: params.fromPubkey,
            newAccountPubkey: params.noncePubkey,
            lamports: params.lamports,
            space: NONCE_ACCOUNT_LENGTH,
            programId: this.programId
          }));
        }

        var initParams = {
          noncePubkey: params.noncePubkey,
          authorizedPubkey: params.authorizedPubkey
        };
        transaction.add(this.nonceInitialize(initParams));
        return transaction;
      }
      /**
       * Generate an instruction to initialize a Nonce account
       */

    }, {
      key: "nonceInitialize",
      value: function nonceInitialize(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;
        var data = encodeData(type, {
          authorized: toBuffer(params.authorizedPubkey.toBuffer())
        });
        var instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate an instruction to advance the nonce in a Nonce account
       */

    }, {
      key: "nonceAdvance",
      value: function nonceAdvance(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;
        var data = encodeData(type);
        var instructionData = {
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a transaction instruction that withdraws lamports from a Nonce account
       */

    }, {
      key: "nonceWithdraw",
      value: function nonceWithdraw(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;
        var data = encodeData(type, {
          lamports: params.lamports
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.toPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction instruction that authorizes a new PublicKey as the authority
       * on a Nonce account.
       */

    }, {
      key: "nonceAuthorize",
      value: function nonceAuthorize(params) {
        var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;
        var data = encodeData(type, {
          authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: params.noncePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction instruction that allocates space in an account without funding
       */

    }, {
      key: "allocate",
      value: function allocate(params) {
        var data;
        var keys;

        if ('basePubkey' in params) {
          var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;
          data = encodeData(_type5, {
            base: toBuffer(params.basePubkey.toBuffer()),
            seed: params.seed,
            space: params.space,
            programId: toBuffer(params.programId.toBuffer())
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: params.basePubkey,
            isSigner: true,
            isWritable: false
          }];
        } else {
          var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;
          data = encodeData(_type6, {
            space: params.space
          });
          keys = [{
            pubkey: params.accountPubkey,
            isSigner: true,
            isWritable: true
          }];
        }

        return new TransactionInstruction({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
    }]);

    return SystemProgram;
  }();

  SystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the
  // rest of the Transaction fields
  //
  // TODO: replace 300 with a proper constant for the size of the other
  // Transaction fields

  var CHUNK_SIZE$3 = PACKET_DATA_SIZE - 300;
  /**
   * Program loader interface
   */

  var Loader = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function Loader() {
      _classCallCheck(this, Loader);
    }
    /**
     * Amount of program data placed in each load Transaction
     */

    /**
     * Minimum number of signatures required to load a program not including
     * retries
     *
     * Can be used to calculate transaction fees
     */


    _createClass(Loader, null, [{
      key: "getMinNumSignatures",
      value: function getMinNumSignatures(dataLength) {
        return 2 * ( // Every transaction requires two signatures (payer + program)
        Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction
        1) // Add one for Finalize transaction
        ;
      }
      /**
       * Loads a generic program
       *
       * @param connection The connection to use
       * @param payer System account that pays to load the program
       * @param program Account to load the program into
       * @param programId Public key that identifies the loader
       * @param data Program octets
       * @return true if program was loaded successfully, false if program was already loaded
       */

    }, {
      key: "load",
      value: function () {
        var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(connection, payer, program, programId, data) {
          var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2, deployCommitment, finalizeSignature, _yield$connection$con2, context, value, currentSlot;

          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return connection.getMinimumBalanceForRentExemption(data.length);

              case 2:
                balanceNeeded = _context6.sent;
                _context6.next = 5;
                return connection.getAccountInfo(program.publicKey, 'confirmed');

              case 5:
                programInfo = _context6.sent;
                transaction = null;

                if (!(programInfo !== null)) {
                  _context6.next = 16;
                  break;
                }

                if (!programInfo.executable) {
                  _context6.next = 11;
                  break;
                }

                console.error('Program load failed, account is already executable');
                return _context6.abrupt("return", false);

              case 11:
                if (programInfo.data.length !== data.length) {
                  transaction = transaction || new Transaction();
                  transaction.add(SystemProgram.allocate({
                    accountPubkey: program.publicKey,
                    space: data.length
                  }));
                }

                if (!programInfo.owner.equals(programId)) {
                  transaction = transaction || new Transaction();
                  transaction.add(SystemProgram.assign({
                    accountPubkey: program.publicKey,
                    programId: programId
                  }));
                }

                if (programInfo.lamports < balanceNeeded) {
                  transaction = transaction || new Transaction();
                  transaction.add(SystemProgram.transfer({
                    fromPubkey: payer.publicKey,
                    toPubkey: program.publicKey,
                    lamports: balanceNeeded - programInfo.lamports
                  }));
                }

                _context6.next = 17;
                break;

              case 16:
                transaction = new Transaction().add(SystemProgram.createAccount({
                  fromPubkey: payer.publicKey,
                  newAccountPubkey: program.publicKey,
                  lamports: balanceNeeded > 0 ? balanceNeeded : 1,
                  space: data.length,
                  programId: programId
                }));

              case 17:
                if (!(transaction !== null)) {
                  _context6.next = 20;
                  break;
                }

                _context6.next = 20;
                return sendAndConfirmTransaction(connection, transaction, [payer, program], {
                  commitment: 'confirmed'
                });

              case 20:
                dataLayout = struct([u32('instruction'), u32('offset'), u32('bytesLength'), u32('bytesLengthPadding'), seq$1(u8('byte'), offset$1(u32(), -8), 'bytes')]);
                chunkSize = Loader.chunkSize;
                offset = 0;
                array = data;
                transactions = [];

              case 25:
                if (!(array.length > 0)) {
                  _context6.next = 39;
                  break;
                }

                bytes = array.slice(0, chunkSize);
                _data = Buffer$1.alloc(chunkSize + 16);
                dataLayout.encode({
                  instruction: 0,
                  // Load instruction
                  offset: offset,
                  bytes: bytes,
                  bytesLength: 0,
                  bytesLengthPadding: 0
                }, _data);
                _transaction = new Transaction().add({
                  keys: [{
                    pubkey: program.publicKey,
                    isSigner: true,
                    isWritable: true
                  }],
                  programId: programId,
                  data: _data
                });
                transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {
                  commitment: 'confirmed'
                })); // Delay between sends in an attempt to reduce rate limit errors

                if (!connection._rpcEndpoint.includes('solana.com')) {
                  _context6.next = 35;
                  break;
                }

                REQUESTS_PER_SECOND = 4;
                _context6.next = 35;
                return sleep(1000 / REQUESTS_PER_SECOND);

              case 35:
                offset += chunkSize;
                array = array.slice(chunkSize);
                _context6.next = 25;
                break;

              case 39:
                _context6.next = 41;
                return Promise.all(transactions);

              case 41:
                _dataLayout = struct([u32('instruction')]);
                _data2 = Buffer$1.alloc(_dataLayout.span);

                _dataLayout.encode({
                  instruction: 1 // Finalize instruction

                }, _data2);

                _transaction2 = new Transaction().add({
                  keys: [{
                    pubkey: program.publicKey,
                    isSigner: true,
                    isWritable: true
                  }, {
                    pubkey: SYSVAR_RENT_PUBKEY,
                    isSigner: false,
                    isWritable: false
                  }],
                  programId: programId,
                  data: _data2
                });
                deployCommitment = 'processed';
                _context6.next = 48;
                return connection.sendTransaction(_transaction2, [payer, program], {
                  preflightCommitment: deployCommitment
                });

              case 48:
                finalizeSignature = _context6.sent;
                _context6.next = 51;
                return connection.confirmTransaction({
                  signature: finalizeSignature,
                  lastValidBlockHeight: _transaction2.lastValidBlockHeight,
                  blockhash: _transaction2.recentBlockhash
                }, deployCommitment);

              case 51:
                _yield$connection$con2 = _context6.sent;
                context = _yield$connection$con2.context;
                value = _yield$connection$con2.value;

                if (!value.err) {
                  _context6.next = 56;
                  break;
                }

                throw new Error("Transaction ".concat(finalizeSignature, " failed (").concat(JSON.stringify(value), ")"));

              case 56:

                _context6.prev = 57;
                _context6.next = 60;
                return connection.getSlot({
                  commitment: deployCommitment
                });

              case 60:
                currentSlot = _context6.sent;

                if (!(currentSlot > context.slot)) {
                  _context6.next = 63;
                  break;
                }

                return _context6.abrupt("break", 71);

              case 63:
                _context6.next = 67;
                break;

              case 65:
                _context6.prev = 65;
                _context6.t0 = _context6["catch"](57);

              case 67:
                _context6.next = 69;
                return new Promise(function (resolve) {
                  return setTimeout(resolve, Math.round(MS_PER_SLOT / 2));
                });

              case 69:
                _context6.next = 56;
                break;

              case 71:
                return _context6.abrupt("return", true);

              case 72:
              case "end":
                return _context6.stop();
            }
          }, _callee6, null, [[57, 65]]);
        }));

        function load(_x14, _x15, _x16, _x17, _x18) {
          return _load.apply(this, arguments);
        }

        return load;
      }()
    }]);

    return Loader;
  }();

  Loader.chunkSize = CHUNK_SIZE$3;
  /**
   * @deprecated Deprecated since Solana v1.17.20.
   */

  var BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');
  /**
   * Factory class for transactions to interact with a program loader
   *
   * @deprecated Deprecated since Solana v1.17.20.
   */

  var BpfLoader = /*#__PURE__*/function () {
    function BpfLoader() {
      _classCallCheck(this, BpfLoader);
    }

    _createClass(BpfLoader, null, [{
      key: "getMinNumSignatures",
      value:
      /**
       * Minimum number of signatures required to load a program not including
       * retries
       *
       * Can be used to calculate transaction fees
       */
      function getMinNumSignatures(dataLength) {
        return Loader.getMinNumSignatures(dataLength);
      }
      /**
       * Load a SBF program
       *
       * @param connection The connection to use
       * @param payer Account that will pay program loading fees
       * @param program Account to load the program into
       * @param elf The entire ELF containing the SBF program
       * @param loaderProgramId The program id of the BPF loader to use
       * @return true if program was loaded successfully, false if program was already loaded
       */

    }, {
      key: "load",
      value: function load(connection, payer, program, elf, loaderProgramId) {
        return Loader.load(connection, payer, program, loaderProgramId, elf);
      }
    }]);

    return BpfLoader;
  }();

  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var fastStableStringify$1;
  var hasRequiredFastStableStringify;

  function requireFastStableStringify() {
    if (hasRequiredFastStableStringify) return fastStableStringify$1;
    hasRequiredFastStableStringify = 1;
    var objToString = Object.prototype.toString;

    var objKeys = Object.keys || function (obj) {
      var keys = [];

      for (var name in obj) {
        keys.push(name);
      }

      return keys;
    };

    function stringify(val, isArrayProp) {
      var i, max, str, keys, key, propVal, toStr;

      if (val === true) {
        return "true";
      }

      if (val === false) {
        return "false";
      }

      switch (_typeof(val)) {
        case "object":
          if (val === null) {
            return null;
          } else if (val.toJSON && typeof val.toJSON === "function") {
            return stringify(val.toJSON(), isArrayProp);
          } else {
            toStr = objToString.call(val);

            if (toStr === "[object Array]") {
              str = '[';
              max = val.length - 1;

              for (i = 0; i < max; i++) {
                str += stringify(val[i], true) + ',';
              }

              if (max > -1) {
                str += stringify(val[i], true);
              }

              return str + ']';
            } else if (toStr === "[object Object]") {
              // only object is left
              keys = objKeys(val).sort();
              max = keys.length;
              str = "";
              i = 0;

              while (i < max) {
                key = keys[i];
                propVal = stringify(val[key], false);

                if (propVal !== undefined) {
                  if (str) {
                    str += ',';
                  }

                  str += JSON.stringify(key) + ':' + propVal;
                }

                i++;
              }

              return '{' + str + '}';
            } else {
              return JSON.stringify(val);
            }
          }

        case "function":
        case "undefined":
          return isArrayProp ? null : undefined;

        case "string":
          return JSON.stringify(val);

        default:
          return isFinite(val) ? val : null;
      }
    }

    fastStableStringify$1 = function fastStableStringify$1(val) {
      var returnVal = stringify(val, false);

      if (returnVal !== undefined) {
        return '' + returnVal;
      }
    };

    return fastStableStringify$1;
  }

  var fastStableStringifyExports = /*@__PURE__*/requireFastStableStringify();
  var fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);
  var MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.

  function trailingZeros(n) {
    var trailingZeros = 0;

    while (n > 1) {
      n /= 2;
      trailingZeros++;
    }

    return trailingZeros;
  } // Returns the smallest power of two greater than or equal to n


  function nextPowerOfTwo(n) {
    if (n === 0) return 1;
    n--;
    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    n |= n >> 32;
    return n + 1;
  }
  /**
   * Epoch schedule
   * (see https://docs.solana.com/terminology#epoch)
   * Can be retrieved with the {@link Connection.getEpochSchedule} method
   */


  var EpochSchedule = /*#__PURE__*/function () {
    function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {
      _classCallCheck(this, EpochSchedule);

      /** The maximum number of slots in each epoch */
      this.slotsPerEpoch = void 0;
      /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */

      this.leaderScheduleSlotOffset = void 0;
      /** Indicates whether epochs start short and grow */

      this.warmup = void 0;
      /** The first epoch with `slotsPerEpoch` slots */

      this.firstNormalEpoch = void 0;
      /** The first slot of `firstNormalEpoch` */

      this.firstNormalSlot = void 0;
      this.slotsPerEpoch = slotsPerEpoch;
      this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;
      this.warmup = warmup;
      this.firstNormalEpoch = firstNormalEpoch;
      this.firstNormalSlot = firstNormalSlot;
    }

    _createClass(EpochSchedule, [{
      key: "getEpoch",
      value: function getEpoch(slot) {
        return this.getEpochAndSlotIndex(slot)[0];
      }
    }, {
      key: "getEpochAndSlotIndex",
      value: function getEpochAndSlotIndex(slot) {
        if (slot < this.firstNormalSlot) {
          var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;
          var epochLen = this.getSlotsInEpoch(epoch);
          var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);
          return [epoch, slotIndex];
        } else {
          var normalSlotIndex = slot - this.firstNormalSlot;
          var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);

          var _epoch = this.firstNormalEpoch + normalEpochIndex;

          var _slotIndex = normalSlotIndex % this.slotsPerEpoch;

          return [_epoch, _slotIndex];
        }
      }
    }, {
      key: "getFirstSlotInEpoch",
      value: function getFirstSlotInEpoch(epoch) {
        if (epoch <= this.firstNormalEpoch) {
          return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;
        } else {
          return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;
        }
      }
    }, {
      key: "getLastSlotInEpoch",
      value: function getLastSlotInEpoch(epoch) {
        return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;
      }
    }, {
      key: "getSlotsInEpoch",
      value: function getSlotsInEpoch(epoch) {
        if (epoch < this.firstNormalEpoch) {
          return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));
        } else {
          return this.slotsPerEpoch;
        }
      }
    }]);

    return EpochSchedule;
  }();

  var fetchImpl = globalThis.fetch;

  var RpcWebSocketClient = /*#__PURE__*/function (_CommonClient) {
    _inherits(RpcWebSocketClient, _CommonClient);

    var _super8 = _createSuper(RpcWebSocketClient);

    function RpcWebSocketClient(address, options, generate_request_id) {
      var _this15;

      _classCallCheck(this, RpcWebSocketClient);

      var webSocketFactory = function webSocketFactory(url) {
        var rpc = WebSocket$1(url, _objectSpread2({
          autoconnect: true,
          max_reconnects: 5,
          reconnect: true,
          reconnect_interval: 1000
        }, options));

        if ('socket' in rpc) {
          _this15.underlyingSocket = rpc.socket;
        } else {
          _this15.underlyingSocket = rpc;
        }

        return rpc;
      };

      _this15 = _super8.call(this, webSocketFactory, address, options, generate_request_id);
      _this15.underlyingSocket = void 0;
      return _this15;
    }

    _createClass(RpcWebSocketClient, [{
      key: "call",
      value: function call() {
        var _this$underlyingSocke;

        var readyState = (_this$underlyingSocke = this.underlyingSocket) === null || _this$underlyingSocke === void 0 ? void 0 : _this$underlyingSocke.readyState;

        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        if (readyState === 1
        /* WebSocket.OPEN */
        ) {
          var _get2;

          return (_get2 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), "call", this)).call.apply(_get2, [this].concat(args));
        }

        return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));
      }
    }, {
      key: "notify",
      value: function notify() {
        var _this$underlyingSocke2;

        var readyState = (_this$underlyingSocke2 = this.underlyingSocket) === null || _this$underlyingSocke2 === void 0 ? void 0 : _this$underlyingSocke2.readyState;

        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (readyState === 1
        /* WebSocket.OPEN */
        ) {
          var _get3;

          return (_get3 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), "notify", this)).call.apply(_get3, [this].concat(args));
        }

        return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));
      }
    }]);

    return RpcWebSocketClient;
  }(CommonClient);
  /**
   * @internal
   */

  /**
   * Decode account data buffer using an AccountType
   * @internal
   */


  function decodeData(type, data) {
    var decoded;

    try {
      decoded = type.layout.decode(data);
    } catch (err) {
      throw new Error('invalid instruction; ' + err);
    }

    if (decoded.typeIndex !== type.index) {
      throw new Error("invalid account data; account type mismatch ".concat(decoded.typeIndex, " != ").concat(type.index));
    }

    return decoded;
  } /// The serialized size of lookup table metadata


  var LOOKUP_TABLE_META_SIZE = 56;

  var AddressLookupTableAccount = /*#__PURE__*/function () {
    function AddressLookupTableAccount(args) {
      _classCallCheck(this, AddressLookupTableAccount);

      this.key = void 0;
      this.state = void 0;
      this.key = args.key;
      this.state = args.state;
    }

    _createClass(AddressLookupTableAccount, [{
      key: "isActive",
      value: function isActive() {
        var U64_MAX = BigInt('0xffffffffffffffff');
        return this.state.deactivationSlot === U64_MAX;
      }
    }], [{
      key: "deserialize",
      value: function deserialize(accountData) {
        var meta = decodeData(LookupTableMetaLayout, accountData);
        var serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;
        assert$1(serializedAddressesLen >= 0, 'lookup table is invalid');
        assert$1(serializedAddressesLen % 32 === 0, 'lookup table is invalid');
        var numSerializedAddresses = serializedAddressesLen / 32;

        var _BufferLayout$struct$ = struct([seq$1(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE)),
            addresses = _BufferLayout$struct$.addresses;

        return {
          deactivationSlot: meta.deactivationSlot,
          lastExtendedSlot: meta.lastExtendedSlot,
          lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,
          authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,
          addresses: addresses.map(function (address) {
            return new PublicKey(address);
          })
        };
      }
    }]);

    return AddressLookupTableAccount;
  }();

  var LookupTableMetaLayout = {
    index: 1,
    layout: struct([u32('typeIndex'), u64$1('deactivationSlot'), nu64$1('lastExtendedSlot'), u8('lastExtendedStartIndex'), u8(), // option
    seq$1(publicKey(), offset$1(u8(), -1), 'authority')])
  };
  var URL_RE = /^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i;

  function makeWebsocketUrl(endpoint) {
    var matches = endpoint.match(URL_RE);

    if (matches == null) {
      throw TypeError("Failed to validate endpoint URL `".concat(endpoint, "`"));
    }

    var _matches = _slicedToArray(matches, 4);
        _matches[0];
        var // eslint-disable-line @typescript-eslint/no-unused-vars
    hostish = _matches[1],
        portWithColon = _matches[2],
        rest = _matches[3];

    var protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';
    var startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);
    var websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint
    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming
    // we're directly trying to connect to agave-validator's ws listening port.
    // When the endpoint omits the port, we're connecting to the protocol
    // default ports: http(80) or https(443) and it's assumed we're behind a reverse
    // proxy which manages WebSocket upgrade and backend port redirection.
    startPort == null ? '' : ":".concat(startPort + 1);
    return "".concat(protocol, "//").concat(hostish).concat(websocketPort).concat(rest);
  }

  var PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {
    return new PublicKey(value);
  });
  var RawAccountDataResult = tuple([string(), literal('base64')]);
  var BufferFromRawAccountData = coerce(instance(Buffer$1), RawAccountDataResult, function (value) {
    return Buffer$1.from(value[0], 'base64');
  });
  /**
   * Attempt to use a recent blockhash for up to 30 seconds
   * @internal
   */

  var BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;
  /**
   * HACK.
   * Copied from rpc-websockets/dist/lib/client.
   * Otherwise, `yarn build` fails with:
   * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d
   */

  /** @internal */

  /** @internal */

  /** @internal */

  /** @internal */

  /** @internal */

  /**
   * @internal
   * Every subscription contains the args used to open the subscription with
   * the server, and a list of callers interested in notifications.
   */

  /**
   * @internal
   * A subscription may be in various states of connectedness. Only when it is
   * fully connected will it have a server subscription id associated with it.
   * This id can be returned to the server to unsubscribe the client entirely.
   */

  /**
   * A type that encapsulates a subscription's RPC method
   * names and notification (callback) signature.
   */

  /**
   * @internal
   * Utility type that keeps tagged unions intact while omitting properties.
   */

  /**
   * @internal
   * This type represents a single subscribable 'topic.' It's made up of:
   *
   * - The args used to open the subscription with the server,
   * - The state of the subscription, in terms of its connectedness, and
   * - The set of callbacks to call when the server publishes notifications
   *
   * This record gets indexed by `SubscriptionConfigHash` and is used to
   * set up subscriptions, fan out notifications, and track subscription state.
   */

  /**
   * @internal
   */

  /**
   * Extra contextual information for RPC responses
   */

  /**
   * Options for sending transactions
   */

  /**
   * Options for confirming transactions
   */

  /**
   * Options for getConfirmedSignaturesForAddress2
   */

  /**
   * Options for getSignaturesForAddress
   */

  /**
   * RPC Response with extra contextual information
   */

  /**
   * A strategy for confirming transactions that uses the last valid
   * block height for a given blockhash to check for transaction expiration.
   */

  /**
   * A strategy for confirming durable nonce transactions.
   */

  /**
   * Properties shared by all transaction confirmation strategies
   */

  /**
   * This type represents all transaction confirmation strategies
   */

  /* @internal */

  function assertEndpointUrl(putativeUrl) {
    if (/^https?:/.test(putativeUrl) === false) {
      throw new TypeError('Endpoint URL must start with `http:` or `https:`.');
    }

    return putativeUrl;
  }
  /** @internal */


  function extractCommitmentFromConfig(commitmentOrConfig) {
    var commitment;
    var config;

    if (typeof commitmentOrConfig === 'string') {
      commitment = commitmentOrConfig;
    } else if (commitmentOrConfig) {
      var specifiedCommitment = commitmentOrConfig.commitment,
          specifiedConfig = _objectWithoutProperties(commitmentOrConfig, _excluded);

      commitment = specifiedCommitment;
      config = specifiedConfig;
    }

    return {
      commitment: commitment,
      config: config
    };
  }
  /**
   * @internal
   */


  function applyDefaultMemcmpEncodingToFilters(filters) {
    return filters.map(function (filter) {
      var _filter$memcmp$encodi;

      return 'memcmp' in filter ? _objectSpread2(_objectSpread2({}, filter), {}, {
        memcmp: _objectSpread2(_objectSpread2({}, filter.memcmp), {}, {
          encoding: (_filter$memcmp$encodi = filter.memcmp.encoding) !== null && _filter$memcmp$encodi !== void 0 ? _filter$memcmp$encodi : 'base58'
        })
      }) : filter;
    });
  }
  /**
   * @internal
   */


  function createRpcResult(result) {
    return union([type({
      jsonrpc: literal('2.0'),
      id: string(),
      result: result
    }), type({
      jsonrpc: literal('2.0'),
      id: string(),
      error: type({
        code: unknown(),
        message: string(),
        data: optional(any())
      })
    })]);
  }

  var UnknownRpcResult = createRpcResult(unknown());
  /**
   * @internal
   */

  function jsonRpcResult(schema) {
    return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {
      if ('error' in value) {
        return value;
      } else {
        return _objectSpread2(_objectSpread2({}, value), {}, {
          result: _create(value.result, schema)
        });
      }
    });
  }
  /**
   * @internal
   */


  function jsonRpcResultAndContext(value) {
    return jsonRpcResult(type({
      context: type({
        slot: number$1()
      }),
      value: value
    }));
  }
  /**
   * @internal
   */


  function notificationResultAndContext(value) {
    return type({
      context: type({
        slot: number$1()
      }),
      value: value
    });
  }
  /**
   * @internal
   */


  function versionedMessageFromResponse(version, response) {
    if (version === 0) {
      return new MessageV0({
        header: response.header,
        staticAccountKeys: response.accountKeys.map(function (accountKey) {
          return new PublicKey(accountKey);
        }),
        recentBlockhash: response.recentBlockhash,
        compiledInstructions: response.instructions.map(function (ix) {
          return {
            programIdIndex: ix.programIdIndex,
            accountKeyIndexes: ix.accounts,
            data: bs58$5.decode(ix.data)
          };
        }),
        addressTableLookups: response.addressTableLookups
      });
    } else {
      return new Message(response);
    }
  }
  /**
   * The level of commitment desired when querying state
   * <pre>
   *   'processed': Query the most recent block which has reached 1 confirmation by the connected node
   *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster
   *   'finalized': Query the most recent block which has been finalized by the cluster
   * </pre>
   */
  // Deprecated as of v1.5.5

  /**
   * A subset of Commitment levels, which are at least optimistically confirmed
   * <pre>
   *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster
   *   'finalized': Query the most recent block which has been finalized by the cluster
   * </pre>
   */

  /**
   * Filter for largest accounts query
   * <pre>
   *   'circulating':    Return the largest accounts that are part of the circulating supply
   *   'nonCirculating': Return the largest accounts that are not part of the circulating supply
   * </pre>
   */

  /**
   * Configuration object for changing `getAccountInfo` query behavior
   */

  /**
   * Configuration object for changing `getBalance` query behavior
   */

  /**
   * Configuration object for changing `getBlock` query behavior
   */

  /**
   * Configuration object for changing `getBlock` query behavior
   */

  /**
   * Configuration object for changing `getStakeMinimumDelegation` query behavior
   */

  /**
   * Configuration object for changing `getBlockHeight` query behavior
   */

  /**
   * Configuration object for changing `getEpochInfo` query behavior
   */

  /**
   * Configuration object for changing `getInflationReward` query behavior
   */

  /**
   * Configuration object for changing `getLatestBlockhash` query behavior
   */

  /**
   * Configuration object for changing `isBlockhashValid` query behavior
   */

  /**
   * Configuration object for changing `getSlot` query behavior
   */

  /**
   * Configuration object for changing `getSlotLeader` query behavior
   */

  /**
   * Configuration object for changing `getTransaction` query behavior
   */

  /**
   * Configuration object for changing `getTransaction` query behavior
   */

  /**
   * Configuration object for changing `getLargestAccounts` query behavior
   */

  /**
   * Configuration object for changing `getSupply` request behavior
   */

  /**
   * Configuration object for changing query behavior
   */

  /**
   * Information describing a cluster node
   */

  /**
   * Information describing a vote account
   */

  /**
   * A collection of cluster vote accounts
   */

  /**
   * Network Inflation
   * (see https://docs.solana.com/implemented-proposals/ed_overview)
   */


  var GetInflationGovernorResult = type({
    foundation: number$1(),
    foundationTerm: number$1(),
    initial: number$1(),
    taper: number$1(),
    terminal: number$1()
  });
  /**
   * The inflation reward for an epoch
   */

  /**
   * Expected JSON RPC response for the "getInflationReward" message
   */

  var GetInflationRewardResult = jsonRpcResult(array(nullable(type({
    epoch: number$1(),
    effectiveSlot: number$1(),
    amount: number$1(),
    postBalance: number$1(),
    commission: optional(nullable(number$1()))
  }))));
  /**
   * Configuration object for changing `getRecentPrioritizationFees` query behavior
   */

  /**
   * Expected JSON RPC response for the "getRecentPrioritizationFees" message
   */

  var GetRecentPrioritizationFeesResult = array(type({
    slot: number$1(),
    prioritizationFee: number$1()
  }));
  /**
   * Expected JSON RPC response for the "getInflationRate" message
   */

  var GetInflationRateResult = type({
    total: number$1(),
    validator: number$1(),
    foundation: number$1(),
    epoch: number$1()
  });
  /**
   * Information about the current epoch
   */

  var GetEpochInfoResult = type({
    epoch: number$1(),
    slotIndex: number$1(),
    slotsInEpoch: number$1(),
    absoluteSlot: number$1(),
    blockHeight: optional(number$1()),
    transactionCount: optional(number$1())
  });
  var GetEpochScheduleResult = type({
    slotsPerEpoch: number$1(),
    leaderScheduleSlotOffset: number$1(),
    warmup: _boolean(),
    firstNormalEpoch: number$1(),
    firstNormalSlot: number$1()
  });
  /**
   * Leader schedule
   * (see https://docs.solana.com/terminology#leader-schedule)
   */

  var GetLeaderScheduleResult = record(string(), array(number$1()));
  /**
   * Transaction error or null
   */

  var TransactionErrorResult = nullable(union([type({}), string()]));
  /**
   * Signature status for a transaction
   */

  var SignatureStatusResult = type({
    err: TransactionErrorResult
  });
  /**
   * Transaction signature received notification
   */

  var SignatureReceivedResult = literal('receivedSignature');
  /**
   * Version info for a node
   */

  var VersionResult = type({
    'solana-core': string(),
    'feature-set': optional(number$1())
  });
  var ParsedInstructionStruct = type({
    program: string(),
    programId: PublicKeyFromString,
    parsed: unknown()
  });
  var PartiallyDecodedInstructionStruct = type({
    programId: PublicKeyFromString,
    accounts: array(PublicKeyFromString),
    data: string()
  });
  var SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({
    err: nullable(union([type({}), string()])),
    logs: nullable(array(string())),
    accounts: optional(nullable(array(nullable(type({
      executable: _boolean(),
      owner: string(),
      lamports: number$1(),
      data: array(string()),
      rentEpoch: optional(number$1())
    }))))),
    unitsConsumed: optional(number$1()),
    returnData: optional(nullable(type({
      programId: string(),
      data: tuple([string(), literal('base64')])
    }))),
    innerInstructions: optional(nullable(array(type({
      index: number$1(),
      instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))
    }))))
  }));
  /**
   * Metadata for a parsed confirmed transaction on the ledger
   *
   * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.
   */

  /**
   * Collection of addresses loaded by a transaction using address table lookups
   */

  /**
   * Metadata for a parsed transaction on the ledger
   */

  /**
   * Metadata for a confirmed transaction on the ledger
   */

  /**
   * A processed transaction from the RPC API
   */

  /**
   * A processed transaction from the RPC API
   */

  /**
   * A processed transaction message from the RPC API
   */

  /**
   * A confirmed transaction on the ledger
   *
   * @deprecated Deprecated since RPC v1.8.0.
   */

  /**
   * A partially decoded transaction instruction
   */

  /**
   * A parsed transaction message account
   */

  /**
   * A parsed transaction instruction
   */

  /**
   * A parsed address table lookup
   */

  /**
   * A parsed transaction message
   */

  /**
   * A parsed transaction
   */

  /**
   * A parsed and confirmed transaction on the ledger
   *
   * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.
   */

  /**
   * A parsed transaction on the ledger with meta
   */

  /**
   * A processed block fetched from the RPC API
   */

  /**
   * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`
   */

  /**
   * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`
   */

  /**
   * A block with parsed transactions
   */

  /**
   * A block with parsed transactions where the `transactionDetails` mode is `accounts`
   */

  /**
   * A block with parsed transactions where the `transactionDetails` mode is `none`
   */

  /**
   * A processed block fetched from the RPC API
   */

  /**
   * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`
   */

  /**
   * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`
   */

  /**
   * A confirmed block on the ledger
   *
   * @deprecated Deprecated since RPC v1.8.0.
   */

  /**
   * A Block on the ledger with signatures only
   */

  /**
   * recent block production information
   */

  /**
   * Expected JSON RPC response for the "getBlockProduction" message
   */

  var BlockProductionResponseStruct = jsonRpcResultAndContext(type({
    byIdentity: record(string(), array(number$1())),
    range: type({
      firstSlot: number$1(),
      lastSlot: number$1()
    })
  }));
  /**
   * A performance sample
   */

  function createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {
    var fetch = customFetch ? customFetch : fetchImpl;
    var agent;
    {
      if (httpAgent != null) {
        console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');
      }
    }
    var fetchWithMiddleware;

    if (fetchMiddleware) {
      fetchWithMiddleware = /*#__PURE__*/function () {
        var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(info, init) {
          var modifiedFetchArgs;
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return new Promise(function (resolve, reject) {
                  try {
                    fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {
                      return resolve([modifiedInfo, modifiedInit]);
                    });
                  } catch (error) {
                    reject(error);
                  }
                });

              case 2:
                modifiedFetchArgs = _context7.sent;
                _context7.next = 5;
                return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));

              case 5:
                return _context7.abrupt("return", _context7.sent);

              case 6:
              case "end":
                return _context7.stop();
            }
          }, _callee7);
        }));

        return function fetchWithMiddleware(_x19, _x20) {
          return _ref23.apply(this, arguments);
        };
      }();
    }

    var clientBrowser = new RpcClient( /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(request, callback) {
        var options, too_many_requests_retries, res, waitTime, text;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              options = {
                method: 'POST',
                body: request,
                agent: agent,
                headers: Object.assign({
                  'Content-Type': 'application/json'
                }, httpHeaders || {}, COMMON_HTTP_HEADERS)
              };
              _context8.prev = 1;
              too_many_requests_retries = 5;
              waitTime = 500;

            case 4:
              if (!fetchWithMiddleware) {
                _context8.next = 10;
                break;
              }

              _context8.next = 7;
              return fetchWithMiddleware(url, options);

            case 7:
              res = _context8.sent;
              _context8.next = 13;
              break;

            case 10:
              _context8.next = 12;
              return fetch(url, options);

            case 12:
              res = _context8.sent;

            case 13:
              if (!(res.status !== 429
              /* Too many requests */
              )) {
                _context8.next = 15;
                break;
              }

              return _context8.abrupt("break", 26);

            case 15:
              if (!(disableRetryOnRateLimit === true)) {
                _context8.next = 17;
                break;
              }

              return _context8.abrupt("break", 26);

            case 17:
              too_many_requests_retries -= 1;

              if (!(too_many_requests_retries === 0)) {
                _context8.next = 20;
                break;
              }

              return _context8.abrupt("break", 26);

            case 20:
              console.error("Server responded with ".concat(res.status, " ").concat(res.statusText, ".  Retrying after ").concat(waitTime, "ms delay..."));
              _context8.next = 23;
              return sleep(waitTime);

            case 23:
              waitTime *= 2;

            case 24:
              _context8.next = 4;
              break;

            case 26:
              _context8.next = 28;
              return res.text();

            case 28:
              text = _context8.sent;

              if (res.ok) {
                callback(null, text);
              } else {
                callback(new Error("".concat(res.status, " ").concat(res.statusText, ": ").concat(text)));
              }

              _context8.next = 35;
              break;

            case 32:
              _context8.prev = 32;
              _context8.t0 = _context8["catch"](1);
              if (_context8.t0 instanceof Error) callback(_context8.t0);

            case 35:
            case "end":
              return _context8.stop();
          }
        }, _callee8, null, [[1, 32]]);
      }));

      return function (_x21, _x22) {
        return _ref24.apply(this, arguments);
      };
    }(), {});
    return clientBrowser;
  }

  function createRpcRequest(client) {
    return function (method, args) {
      return new Promise(function (resolve, reject) {
        client.request(method, args, function (err, response) {
          if (err) {
            reject(err);
            return;
          }

          resolve(response);
        });
      });
    };
  }

  function createRpcBatchRequest(client) {
    return function (requests) {
      return new Promise(function (resolve, reject) {
        // Do nothing if requests is empty
        if (requests.length === 0) resolve([]);
        var batch = requests.map(function (params) {
          return client.request(params.methodName, params.args);
        });
        client.request(batch, function (err, response) {
          if (err) {
            reject(err);
            return;
          }

          resolve(response);
        });
      });
    };
  }
  /**
   * Expected JSON RPC response for the "getInflationGovernor" message
   */


  var GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);
  /**
   * Expected JSON RPC response for the "getInflationRate" message
   */

  var GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);
  /**
   * Expected JSON RPC response for the "getRecentPrioritizationFees" message
   */

  var GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);
  /**
   * Expected JSON RPC response for the "getEpochInfo" message
   */

  var GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);
  /**
   * Expected JSON RPC response for the "getEpochSchedule" message
   */

  var GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);
  /**
   * Expected JSON RPC response for the "getLeaderSchedule" message
   */

  var GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);
  /**
   * Expected JSON RPC response for the "minimumLedgerSlot" and "getFirstAvailableBlock" messages
   */

  var SlotRpcResult = jsonRpcResult(number$1());
  /**
   * Supply
   */

  /**
   * Expected JSON RPC response for the "getSupply" message
   */

  var GetSupplyRpcResult = jsonRpcResultAndContext(type({
    total: number$1(),
    circulating: number$1(),
    nonCirculating: number$1(),
    nonCirculatingAccounts: array(PublicKeyFromString)
  }));
  /**
   * Token amount object which returns a token amount in different formats
   * for various client use cases.
   */

  /**
   * Expected JSON RPC structure for token amounts
   */

  var TokenAmountResult = type({
    amount: string(),
    uiAmount: nullable(number$1()),
    decimals: number$1(),
    uiAmountString: optional(string())
  });
  /**
   * Token address and balance.
   */

  /**
   * Expected JSON RPC response for the "getTokenLargestAccounts" message
   */

  var GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({
    address: PublicKeyFromString,
    amount: string(),
    uiAmount: nullable(number$1()),
    decimals: number$1(),
    uiAmountString: optional(string())
  })));
  /**
   * Expected JSON RPC response for the "getTokenAccountsByOwner" message
   */

  var GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
    pubkey: PublicKeyFromString,
    account: type({
      executable: _boolean(),
      owner: PublicKeyFromString,
      lamports: number$1(),
      data: BufferFromRawAccountData,
      rentEpoch: number$1()
    })
  })));
  var ParsedAccountDataResult = type({
    program: string(),
    parsed: unknown(),
    space: number$1()
  });
  /**
   * Expected JSON RPC response for the "getTokenAccountsByOwner" message with parsed data
   */

  var GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({
    pubkey: PublicKeyFromString,
    account: type({
      executable: _boolean(),
      owner: PublicKeyFromString,
      lamports: number$1(),
      data: ParsedAccountDataResult,
      rentEpoch: number$1()
    })
  })));
  /**
   * Pair of an account address and its balance
   */

  /**
   * Expected JSON RPC response for the "getLargestAccounts" message
   */

  var GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({
    lamports: number$1(),
    address: PublicKeyFromString
  })));
  /**
   * @internal
   */

  var AccountInfoResult = type({
    executable: _boolean(),
    owner: PublicKeyFromString,
    lamports: number$1(),
    data: BufferFromRawAccountData,
    rentEpoch: number$1()
  });
  /**
   * @internal
   */

  var KeyedAccountInfoResult = type({
    pubkey: PublicKeyFromString,
    account: AccountInfoResult
  });
  var ParsedOrRawAccountData = coerce(union([instance(Buffer$1), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {
    if (Array.isArray(value)) {
      return _create(value, BufferFromRawAccountData);
    } else {
      return value;
    }
  });
  /**
   * @internal
   */

  var ParsedAccountInfoResult = type({
    executable: _boolean(),
    owner: PublicKeyFromString,
    lamports: number$1(),
    data: ParsedOrRawAccountData,
    rentEpoch: number$1()
  });
  var KeyedParsedAccountInfoResult = type({
    pubkey: PublicKeyFromString,
    account: ParsedAccountInfoResult
  });
  /**
   * @internal
   */

  var StakeActivationResult = type({
    state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),
    active: number$1(),
    inactive: number$1()
  });
  /**
   * Expected JSON RPC response for the "getConfirmedSignaturesForAddress2" message
   */

  var GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({
    signature: string(),
    slot: number$1(),
    err: TransactionErrorResult,
    memo: nullable(string()),
    blockTime: optional(nullable(number$1()))
  })));
  /**
   * Expected JSON RPC response for the "getSignaturesForAddress" message
   */

  var GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({
    signature: string(),
    slot: number$1(),
    err: TransactionErrorResult,
    memo: nullable(string()),
    blockTime: optional(nullable(number$1()))
  })));
  /***
   * Expected JSON RPC response for the "accountNotification" message
   */

  var AccountNotificationResult = type({
    subscription: number$1(),
    result: notificationResultAndContext(AccountInfoResult)
  });
  /**
   * @internal
   */

  var ProgramAccountInfoResult = type({
    pubkey: PublicKeyFromString,
    account: AccountInfoResult
  });
  /***
   * Expected JSON RPC response for the "programNotification" message
   */

  var ProgramAccountNotificationResult = type({
    subscription: number$1(),
    result: notificationResultAndContext(ProgramAccountInfoResult)
  });
  /**
   * @internal
   */

  var SlotInfoResult = type({
    parent: number$1(),
    slot: number$1(),
    root: number$1()
  });
  /**
   * Expected JSON RPC response for the "slotNotification" message
   */

  var SlotNotificationResult = type({
    subscription: number$1(),
    result: SlotInfoResult
  });
  /**
   * Slot updates which can be used for tracking the live progress of a cluster.
   * - `"firstShredReceived"`: connected node received the first shred of a block.
   * Indicates that a new block that is being produced.
   * - `"completed"`: connected node has received all shreds of a block. Indicates
   * a block was recently produced.
   * - `"optimisticConfirmation"`: block was optimistically confirmed by the
   * cluster. It is not guaranteed that an optimistic confirmation notification
   * will be sent for every finalized blocks.
   * - `"root"`: the connected node rooted this block.
   * - `"createdBank"`: the connected node has started validating this block.
   * - `"frozen"`: the connected node has validated this block.
   * - `"dead"`: the connected node failed to validate this block.
   */

  /**
   * @internal
   */

  var SlotUpdateResult = union([type({
    type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),
    slot: number$1(),
    timestamp: number$1()
  }), type({
    type: literal('createdBank'),
    parent: number$1(),
    slot: number$1(),
    timestamp: number$1()
  }), type({
    type: literal('frozen'),
    slot: number$1(),
    timestamp: number$1(),
    stats: type({
      numTransactionEntries: number$1(),
      numSuccessfulTransactions: number$1(),
      numFailedTransactions: number$1(),
      maxTransactionsPerEntry: number$1()
    })
  }), type({
    type: literal('dead'),
    slot: number$1(),
    timestamp: number$1(),
    err: string()
  })]);
  /**
   * Expected JSON RPC response for the "slotsUpdatesNotification" message
   */

  var SlotUpdateNotificationResult = type({
    subscription: number$1(),
    result: SlotUpdateResult
  });
  /**
   * Expected JSON RPC response for the "signatureNotification" message
   */

  var SignatureNotificationResult = type({
    subscription: number$1(),
    result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))
  });
  /**
   * Expected JSON RPC response for the "rootNotification" message
   */

  var RootNotificationResult = type({
    subscription: number$1(),
    result: number$1()
  });
  var ContactInfoResult = type({
    pubkey: string(),
    gossip: nullable(string()),
    tpu: nullable(string()),
    rpc: nullable(string()),
    version: nullable(string())
  });
  var VoteAccountInfoResult = type({
    votePubkey: string(),
    nodePubkey: string(),
    activatedStake: number$1(),
    epochVoteAccount: _boolean(),
    epochCredits: array(tuple([number$1(), number$1(), number$1()])),
    commission: number$1(),
    lastVote: number$1(),
    rootSlot: nullable(number$1())
  });
  /**
   * Expected JSON RPC response for the "getVoteAccounts" message
   */

  var GetVoteAccounts = jsonRpcResult(type({
    current: array(VoteAccountInfoResult),
    delinquent: array(VoteAccountInfoResult)
  }));
  var ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);
  var SignatureStatusResponse = type({
    slot: number$1(),
    confirmations: nullable(number$1()),
    err: TransactionErrorResult,
    confirmationStatus: optional(ConfirmationStatus)
  });
  /**
   * Expected JSON RPC response for the "getSignatureStatuses" message
   */

  var GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));
  /**
   * Expected JSON RPC response for the "getMinimumBalanceForRentExemption" message
   */

  var GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number$1());
  var AddressTableLookupStruct = type({
    accountKey: PublicKeyFromString,
    writableIndexes: array(number$1()),
    readonlyIndexes: array(number$1())
  });
  var ConfirmedTransactionResult = type({
    signatures: array(string()),
    message: type({
      accountKeys: array(string()),
      header: type({
        numRequiredSignatures: number$1(),
        numReadonlySignedAccounts: number$1(),
        numReadonlyUnsignedAccounts: number$1()
      }),
      instructions: array(type({
        accounts: array(number$1()),
        data: string(),
        programIdIndex: number$1()
      })),
      recentBlockhash: string(),
      addressTableLookups: optional(array(AddressTableLookupStruct))
    })
  });
  var AnnotatedAccountKey = type({
    pubkey: PublicKeyFromString,
    signer: _boolean(),
    writable: _boolean(),
    source: optional(union([literal('transaction'), literal('lookupTable')]))
  });
  var ConfirmedTransactionAccountsModeResult = type({
    accountKeys: array(AnnotatedAccountKey),
    signatures: array(string())
  });
  var ParsedInstructionResult = type({
    parsed: unknown(),
    program: string(),
    programId: PublicKeyFromString
  });
  var RawInstructionResult = type({
    accounts: array(PublicKeyFromString),
    data: string(),
    programId: PublicKeyFromString
  });
  var InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);
  var UnknownInstructionResult = union([type({
    parsed: unknown(),
    program: string(),
    programId: string()
  }), type({
    accounts: array(string()),
    data: string(),
    programId: string()
  })]);
  var ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {
    if ('accounts' in value) {
      return _create(value, RawInstructionResult);
    } else {
      return _create(value, ParsedInstructionResult);
    }
  });
  /**
   * @internal
   */

  var ParsedConfirmedTransactionResult = type({
    signatures: array(string()),
    message: type({
      accountKeys: array(AnnotatedAccountKey),
      instructions: array(ParsedOrRawInstruction),
      recentBlockhash: string(),
      addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))
    })
  });
  var TokenBalanceResult = type({
    accountIndex: number$1(),
    mint: string(),
    owner: optional(string()),
    programId: optional(string()),
    uiTokenAmount: TokenAmountResult
  });
  var LoadedAddressesResult = type({
    writable: array(PublicKeyFromString),
    readonly: array(PublicKeyFromString)
  });
  /**
   * @internal
   */

  var ConfirmedTransactionMetaResult = type({
    err: TransactionErrorResult,
    fee: number$1(),
    innerInstructions: optional(nullable(array(type({
      index: number$1(),
      instructions: array(type({
        accounts: array(number$1()),
        data: string(),
        programIdIndex: number$1()
      }))
    })))),
    preBalances: array(number$1()),
    postBalances: array(number$1()),
    logMessages: optional(nullable(array(string()))),
    preTokenBalances: optional(nullable(array(TokenBalanceResult))),
    postTokenBalances: optional(nullable(array(TokenBalanceResult))),
    loadedAddresses: optional(LoadedAddressesResult),
    computeUnitsConsumed: optional(number$1())
  });
  /**
   * @internal
   */

  var ParsedConfirmedTransactionMetaResult = type({
    err: TransactionErrorResult,
    fee: number$1(),
    innerInstructions: optional(nullable(array(type({
      index: number$1(),
      instructions: array(ParsedOrRawInstruction)
    })))),
    preBalances: array(number$1()),
    postBalances: array(number$1()),
    logMessages: optional(nullable(array(string()))),
    preTokenBalances: optional(nullable(array(TokenBalanceResult))),
    postTokenBalances: optional(nullable(array(TokenBalanceResult))),
    loadedAddresses: optional(LoadedAddressesResult),
    computeUnitsConsumed: optional(number$1())
  });
  var TransactionVersionStruct = union([literal(0), literal('legacy')]);
  /** @internal */

  var RewardsResult = type({
    pubkey: string(),
    lamports: number$1(),
    postBalance: nullable(number$1()),
    rewardType: nullable(string()),
    commission: optional(nullable(number$1()))
  });
  /**
   * Expected JSON RPC response for the "getBlock" message
   */

  var GetBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    transactions: array(type({
      transaction: ConfirmedTransactionResult,
      meta: nullable(ConfirmedTransactionMetaResult),
      version: optional(TransactionVersionStruct)
    })),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected JSON RPC response for the "getBlock" message when `transactionDetails` is `none`
   */

  var GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected JSON RPC response for the "getBlock" message when `transactionDetails` is `accounts`
   */

  var GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    transactions: array(type({
      transaction: ConfirmedTransactionAccountsModeResult,
      meta: nullable(ConfirmedTransactionMetaResult),
      version: optional(TransactionVersionStruct)
    })),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected parsed JSON RPC response for the "getBlock" message
   */

  var GetParsedBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    transactions: array(type({
      transaction: ParsedConfirmedTransactionResult,
      meta: nullable(ParsedConfirmedTransactionMetaResult),
      version: optional(TransactionVersionStruct)
    })),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected parsed JSON RPC response for the "getBlock" message  when `transactionDetails` is `accounts`
   */

  var GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    transactions: array(type({
      transaction: ConfirmedTransactionAccountsModeResult,
      meta: nullable(ParsedConfirmedTransactionMetaResult),
      version: optional(TransactionVersionStruct)
    })),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected parsed JSON RPC response for the "getBlock" message  when `transactionDetails` is `none`
   */

  var GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1()),
    blockHeight: nullable(number$1())
  })));
  /**
   * Expected JSON RPC response for the "getConfirmedBlock" message
   *
   * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.
   */

  var GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    transactions: array(type({
      transaction: ConfirmedTransactionResult,
      meta: nullable(ConfirmedTransactionMetaResult)
    })),
    rewards: optional(array(RewardsResult)),
    blockTime: nullable(number$1())
  })));
  /**
   * Expected JSON RPC response for the "getBlock" message
   */

  var GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({
    blockhash: string(),
    previousBlockhash: string(),
    parentSlot: number$1(),
    signatures: array(string()),
    blockTime: nullable(number$1())
  })));
  /**
   * Expected JSON RPC response for the "getTransaction" message
   */

  var GetTransactionRpcResult = jsonRpcResult(nullable(type({
    slot: number$1(),
    meta: nullable(ConfirmedTransactionMetaResult),
    blockTime: optional(nullable(number$1())),
    transaction: ConfirmedTransactionResult,
    version: optional(TransactionVersionStruct)
  })));
  /**
   * Expected parsed JSON RPC response for the "getTransaction" message
   */

  var GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({
    slot: number$1(),
    transaction: ParsedConfirmedTransactionResult,
    meta: nullable(ParsedConfirmedTransactionMetaResult),
    blockTime: optional(nullable(number$1())),
    version: optional(TransactionVersionStruct)
  })));
  /**
   * Expected JSON RPC response for the "getLatestBlockhash" message
   */

  var GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({
    blockhash: string(),
    lastValidBlockHeight: number$1()
  }));
  /**
   * Expected JSON RPC response for the "isBlockhashValid" message
   */

  var IsBlockhashValidRpcResult = jsonRpcResultAndContext(_boolean());
  var PerfSampleResult = type({
    slot: number$1(),
    numTransactions: number$1(),
    numSlots: number$1(),
    samplePeriodSecs: number$1()
  });
  /*
   * Expected JSON RPC response for "getRecentPerformanceSamples" message
   */

  var GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));
  /**
   * Expected JSON RPC response for the "getFeeCalculatorForBlockhash" message
   */

  var GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({
    feeCalculator: type({
      lamportsPerSignature: number$1()
    })
  })));
  /**
   * Expected JSON RPC response for the "requestAirdrop" message
   */

  var RequestAirdropRpcResult = jsonRpcResult(string());
  /**
   * Expected JSON RPC response for the "sendTransaction" message
   */

  var SendTransactionRpcResult = jsonRpcResult(string());
  /**
   * Information about the latest slot being processed by a node
   */

  /**
   * Parsed account data
   */

  /**
   * Stake Activation data
   */

  /**
   * Data slice argument for getProgramAccounts
   */

  /**
   * Memory comparison filter for getProgramAccounts
   */

  /**
   * Data size comparison filter for getProgramAccounts
   */

  /**
   * A filter object for getProgramAccounts
   */

  /**
   * Configuration object for getProgramAccounts requests
   */

  /**
   * Configuration object for getParsedProgramAccounts
   */

  /**
   * Configuration object for getMultipleAccounts
   */

  /**
   * Configuration object for `getStakeActivation`
   */

  /**
   * Configuration object for `getStakeActivation`
   */

  /**
   * Configuration object for `getStakeActivation`
   */

  /**
   * Configuration object for `getNonce`
   */

  /**
   * Configuration object for `getNonceAndContext`
   */

  /**
   * Information describing an account
   */

  /**
   * Account information identified by pubkey
   */

  /**
   * Callback function for account change notifications
   */

  /**
   * Callback function for program account change notifications
   */

  /**
   * Callback function for slot change notifications
   */

  /**
   * Callback function for slot update notifications
   */

  /**
   * Callback function for signature status notifications
   */

  /**
   * Signature status notification with transaction result
   */

  /**
   * Signature received notification
   */

  /**
   * Callback function for signature notifications
   */

  /**
   * Signature subscription options
   */

  /**
   * Callback function for root change notifications
   */

  /**
   * @internal
   */

  var LogsResult = type({
    err: TransactionErrorResult,
    logs: array(string()),
    signature: string()
  });
  /**
   * Logs result.
   */

  /**
   * Expected JSON RPC response for the "logsNotification" message.
   */

  var LogsNotificationResult = type({
    result: notificationResultAndContext(LogsResult),
    subscription: number$1()
  });
  /**
   * Filter for log subscriptions.
   */

  /**
   * Callback function for log notifications.
   */

  /**
   * Signature result
   */

  /**
   * Transaction error
   */

  /**
   * Transaction confirmation status
   * <pre>
   *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node
   *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster
   *   'finalized': Transaction landed in a block which has been finalized by the cluster
   * </pre>
   */

  /**
   * Signature status
   */

  /**
   * A confirmed signature with its status
   */

  /**
   * An object defining headers to be passed to the RPC server
   */

  /**
   * The type of the JavaScript `fetch()` API
   */

  /**
   * A callback used to augment the outgoing HTTP request
   */

  /**
   * Configuration for instantiating a Connection
   */

  /** @internal */

  var COMMON_HTTP_HEADERS = {
    'solana-client': "js/".concat("1.0.0-maintenance")
  };
  /**
   * A connection to a fullnode JSON RPC endpoint
   */

  var Connection = /*#__PURE__*/function () {
    /**
     * Establish a JSON RPC connection
     *
     * @param endpoint URL to the fullnode JSON RPC endpoint
     * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object
     */
    function Connection(endpoint, _commitmentOrConfig) {
      var _this16 = this;

      _classCallCheck(this, Connection);

      /** @internal */
      this._commitment = void 0;
      /** @internal */

      this._confirmTransactionInitialTimeout = void 0;
      /** @internal */

      this._rpcEndpoint = void 0;
      /** @internal */

      this._rpcWsEndpoint = void 0;
      /** @internal */

      this._rpcClient = void 0;
      /** @internal */

      this._rpcRequest = void 0;
      /** @internal */

      this._rpcBatchRequest = void 0;
      /** @internal */

      this._rpcWebSocket = void 0;
      /** @internal */

      this._rpcWebSocketConnected = false;
      /** @internal */

      this._rpcWebSocketHeartbeat = null;
      /** @internal */

      this._rpcWebSocketIdleTimeout = null;
      /** @internal
       * A number that we increment every time an active connection closes.
       * Used to determine whether the same socket connection that was open
       * when an async operation started is the same one that's active when
       * its continuation fires.
       *
       */

      this._rpcWebSocketGeneration = 0;
      /** @internal */

      this._disableBlockhashCaching = false;
      /** @internal */

      this._pollingBlockhash = false;
      /** @internal */

      this._blockhashInfo = {
        latestBlockhash: null,
        lastFetch: 0,
        transactionSignatures: [],
        simulatedSignatures: []
      };
      /** @internal */

      this._nextClientSubscriptionId = 0;
      /** @internal */

      this._subscriptionDisposeFunctionsByClientSubscriptionId = {};
      /** @internal */

      this._subscriptionHashByClientSubscriptionId = {};
      /** @internal */

      this._subscriptionStateChangeCallbacksByHash = {};
      /** @internal */

      this._subscriptionCallbacksByServerSubscriptionId = {};
      /** @internal */

      this._subscriptionsByHash = {};
      /**
       * Special case.
       * After a signature is processed, RPCs automatically dispose of the
       * subscription on the server side. We need to track which of these
       * subscriptions have been disposed in such a way, so that we know
       * whether the client is dealing with a not-yet-processed signature
       * (in which case we must tear down the server subscription) or an
       * already-processed signature (in which case the client can simply
       * clear out the subscription locally without telling the server).
       *
       * NOTE: There is a proposal to eliminate this special case, here:
       * https://github.com/solana-labs/solana/issues/18892
       */

      /** @internal */

      this._subscriptionsAutoDisposedByRpc = new Set();
      /*
       * Returns the current block height of the node
       */

      this.getBlockHeight = function () {
        var requestPromises = {};
        return /*#__PURE__*/function () {
          var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(commitmentOrConfig) {
            var _requestPromises$requ;

            var _extractCommitmentFro, commitment, config, args, requestHash;

            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  _extractCommitmentFro = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro.commitment, config = _extractCommitmentFro.config;
                  args = _this16._buildArgs([], commitment, undefined
                  /* encoding */
                  , config);
                  requestHash = fastStableStringify(args);
                  requestPromises[requestHash] = (_requestPromises$requ = requestPromises[requestHash]) !== null && _requestPromises$requ !== void 0 ? _requestPromises$requ : _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                    var unsafeRes, res;
                    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                      while (1) switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.prev = 0;
                          _context9.next = 3;
                          return _this16._rpcRequest('getBlockHeight', args);

                        case 3:
                          unsafeRes = _context9.sent;
                          res = _create(unsafeRes, jsonRpcResult(number$1()));

                          if (!('error' in res)) {
                            _context9.next = 7;
                            break;
                          }

                          throw new SolanaJSONRPCError(res.error, 'failed to get block height information');

                        case 7:
                          return _context9.abrupt("return", res.result);

                        case 8:
                          _context9.prev = 8;
                          delete requestPromises[requestHash];
                          return _context9.finish(8);

                        case 11:
                        case "end":
                          return _context9.stop();
                      }
                    }, _callee9, null, [[0,, 8, 11]]);
                  }))();
                  _context10.next = 6;
                  return requestPromises[requestHash];

                case 6:
                  return _context10.abrupt("return", _context10.sent);

                case 7:
                case "end":
                  return _context10.stop();
              }
            }, _callee10);
          }));

          return function (_x23) {
            return _ref25.apply(this, arguments);
          };
        }();
      }();

      var wsEndpoint;
      var httpHeaders;
      var fetch;
      var fetchMiddleware;
      var disableRetryOnRateLimit;
      var httpAgent;

      if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {
        this._commitment = _commitmentOrConfig;
      } else if (_commitmentOrConfig) {
        this._commitment = _commitmentOrConfig.commitment;
        this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;
        wsEndpoint = _commitmentOrConfig.wsEndpoint;
        httpHeaders = _commitmentOrConfig.httpHeaders;
        fetch = _commitmentOrConfig.fetch;
        fetchMiddleware = _commitmentOrConfig.fetchMiddleware;
        disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;
        httpAgent = _commitmentOrConfig.httpAgent;
      }

      this._rpcEndpoint = assertEndpointUrl(endpoint);
      this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);
      this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);
      this._rpcRequest = createRpcRequest(this._rpcClient);
      this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);
      this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {
        autoconnect: false,
        max_reconnects: Infinity
      });

      this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));

      this._rpcWebSocket.on('error', this._wsOnError.bind(this));

      this._rpcWebSocket.on('close', this._wsOnClose.bind(this));

      this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));

      this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));

      this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));

      this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));

      this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));

      this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));

      this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));
    }
    /**
     * The default commitment used for requests
     */


    _createClass(Connection, [{
      key: "commitment",
      get: function get() {
        return this._commitment;
      }
      /**
       * The RPC endpoint
       */

    }, {
      key: "rpcEndpoint",
      get: function get() {
        return this._rpcEndpoint;
      }
      /**
       * Fetch the balance for the specified public key, return with context
       */

    }, {
      key: "getBalanceAndContext",
      value: function () {
        var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(publicKey, commitmentOrConfig) {
          var _extractCommitmentFro2, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                /** @internal */
                _extractCommitmentFro2 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro2.commitment, config = _extractCommitmentFro2.config;
                args = this._buildArgs([publicKey.toBase58()], commitment, undefined
                /* encoding */
                , config);
                _context11.next = 4;
                return this._rpcRequest('getBalance', args);

              case 4:
                unsafeRes = _context11.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(number$1()));

                if (!('error' in res)) {
                  _context11.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get balance for ".concat(publicKey.toBase58()));

              case 8:
                return _context11.abrupt("return", res.result);

              case 9:
              case "end":
                return _context11.stop();
            }
          }, _callee11, this);
        }));

        function getBalanceAndContext(_x24, _x25) {
          return _getBalanceAndContext.apply(this, arguments);
        }

        return getBalanceAndContext;
      }()
      /**
       * Fetch the balance for the specified public key
       */

    }, {
      key: "getBalance",
      value: function () {
        var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(publicKey, commitmentOrConfig) {
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getBalanceAndContext(publicKey, commitmentOrConfig).then(function (x) {
                  return x.value;
                })["catch"](function (e) {
                  throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);
                });

              case 2:
                return _context12.abrupt("return", _context12.sent);

              case 3:
              case "end":
                return _context12.stop();
            }
          }, _callee12, this);
        }));

        function getBalance(_x26, _x27) {
          return _getBalance.apply(this, arguments);
        }

        return getBalance;
      }()
      /**
       * Fetch the estimated production time of a block
       */

    }, {
      key: "getBlockTime",
      value: function () {
        var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(slot) {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this._rpcRequest('getBlockTime', [slot]);

              case 2:
                unsafeRes = _context13.sent;
                res = _create(unsafeRes, jsonRpcResult(nullable(number$1())));

                if (!('error' in res)) {
                  _context13.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get block time for slot ".concat(slot));

              case 6:
                return _context13.abrupt("return", res.result);

              case 7:
              case "end":
                return _context13.stop();
            }
          }, _callee13, this);
        }));

        function getBlockTime(_x28) {
          return _getBlockTime.apply(this, arguments);
        }

        return getBlockTime;
      }()
      /**
       * Fetch the lowest slot that the node has information about in its ledger.
       * This value may increase over time if the node is configured to purge older ledger data
       */

    }, {
      key: "getMinimumLedgerSlot",
      value: function () {
        var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee14$(_context14) {
            while (1) switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this._rpcRequest('minimumLedgerSlot', []);

              case 2:
                unsafeRes = _context14.sent;
                res = _create(unsafeRes, jsonRpcResult(number$1()));

                if (!('error' in res)) {
                  _context14.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');

              case 6:
                return _context14.abrupt("return", res.result);

              case 7:
              case "end":
                return _context14.stop();
            }
          }, _callee14, this);
        }));

        function getMinimumLedgerSlot() {
          return _getMinimumLedgerSlot.apply(this, arguments);
        }

        return getMinimumLedgerSlot;
      }()
      /**
       * Fetch the slot of the lowest confirmed block that has not been purged from the ledger
       */

    }, {
      key: "getFirstAvailableBlock",
      value: function () {
        var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee15$(_context15) {
            while (1) switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this._rpcRequest('getFirstAvailableBlock', []);

              case 2:
                unsafeRes = _context15.sent;
                res = _create(unsafeRes, SlotRpcResult);

                if (!('error' in res)) {
                  _context15.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get first available block');

              case 6:
                return _context15.abrupt("return", res.result);

              case 7:
              case "end":
                return _context15.stop();
            }
          }, _callee15, this);
        }));

        function getFirstAvailableBlock() {
          return _getFirstAvailableBlock.apply(this, arguments);
        }

        return getFirstAvailableBlock;
      }()
      /**
       * Fetch information about the current supply
       */

    }, {
      key: "getSupply",
      value: function () {
        var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(config) {
          var configArg, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee16$(_context16) {
            while (1) switch (_context16.prev = _context16.next) {
              case 0:
                configArg = {};

                if (typeof config === 'string') {
                  configArg = {
                    commitment: config
                  };
                } else if (config) {
                  configArg = _objectSpread2(_objectSpread2({}, config), {}, {
                    commitment: config && config.commitment || this.commitment
                  });
                } else {
                  configArg = {
                    commitment: this.commitment
                  };
                }

                _context16.next = 4;
                return this._rpcRequest('getSupply', [configArg]);

              case 4:
                unsafeRes = _context16.sent;
                res = _create(unsafeRes, GetSupplyRpcResult);

                if (!('error' in res)) {
                  _context16.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get supply');

              case 8:
                return _context16.abrupt("return", res.result);

              case 9:
              case "end":
                return _context16.stop();
            }
          }, _callee16, this);
        }));

        function getSupply(_x29) {
          return _getSupply.apply(this, arguments);
        }

        return getSupply;
      }()
      /**
       * Fetch the current supply of a token mint
       */

    }, {
      key: "getTokenSupply",
      value: function () {
        var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(tokenMintAddress, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee17$(_context17) {
            while (1) switch (_context17.prev = _context17.next) {
              case 0:
                args = this._buildArgs([tokenMintAddress.toBase58()], commitment);
                _context17.next = 3;
                return this._rpcRequest('getTokenSupply', args);

              case 3:
                unsafeRes = _context17.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));

                if (!('error' in res)) {
                  _context17.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get token supply');

              case 7:
                return _context17.abrupt("return", res.result);

              case 8:
              case "end":
                return _context17.stop();
            }
          }, _callee17, this);
        }));

        function getTokenSupply(_x30, _x31) {
          return _getTokenSupply.apply(this, arguments);
        }

        return getTokenSupply;
      }()
      /**
       * Fetch the current balance of a token account
       */

    }, {
      key: "getTokenAccountBalance",
      value: function () {
        var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(tokenAddress, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee18$(_context18) {
            while (1) switch (_context18.prev = _context18.next) {
              case 0:
                args = this._buildArgs([tokenAddress.toBase58()], commitment);
                _context18.next = 3;
                return this._rpcRequest('getTokenAccountBalance', args);

              case 3:
                unsafeRes = _context18.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));

                if (!('error' in res)) {
                  _context18.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');

              case 7:
                return _context18.abrupt("return", res.result);

              case 8:
              case "end":
                return _context18.stop();
            }
          }, _callee18, this);
        }));

        function getTokenAccountBalance(_x32, _x33) {
          return _getTokenAccountBalance.apply(this, arguments);
        }

        return getTokenAccountBalance;
      }()
      /**
       * Fetch all the token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}
       */

    }, {
      key: "getTokenAccountsByOwner",
      value: function () {
        var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(ownerAddress, filter, commitmentOrConfig) {
          var _extractCommitmentFro3, commitment, config, _args, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee19$(_context19) {
            while (1) switch (_context19.prev = _context19.next) {
              case 0:
                _extractCommitmentFro3 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro3.commitment, config = _extractCommitmentFro3.config;
                _args = [ownerAddress.toBase58()];

                if ('mint' in filter) {
                  _args.push({
                    mint: filter.mint.toBase58()
                  });
                } else {
                  _args.push({
                    programId: filter.programId.toBase58()
                  });
                }

                args = this._buildArgs(_args, commitment, 'base64', config);
                _context19.next = 6;
                return this._rpcRequest('getTokenAccountsByOwner', args);

              case 6:
                unsafeRes = _context19.sent;
                res = _create(unsafeRes, GetTokenAccountsByOwner);

                if (!('error' in res)) {
                  _context19.next = 10;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get token accounts owned by account ".concat(ownerAddress.toBase58()));

              case 10:
                return _context19.abrupt("return", res.result);

              case 11:
              case "end":
                return _context19.stop();
            }
          }, _callee19, this);
        }));

        function getTokenAccountsByOwner(_x34, _x35, _x36) {
          return _getTokenAccountsByOwner.apply(this, arguments);
        }

        return getTokenAccountsByOwner;
      }()
      /**
       * Fetch parsed token accounts owned by the specified account
       *
       * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}
       */

    }, {
      key: "getParsedTokenAccountsByOwner",
      value: function () {
        var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(ownerAddress, filter, commitment) {
          var _args, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee20$(_context20) {
            while (1) switch (_context20.prev = _context20.next) {
              case 0:
                _args = [ownerAddress.toBase58()];

                if ('mint' in filter) {
                  _args.push({
                    mint: filter.mint.toBase58()
                  });
                } else {
                  _args.push({
                    programId: filter.programId.toBase58()
                  });
                }

                args = this._buildArgs(_args, commitment, 'jsonParsed');
                _context20.next = 5;
                return this._rpcRequest('getTokenAccountsByOwner', args);

              case 5:
                unsafeRes = _context20.sent;
                res = _create(unsafeRes, GetParsedTokenAccountsByOwner);

                if (!('error' in res)) {
                  _context20.next = 9;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get token accounts owned by account ".concat(ownerAddress.toBase58()));

              case 9:
                return _context20.abrupt("return", res.result);

              case 10:
              case "end":
                return _context20.stop();
            }
          }, _callee20, this);
        }));

        function getParsedTokenAccountsByOwner(_x37, _x38, _x39) {
          return _getParsedTokenAccountsByOwner.apply(this, arguments);
        }

        return getParsedTokenAccountsByOwner;
      }()
      /**
       * Fetch the 20 largest accounts with their current balances
       */

    }, {
      key: "getLargestAccounts",
      value: function () {
        var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(config) {
          var arg, args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee21$(_context21) {
            while (1) switch (_context21.prev = _context21.next) {
              case 0:
                arg = _objectSpread2(_objectSpread2({}, config), {}, {
                  commitment: config && config.commitment || this.commitment
                });
                args = arg.filter || arg.commitment ? [arg] : [];
                _context21.next = 4;
                return this._rpcRequest('getLargestAccounts', args);

              case 4:
                unsafeRes = _context21.sent;
                res = _create(unsafeRes, GetLargestAccountsRpcResult);

                if (!('error' in res)) {
                  _context21.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');

              case 8:
                return _context21.abrupt("return", res.result);

              case 9:
              case "end":
                return _context21.stop();
            }
          }, _callee21, this);
        }));

        function getLargestAccounts(_x40) {
          return _getLargestAccounts.apply(this, arguments);
        }

        return getLargestAccounts;
      }()
      /**
       * Fetch the 20 largest token accounts with their current balances
       * for a given mint.
       */

    }, {
      key: "getTokenLargestAccounts",
      value: function () {
        var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(mintAddress, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee22$(_context22) {
            while (1) switch (_context22.prev = _context22.next) {
              case 0:
                args = this._buildArgs([mintAddress.toBase58()], commitment);
                _context22.next = 3;
                return this._rpcRequest('getTokenLargestAccounts', args);

              case 3:
                unsafeRes = _context22.sent;
                res = _create(unsafeRes, GetTokenLargestAccountsResult);

                if (!('error' in res)) {
                  _context22.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');

              case 7:
                return _context22.abrupt("return", res.result);

              case 8:
              case "end":
                return _context22.stop();
            }
          }, _callee22, this);
        }));

        function getTokenLargestAccounts(_x41, _x42) {
          return _getTokenLargestAccounts.apply(this, arguments);
        }

        return getTokenLargestAccounts;
      }()
      /**
       * Fetch all the account info for the specified public key, return with context
       */

    }, {
      key: "getAccountInfoAndContext",
      value: function () {
        var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(publicKey, commitmentOrConfig) {
          var _extractCommitmentFro4, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee23$(_context23) {
            while (1) switch (_context23.prev = _context23.next) {
              case 0:
                _extractCommitmentFro4 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro4.commitment, config = _extractCommitmentFro4.config;
                args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);
                _context23.next = 4;
                return this._rpcRequest('getAccountInfo', args);

              case 4:
                unsafeRes = _context23.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));

                if (!('error' in res)) {
                  _context23.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get info about account ".concat(publicKey.toBase58()));

              case 8:
                return _context23.abrupt("return", res.result);

              case 9:
              case "end":
                return _context23.stop();
            }
          }, _callee23, this);
        }));

        function getAccountInfoAndContext(_x43, _x44) {
          return _getAccountInfoAndContext.apply(this, arguments);
        }

        return getAccountInfoAndContext;
      }()
      /**
       * Fetch parsed account info for the specified public key
       */

    }, {
      key: "getParsedAccountInfo",
      value: function () {
        var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(publicKey, commitmentOrConfig) {
          var _extractCommitmentFro5, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee24$(_context24) {
            while (1) switch (_context24.prev = _context24.next) {
              case 0:
                _extractCommitmentFro5 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro5.commitment, config = _extractCommitmentFro5.config;
                args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);
                _context24.next = 4;
                return this._rpcRequest('getAccountInfo', args);

              case 4:
                unsafeRes = _context24.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));

                if (!('error' in res)) {
                  _context24.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get info about account ".concat(publicKey.toBase58()));

              case 8:
                return _context24.abrupt("return", res.result);

              case 9:
              case "end":
                return _context24.stop();
            }
          }, _callee24, this);
        }));

        function getParsedAccountInfo(_x45, _x46) {
          return _getParsedAccountInfo.apply(this, arguments);
        }

        return getParsedAccountInfo;
      }()
      /**
       * Fetch all the account info for the specified public key
       */

    }, {
      key: "getAccountInfo",
      value: function () {
        var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(publicKey, commitmentOrConfig) {
          var res;
          return _regeneratorRuntime().wrap(function _callee25$(_context25) {
            while (1) switch (_context25.prev = _context25.next) {
              case 0:
                _context25.prev = 0;
                _context25.next = 3;
                return this.getAccountInfoAndContext(publicKey, commitmentOrConfig);

              case 3:
                res = _context25.sent;
                return _context25.abrupt("return", res.value);

              case 7:
                _context25.prev = 7;
                _context25.t0 = _context25["catch"](0);
                throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context25.t0);

              case 10:
              case "end":
                return _context25.stop();
            }
          }, _callee25, this, [[0, 7]]);
        }));

        function getAccountInfo(_x47, _x48) {
          return _getAccountInfo.apply(this, arguments);
        }

        return getAccountInfo;
      }()
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
       */

    }, {
      key: "getMultipleParsedAccounts",
      value: function () {
        var _getMultipleParsedAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(publicKeys, rawConfig) {
          var _extractCommitmentFro6, commitment, config, keys, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee26$(_context26) {
            while (1) switch (_context26.prev = _context26.next) {
              case 0:
                _extractCommitmentFro6 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro6.commitment, config = _extractCommitmentFro6.config;
                keys = publicKeys.map(function (key) {
                  return key.toBase58();
                });
                args = this._buildArgs([keys], commitment, 'jsonParsed', config);
                _context26.next = 5;
                return this._rpcRequest('getMultipleAccounts', args);

              case 5:
                unsafeRes = _context26.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));

                if (!('error' in res)) {
                  _context26.next = 9;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get info for accounts ".concat(keys));

              case 9:
                return _context26.abrupt("return", res.result);

              case 10:
              case "end":
                return _context26.stop();
            }
          }, _callee26, this);
        }));

        function getMultipleParsedAccounts(_x49, _x50) {
          return _getMultipleParsedAccounts.apply(this, arguments);
        }

        return getMultipleParsedAccounts;
      }()
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys, return with context
       */

    }, {
      key: "getMultipleAccountsInfoAndContext",
      value: function () {
        var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(publicKeys, commitmentOrConfig) {
          var _extractCommitmentFro7, commitment, config, keys, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee27$(_context27) {
            while (1) switch (_context27.prev = _context27.next) {
              case 0:
                _extractCommitmentFro7 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro7.commitment, config = _extractCommitmentFro7.config;
                keys = publicKeys.map(function (key) {
                  return key.toBase58();
                });
                args = this._buildArgs([keys], commitment, 'base64', config);
                _context27.next = 5;
                return this._rpcRequest('getMultipleAccounts', args);

              case 5:
                unsafeRes = _context27.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));

                if (!('error' in res)) {
                  _context27.next = 9;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get info for accounts ".concat(keys));

              case 9:
                return _context27.abrupt("return", res.result);

              case 10:
              case "end":
                return _context27.stop();
            }
          }, _callee27, this);
        }));

        function getMultipleAccountsInfoAndContext(_x51, _x52) {
          return _getMultipleAccountsInfoAndContext.apply(this, arguments);
        }

        return getMultipleAccountsInfoAndContext;
      }()
      /**
       * Fetch all the account info for multiple accounts specified by an array of public keys
       */

    }, {
      key: "getMultipleAccountsInfo",
      value: function () {
        var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(publicKeys, commitmentOrConfig) {
          var res;
          return _regeneratorRuntime().wrap(function _callee28$(_context28) {
            while (1) switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);

              case 2:
                res = _context28.sent;
                return _context28.abrupt("return", res.value);

              case 4:
              case "end":
                return _context28.stop();
            }
          }, _callee28, this);
        }));

        function getMultipleAccountsInfo(_x53, _x54) {
          return _getMultipleAccountsInfo.apply(this, arguments);
        }

        return getMultipleAccountsInfo;
      }()
      /**
       * Returns epoch activation information for a stake account that has been delegated
       *
       * @deprecated Deprecated since RPC v1.18; will be removed in a future version.
       */

    }, {
      key: "getStakeActivation",
      value: function () {
        var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(publicKey, commitmentOrConfig, epoch) {
          var _extractCommitmentFro8, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee29$(_context29) {
            while (1) switch (_context29.prev = _context29.next) {
              case 0:
                _extractCommitmentFro8 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro8.commitment, config = _extractCommitmentFro8.config;
                args = this._buildArgs([publicKey.toBase58()], commitment, undefined
                /* encoding */
                , _objectSpread2(_objectSpread2({}, config), {}, {
                  epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch
                }));
                _context29.next = 4;
                return this._rpcRequest('getStakeActivation', args);

              case 4:
                unsafeRes = _context29.sent;
                res = _create(unsafeRes, jsonRpcResult(StakeActivationResult));

                if (!('error' in res)) {
                  _context29.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get Stake Activation ".concat(publicKey.toBase58()));

              case 8:
                return _context29.abrupt("return", res.result);

              case 9:
              case "end":
                return _context29.stop();
            }
          }, _callee29, this);
        }));

        function getStakeActivation(_x55, _x56, _x57) {
          return _getStakeActivation.apply(this, arguments);
        }

        return getStakeActivation;
      }()
      /**
       * Fetch all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "getProgramAccounts",
      value: function () {
        var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(programId, configOrCommitment) {
          var _extractCommitmentFro9, commitment, config, _ref27, encoding, configWithoutEncoding, args, unsafeRes, baseSchema, res;

          return _regeneratorRuntime().wrap(function _callee30$(_context30) {
            while (1) switch (_context30.prev = _context30.next) {
              case 0:
                _extractCommitmentFro9 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro9.commitment, config = _extractCommitmentFro9.config;
                _ref27 = config || {}, encoding = _ref27.encoding, configWithoutEncoding = _objectWithoutProperties(_ref27, _excluded2);
                args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', _objectSpread2(_objectSpread2({}, configWithoutEncoding), configWithoutEncoding.filters ? {
                  filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)
                } : null));
                _context30.next = 5;
                return this._rpcRequest('getProgramAccounts', args);

              case 5:
                unsafeRes = _context30.sent;
                baseSchema = array(KeyedAccountInfoResult);
                res = configWithoutEncoding.withContext === true ? _create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : _create(unsafeRes, jsonRpcResult(baseSchema));

                if (!('error' in res)) {
                  _context30.next = 10;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get accounts owned by program ".concat(programId.toBase58()));

              case 10:
                return _context30.abrupt("return", res.result);

              case 11:
              case "end":
                return _context30.stop();
            }
          }, _callee30, this);
        }));

        function getProgramAccounts(_x58, _x59) {
          return _getProgramAccounts.apply(this, arguments);
        }

        return getProgramAccounts;
      }()
      /**
       * Fetch and parse all the accounts owned by the specified program id
       *
       * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}
       */

    }, {
      key: "getParsedProgramAccounts",
      value: function () {
        var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(programId, configOrCommitment) {
          var _extractCommitmentFro10, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee31$(_context31) {
            while (1) switch (_context31.prev = _context31.next) {
              case 0:
                _extractCommitmentFro10 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro10.commitment, config = _extractCommitmentFro10.config;
                args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);
                _context31.next = 4;
                return this._rpcRequest('getProgramAccounts', args);

              case 4:
                unsafeRes = _context31.sent;
                res = _create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));

                if (!('error' in res)) {
                  _context31.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get accounts owned by program ".concat(programId.toBase58()));

              case 8:
                return _context31.abrupt("return", res.result);

              case 9:
              case "end":
                return _context31.stop();
            }
          }, _callee31, this);
        }));

        function getParsedProgramAccounts(_x60, _x61) {
          return _getParsedProgramAccounts.apply(this, arguments);
        }

        return getParsedProgramAccounts;
      }()
      /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "confirmTransaction",
      value: function () {
        var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(strategy, commitment) {
          var rawSignature, _config$abortSignal, config, decodedSignature;

          return _regeneratorRuntime().wrap(function _callee32$(_context32) {
            while (1) switch (_context32.prev = _context32.next) {
              case 0:
                if (!(typeof strategy == 'string')) {
                  _context32.next = 4;
                  break;
                }

                rawSignature = strategy;
                _context32.next = 8;
                break;

              case 4:
                config = strategy;

                if (!((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted)) {
                  _context32.next = 7;
                  break;
                }

                return _context32.abrupt("return", Promise.reject(config.abortSignal.reason));

              case 7:
                rawSignature = config.signature;

              case 8:
                _context32.prev = 8;
                decodedSignature = bs58$5.decode(rawSignature);
                _context32.next = 15;
                break;

              case 12:
                _context32.prev = 12;
                _context32.t0 = _context32["catch"](8);
                throw new Error('signature must be base58 encoded: ' + rawSignature);

              case 15:
                assert$1(decodedSignature.length === 64, 'signature has invalid length');

                if (!(typeof strategy === 'string')) {
                  _context32.next = 22;
                  break;
                }

                _context32.next = 19;
                return this.confirmTransactionUsingLegacyTimeoutStrategy({
                  commitment: commitment || this.commitment,
                  signature: rawSignature
                });

              case 19:
                return _context32.abrupt("return", _context32.sent);

              case 22:
                if (!('lastValidBlockHeight' in strategy)) {
                  _context32.next = 28;
                  break;
                }

                _context32.next = 25;
                return this.confirmTransactionUsingBlockHeightExceedanceStrategy({
                  commitment: commitment || this.commitment,
                  strategy: strategy
                });

              case 25:
                return _context32.abrupt("return", _context32.sent);

              case 28:
                _context32.next = 30;
                return this.confirmTransactionUsingDurableNonceStrategy({
                  commitment: commitment || this.commitment,
                  strategy: strategy
                });

              case 30:
                return _context32.abrupt("return", _context32.sent);

              case 31:
              case "end":
                return _context32.stop();
            }
          }, _callee32, this, [[8, 12]]);
        }));

        function confirmTransaction(_x62, _x63) {
          return _confirmTransaction.apply(this, arguments);
        }

        return confirmTransaction;
      }()
    }, {
      key: "getCancellationPromise",
      value: function getCancellationPromise(signal) {
        return new Promise(function (_, reject) {
          if (signal == null) {
            return;
          }

          if (signal.aborted) {
            reject(signal.reason);
          } else {
            signal.addEventListener('abort', function () {
              reject(signal.reason);
            });
          }
        });
      }
    }, {
      key: "getTransactionConfirmationPromise",
      value: function getTransactionConfirmationPromise(_ref28) {
        var _this17 = this;

        var commitment = _ref28.commitment,
            signature = _ref28.signature;
        var signatureSubscriptionId;
        var disposeSignatureSubscriptionStateChangeObserver;
        var done = false;
        var confirmationPromise = new Promise(function (resolve, reject) {
          try {
            signatureSubscriptionId = _this17.onSignature(signature, function (result, context) {
              signatureSubscriptionId = undefined;
              var response = {
                context: context,
                value: result
              };
              resolve({
                __type: TransactionStatus.PROCESSED,
                response: response
              });
            }, commitment);
            var subscriptionSetupPromise = new Promise(function (resolveSubscriptionSetup) {
              if (signatureSubscriptionId == null) {
                resolveSubscriptionSetup();
              } else {
                disposeSignatureSubscriptionStateChangeObserver = _this17._onSubscriptionStateChange(signatureSubscriptionId, function (nextState) {
                  if (nextState === 'subscribed') {
                    resolveSubscriptionSetup();
                  }
                });
              }
            });

            _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
              var response, context, value;
              return _regeneratorRuntime().wrap(function _callee33$(_context33) {
                while (1) switch (_context33.prev = _context33.next) {
                  case 0:
                    _context33.next = 2;
                    return subscriptionSetupPromise;

                  case 2:
                    if (!done) {
                      _context33.next = 4;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 4:
                    _context33.next = 6;
                    return _this17.getSignatureStatus(signature);

                  case 6:
                    response = _context33.sent;

                    if (!done) {
                      _context33.next = 9;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 9:
                    if (!(response == null)) {
                      _context33.next = 11;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 11:
                    context = response.context, value = response.value;

                    if (!(value == null)) {
                      _context33.next = 14;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 14:
                    if (!(value !== null && value !== void 0 && value.err)) {
                      _context33.next = 18;
                      break;
                    }

                    reject(value.err);
                    _context33.next = 29;
                    break;

                  case 18:
                    _context33.t0 = commitment;
                    _context33.next = _context33.t0 === 'confirmed' ? 21 : _context33.t0 === 'single' ? 21 : _context33.t0 === 'singleGossip' ? 21 : _context33.t0 === 'finalized' ? 24 : _context33.t0 === 'max' ? 24 : _context33.t0 === 'root' ? 24 : _context33.t0 === 'processed' ? 27 : _context33.t0 === 'recent' ? 27 : 27;
                    break;

                  case 21:
                    if (!(value.confirmationStatus === 'processed')) {
                      _context33.next = 23;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 23:
                    return _context33.abrupt("break", 27);

                  case 24:
                    if (!(value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed')) {
                      _context33.next = 26;
                      break;
                    }

                    return _context33.abrupt("return");

                  case 26:
                    return _context33.abrupt("break", 27);

                  case 27:
                    done = true;
                    resolve({
                      __type: TransactionStatus.PROCESSED,
                      response: {
                        context: context,
                        value: value
                      }
                    });

                  case 29:
                  case "end":
                    return _context33.stop();
                }
              }, _callee33);
            }))();
          } catch (err) {
            reject(err);
          }
        });

        var abortConfirmation = function abortConfirmation() {
          if (disposeSignatureSubscriptionStateChangeObserver) {
            disposeSignatureSubscriptionStateChangeObserver();
            disposeSignatureSubscriptionStateChangeObserver = undefined;
          }

          if (signatureSubscriptionId != null) {
            _this17.removeSignatureListener(signatureSubscriptionId);

            signatureSubscriptionId = undefined;
          }
        };

        return {
          abortConfirmation: abortConfirmation,
          confirmationPromise: confirmationPromise
        };
      }
    }, {
      key: "confirmTransactionUsingBlockHeightExceedanceStrategy",
      value: function () {
        var _confirmTransactionUsingBlockHeightExceedanceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(_ref30) {
          var _this18 = this;

          var commitment, _ref30$strategy, abortSignal, lastValidBlockHeight, signature, done, expiryPromise, _this$getTransactionC, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome;

          return _regeneratorRuntime().wrap(function _callee36$(_context36) {
            while (1) switch (_context36.prev = _context36.next) {
              case 0:
                commitment = _ref30.commitment, _ref30$strategy = _ref30.strategy, abortSignal = _ref30$strategy.abortSignal, lastValidBlockHeight = _ref30$strategy.lastValidBlockHeight, signature = _ref30$strategy.signature;
                done = false;
                expiryPromise = new Promise(function (resolve) {
                  var checkBlockHeight = /*#__PURE__*/function () {
                    var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
                      var blockHeight;
                      return _regeneratorRuntime().wrap(function _callee34$(_context34) {
                        while (1) switch (_context34.prev = _context34.next) {
                          case 0:
                            _context34.prev = 0;
                            _context34.next = 3;
                            return _this18.getBlockHeight(commitment);

                          case 3:
                            blockHeight = _context34.sent;
                            return _context34.abrupt("return", blockHeight);

                          case 7:
                            _context34.prev = 7;
                            _context34.t0 = _context34["catch"](0);
                            return _context34.abrupt("return", -1);

                          case 10:
                          case "end":
                            return _context34.stop();
                        }
                      }, _callee34, null, [[0, 7]]);
                    }));

                    return function checkBlockHeight() {
                      return _ref31.apply(this, arguments);
                    };
                  }();

                  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
                    var currentBlockHeight;
                    return _regeneratorRuntime().wrap(function _callee35$(_context35) {
                      while (1) switch (_context35.prev = _context35.next) {
                        case 0:
                          _context35.next = 2;
                          return checkBlockHeight();

                        case 2:
                          currentBlockHeight = _context35.sent;

                          if (!done) {
                            _context35.next = 5;
                            break;
                          }

                          return _context35.abrupt("return");

                        case 5:
                          if (!(currentBlockHeight <= lastValidBlockHeight)) {
                            _context35.next = 17;
                            break;
                          }

                          _context35.next = 8;
                          return sleep(1000);

                        case 8:
                          if (!done) {
                            _context35.next = 10;
                            break;
                          }

                          return _context35.abrupt("return");

                        case 10:
                          _context35.next = 12;
                          return checkBlockHeight();

                        case 12:
                          currentBlockHeight = _context35.sent;

                          if (!done) {
                            _context35.next = 15;
                            break;
                          }

                          return _context35.abrupt("return");

                        case 15:
                          _context35.next = 5;
                          break;

                        case 17:
                          resolve({
                            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED
                          });

                        case 18:
                        case "end":
                          return _context35.stop();
                      }
                    }, _callee35);
                  }))();
                });
                _this$getTransactionC = this.getTransactionConfirmationPromise({
                  commitment: commitment,
                  signature: signature
                }), abortConfirmation = _this$getTransactionC.abortConfirmation, confirmationPromise = _this$getTransactionC.confirmationPromise;
                cancellationPromise = this.getCancellationPromise(abortSignal);
                _context36.prev = 5;
                _context36.next = 8;
                return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);

              case 8:
                outcome = _context36.sent;

                if (!(outcome.__type === TransactionStatus.PROCESSED)) {
                  _context36.next = 13;
                  break;
                }

                result = outcome.response;
                _context36.next = 14;
                break;

              case 13:
                throw new TransactionExpiredBlockheightExceededError(signature);

              case 14:
                _context36.prev = 14;
                done = true;
                abortConfirmation();
                return _context36.finish(14);

              case 18:
                return _context36.abrupt("return", result);

              case 19:
              case "end":
                return _context36.stop();
            }
          }, _callee36, this, [[5,, 14, 18]]);
        }));

        function confirmTransactionUsingBlockHeightExceedanceStrategy(_x64) {
          return _confirmTransactionUsingBlockHeightExceedanceStrategy.apply(this, arguments);
        }

        return confirmTransactionUsingBlockHeightExceedanceStrategy;
      }()
    }, {
      key: "confirmTransactionUsingDurableNonceStrategy",
      value: function () {
        var _confirmTransactionUsingDurableNonceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(_ref33) {
          var _this19 = this;

          var commitment, _ref33$strategy, abortSignal, minContextSlot, nonceAccountPubkey, nonceValue, signature, done, expiryPromise, _this$getTransactionC2, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome, _signatureStatus, signatureStatus, _outcome$slotInWhichN, status, commitmentForStatus, confirmationStatus;

          return _regeneratorRuntime().wrap(function _callee39$(_context39) {
            while (1) switch (_context39.prev = _context39.next) {
              case 0:
                commitment = _ref33.commitment, _ref33$strategy = _ref33.strategy, abortSignal = _ref33$strategy.abortSignal, minContextSlot = _ref33$strategy.minContextSlot, nonceAccountPubkey = _ref33$strategy.nonceAccountPubkey, nonceValue = _ref33$strategy.nonceValue, signature = _ref33$strategy.signature;
                done = false;
                expiryPromise = new Promise(function (resolve) {
                  var currentNonceValue = nonceValue;
                  var lastCheckedSlot = null;

                  var getCurrentNonceValue = /*#__PURE__*/function () {
                    var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
                      var _yield$_this19$getNon2, context, nonceAccount;

                      return _regeneratorRuntime().wrap(function _callee37$(_context37) {
                        while (1) switch (_context37.prev = _context37.next) {
                          case 0:
                            _context37.prev = 0;
                            _context37.next = 3;
                            return _this19.getNonceAndContext(nonceAccountPubkey, {
                              commitment: commitment,
                              minContextSlot: minContextSlot
                            });

                          case 3:
                            _yield$_this19$getNon2 = _context37.sent;
                            context = _yield$_this19$getNon2.context;
                            nonceAccount = _yield$_this19$getNon2.value;
                            lastCheckedSlot = context.slot;
                            return _context37.abrupt("return", nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce);

                          case 10:
                            _context37.prev = 10;
                            _context37.t0 = _context37["catch"](0);
                            return _context37.abrupt("return", currentNonceValue);

                          case 13:
                          case "end":
                            return _context37.stop();
                        }
                      }, _callee37, null, [[0, 10]]);
                    }));

                    return function getCurrentNonceValue() {
                      return _ref34.apply(this, arguments);
                    };
                  }();

                  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
                    return _regeneratorRuntime().wrap(function _callee38$(_context38) {
                      while (1) switch (_context38.prev = _context38.next) {
                        case 0:
                          _context38.next = 2;
                          return getCurrentNonceValue();

                        case 2:
                          currentNonceValue = _context38.sent;

                          if (!done) {
                            _context38.next = 5;
                            break;
                          }

                          return _context38.abrupt("return");

                        case 5:

                          if (!(nonceValue !== currentNonceValue)) {
                            _context38.next = 9;
                            break;
                          }

                          resolve({
                            __type: TransactionStatus.NONCE_INVALID,
                            slotInWhichNonceDidAdvance: lastCheckedSlot
                          });
                          return _context38.abrupt("return");

                        case 9:
                          _context38.next = 11;
                          return sleep(2000);

                        case 11:
                          if (!done) {
                            _context38.next = 13;
                            break;
                          }

                          return _context38.abrupt("return");

                        case 13:
                          _context38.next = 15;
                          return getCurrentNonceValue();

                        case 15:
                          currentNonceValue = _context38.sent;

                          if (!done) {
                            _context38.next = 18;
                            break;
                          }

                          return _context38.abrupt("return");

                        case 18:
                          _context38.next = 5;
                          break;

                        case 20:
                        case "end":
                          return _context38.stop();
                      }
                    }, _callee38);
                  }))();
                });
                _this$getTransactionC2 = this.getTransactionConfirmationPromise({
                  commitment: commitment,
                  signature: signature
                }), abortConfirmation = _this$getTransactionC2.abortConfirmation, confirmationPromise = _this$getTransactionC2.confirmationPromise;
                cancellationPromise = this.getCancellationPromise(abortSignal);
                _context39.prev = 5;
                _context39.next = 8;
                return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);

              case 8:
                outcome = _context39.sent;

                if (!(outcome.__type === TransactionStatus.PROCESSED)) {
                  _context39.next = 13;
                  break;
                }

                result = outcome.response;
                _context39.next = 47;
                break;

              case 13:

                _context39.next = 16;
                return this.getSignatureStatus(signature);

              case 16:
                status = _context39.sent;

                if (!(status == null)) {
                  _context39.next = 19;
                  break;
                }

                return _context39.abrupt("break", 27);

              case 19:
                if (!(status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot))) {
                  _context39.next = 23;
                  break;
                }

                _context39.next = 22;
                return sleep(400);

              case 22:
                return _context39.abrupt("continue", 13);

              case 23:
                signatureStatus = status;
                return _context39.abrupt("break", 27);

              case 27:
                if (!((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value)) {
                  _context39.next = 46;
                  break;
                }

                commitmentForStatus = commitment || 'finalized';
                confirmationStatus = signatureStatus.value.confirmationStatus;
                _context39.t0 = commitmentForStatus;
                _context39.next = _context39.t0 === 'processed' ? 33 : _context39.t0 === 'recent' ? 33 : _context39.t0 === 'confirmed' ? 36 : _context39.t0 === 'single' ? 36 : _context39.t0 === 'singleGossip' ? 36 : _context39.t0 === 'finalized' ? 39 : _context39.t0 === 'max' ? 39 : _context39.t0 === 'root' ? 39 : 42;
                break;

              case 33:
                if (!(confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {
                  _context39.next = 35;
                  break;
                }

                throw new TransactionExpiredNonceInvalidError(signature);

              case 35:
                return _context39.abrupt("break", 43);

              case 36:
                if (!(confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {
                  _context39.next = 38;
                  break;
                }

                throw new TransactionExpiredNonceInvalidError(signature);

              case 38:
                return _context39.abrupt("break", 43);

              case 39:
                if (!(confirmationStatus !== 'finalized')) {
                  _context39.next = 41;
                  break;
                }

                throw new TransactionExpiredNonceInvalidError(signature);

              case 41:
                return _context39.abrupt("break", 43);

              case 42:

              case 43:
                result = {
                  context: signatureStatus.context,
                  value: {
                    err: signatureStatus.value.err
                  }
                };
                _context39.next = 47;
                break;

              case 46:
                throw new TransactionExpiredNonceInvalidError(signature);

              case 47:
                _context39.prev = 47;
                done = true;
                abortConfirmation();
                return _context39.finish(47);

              case 51:
                return _context39.abrupt("return", result);

              case 52:
              case "end":
                return _context39.stop();
            }
          }, _callee39, this, [[5,, 47, 51]]);
        }));

        function confirmTransactionUsingDurableNonceStrategy(_x65) {
          return _confirmTransactionUsingDurableNonceStrategy.apply(this, arguments);
        }

        return confirmTransactionUsingDurableNonceStrategy;
      }()
    }, {
      key: "confirmTransactionUsingLegacyTimeoutStrategy",
      value: function () {
        var _confirmTransactionUsingLegacyTimeoutStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(_ref36) {
          var _this20 = this;

          var commitment, signature, timeoutId, expiryPromise, _this$getTransactionC3, abortConfirmation, confirmationPromise, result, outcome;

          return _regeneratorRuntime().wrap(function _callee40$(_context40) {
            while (1) switch (_context40.prev = _context40.next) {
              case 0:
                commitment = _ref36.commitment, signature = _ref36.signature;
                expiryPromise = new Promise(function (resolve) {
                  var timeoutMs = _this20._confirmTransactionInitialTimeout || 60 * 1000;

                  switch (commitment) {
                    case 'processed':
                    case 'recent':
                    case 'single':
                    case 'confirmed':
                    case 'singleGossip':
                      {
                        timeoutMs = _this20._confirmTransactionInitialTimeout || 30 * 1000;
                        break;
                      }
                  }

                  timeoutId = setTimeout(function () {
                    return resolve({
                      __type: TransactionStatus.TIMED_OUT,
                      timeoutMs: timeoutMs
                    });
                  }, timeoutMs);
                });
                _this$getTransactionC3 = this.getTransactionConfirmationPromise({
                  commitment: commitment,
                  signature: signature
                }), abortConfirmation = _this$getTransactionC3.abortConfirmation, confirmationPromise = _this$getTransactionC3.confirmationPromise;
                _context40.prev = 3;
                _context40.next = 6;
                return Promise.race([confirmationPromise, expiryPromise]);

              case 6:
                outcome = _context40.sent;

                if (!(outcome.__type === TransactionStatus.PROCESSED)) {
                  _context40.next = 11;
                  break;
                }

                result = outcome.response;
                _context40.next = 12;
                break;

              case 11:
                throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);

              case 12:
                _context40.prev = 12;
                clearTimeout(timeoutId);
                abortConfirmation();
                return _context40.finish(12);

              case 16:
                return _context40.abrupt("return", result);

              case 17:
              case "end":
                return _context40.stop();
            }
          }, _callee40, this, [[3,, 12, 16]]);
        }));

        function confirmTransactionUsingLegacyTimeoutStrategy(_x66) {
          return _confirmTransactionUsingLegacyTimeoutStrategy.apply(this, arguments);
        }

        return confirmTransactionUsingLegacyTimeoutStrategy;
      }()
      /**
       * Return the list of nodes that are currently participating in the cluster
       */

    }, {
      key: "getClusterNodes",
      value: function () {
        var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee41$(_context41) {
            while (1) switch (_context41.prev = _context41.next) {
              case 0:
                _context41.next = 2;
                return this._rpcRequest('getClusterNodes', []);

              case 2:
                unsafeRes = _context41.sent;
                res = _create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));

                if (!('error' in res)) {
                  _context41.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');

              case 6:
                return _context41.abrupt("return", res.result);

              case 7:
              case "end":
                return _context41.stop();
            }
          }, _callee41, this);
        }));

        function getClusterNodes() {
          return _getClusterNodes.apply(this, arguments);
        }

        return getClusterNodes;
      }()
      /**
       * Return the list of nodes that are currently participating in the cluster
       */

    }, {
      key: "getVoteAccounts",
      value: function () {
        var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee42$(_context42) {
            while (1) switch (_context42.prev = _context42.next) {
              case 0:
                args = this._buildArgs([], commitment);
                _context42.next = 3;
                return this._rpcRequest('getVoteAccounts', args);

              case 3:
                unsafeRes = _context42.sent;
                res = _create(unsafeRes, GetVoteAccounts);

                if (!('error' in res)) {
                  _context42.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');

              case 7:
                return _context42.abrupt("return", res.result);

              case 8:
              case "end":
                return _context42.stop();
            }
          }, _callee42, this);
        }));

        function getVoteAccounts(_x67) {
          return _getVoteAccounts.apply(this, arguments);
        }

        return getVoteAccounts;
      }()
      /**
       * Fetch the current slot that the node is processing
       */

    }, {
      key: "getSlot",
      value: function () {
        var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(commitmentOrConfig) {
          var _extractCommitmentFro11, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee43$(_context43) {
            while (1) switch (_context43.prev = _context43.next) {
              case 0:
                _extractCommitmentFro11 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro11.commitment, config = _extractCommitmentFro11.config;
                args = this._buildArgs([], commitment, undefined
                /* encoding */
                , config);
                _context43.next = 4;
                return this._rpcRequest('getSlot', args);

              case 4:
                unsafeRes = _context43.sent;
                res = _create(unsafeRes, jsonRpcResult(number$1()));

                if (!('error' in res)) {
                  _context43.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get slot');

              case 8:
                return _context43.abrupt("return", res.result);

              case 9:
              case "end":
                return _context43.stop();
            }
          }, _callee43, this);
        }));

        function getSlot(_x68) {
          return _getSlot.apply(this, arguments);
        }

        return getSlot;
      }()
      /**
       * Fetch the current slot leader of the cluster
       */

    }, {
      key: "getSlotLeader",
      value: function () {
        var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(commitmentOrConfig) {
          var _extractCommitmentFro12, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee44$(_context44) {
            while (1) switch (_context44.prev = _context44.next) {
              case 0:
                _extractCommitmentFro12 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro12.commitment, config = _extractCommitmentFro12.config;
                args = this._buildArgs([], commitment, undefined
                /* encoding */
                , config);
                _context44.next = 4;
                return this._rpcRequest('getSlotLeader', args);

              case 4:
                unsafeRes = _context44.sent;
                res = _create(unsafeRes, jsonRpcResult(string()));

                if (!('error' in res)) {
                  _context44.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');

              case 8:
                return _context44.abrupt("return", res.result);

              case 9:
              case "end":
                return _context44.stop();
            }
          }, _callee44, this);
        }));

        function getSlotLeader(_x69) {
          return _getSlotLeader.apply(this, arguments);
        }

        return getSlotLeader;
      }()
      /**
       * Fetch `limit` number of slot leaders starting from `startSlot`
       *
       * @param startSlot fetch slot leaders starting from this slot
       * @param limit number of slot leaders to return
       */

    }, {
      key: "getSlotLeaders",
      value: function () {
        var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(startSlot, limit) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee45$(_context45) {
            while (1) switch (_context45.prev = _context45.next) {
              case 0:
                args = [startSlot, limit];
                _context45.next = 3;
                return this._rpcRequest('getSlotLeaders', args);

              case 3:
                unsafeRes = _context45.sent;
                res = _create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));

                if (!('error' in res)) {
                  _context45.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');

              case 7:
                return _context45.abrupt("return", res.result);

              case 8:
              case "end":
                return _context45.stop();
            }
          }, _callee45, this);
        }));

        function getSlotLeaders(_x70, _x71) {
          return _getSlotLeaders.apply(this, arguments);
        }

        return getSlotLeaders;
      }()
      /**
       * Fetch the current status of a signature
       */

    }, {
      key: "getSignatureStatus",
      value: function () {
        var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(signature, config) {
          var _yield$this$getSignat, context, values, value;

          return _regeneratorRuntime().wrap(function _callee46$(_context46) {
            while (1) switch (_context46.prev = _context46.next) {
              case 0:
                _context46.next = 2;
                return this.getSignatureStatuses([signature], config);

              case 2:
                _yield$this$getSignat = _context46.sent;
                context = _yield$this$getSignat.context;
                values = _yield$this$getSignat.value;
                assert$1(values.length === 1);
                value = values[0];
                return _context46.abrupt("return", {
                  context: context,
                  value: value
                });

              case 8:
              case "end":
                return _context46.stop();
            }
          }, _callee46, this);
        }));

        function getSignatureStatus(_x72, _x73) {
          return _getSignatureStatus.apply(this, arguments);
        }

        return getSignatureStatus;
      }()
      /**
       * Fetch the current statuses of a batch of signatures
       */

    }, {
      key: "getSignatureStatuses",
      value: function () {
        var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(signatures, config) {
          var params, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee47$(_context47) {
            while (1) switch (_context47.prev = _context47.next) {
              case 0:
                params = [signatures];

                if (config) {
                  params.push(config);
                }

                _context47.next = 4;
                return this._rpcRequest('getSignatureStatuses', params);

              case 4:
                unsafeRes = _context47.sent;
                res = _create(unsafeRes, GetSignatureStatusesRpcResult);

                if (!('error' in res)) {
                  _context47.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get signature status');

              case 8:
                return _context47.abrupt("return", res.result);

              case 9:
              case "end":
                return _context47.stop();
            }
          }, _callee47, this);
        }));

        function getSignatureStatuses(_x74, _x75) {
          return _getSignatureStatuses.apply(this, arguments);
        }

        return getSignatureStatuses;
      }()
      /**
       * Fetch the current transaction count of the cluster
       */

    }, {
      key: "getTransactionCount",
      value: function () {
        var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(commitmentOrConfig) {
          var _extractCommitmentFro13, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee48$(_context48) {
            while (1) switch (_context48.prev = _context48.next) {
              case 0:
                _extractCommitmentFro13 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro13.commitment, config = _extractCommitmentFro13.config;
                args = this._buildArgs([], commitment, undefined
                /* encoding */
                , config);
                _context48.next = 4;
                return this._rpcRequest('getTransactionCount', args);

              case 4:
                unsafeRes = _context48.sent;
                res = _create(unsafeRes, jsonRpcResult(number$1()));

                if (!('error' in res)) {
                  _context48.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');

              case 8:
                return _context48.abrupt("return", res.result);

              case 9:
              case "end":
                return _context48.stop();
            }
          }, _callee48, this);
        }));

        function getTransactionCount(_x76) {
          return _getTransactionCount.apply(this, arguments);
        }

        return getTransactionCount;
      }()
      /**
       * Fetch the current total currency supply of the cluster in lamports
       *
       * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.
       */

    }, {
      key: "getTotalSupply",
      value: function () {
        var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49(commitment) {
          var result;
          return _regeneratorRuntime().wrap(function _callee49$(_context49) {
            while (1) switch (_context49.prev = _context49.next) {
              case 0:
                _context49.next = 2;
                return this.getSupply({
                  commitment: commitment,
                  excludeNonCirculatingAccountsList: true
                });

              case 2:
                result = _context49.sent;
                return _context49.abrupt("return", result.value.total);

              case 4:
              case "end":
                return _context49.stop();
            }
          }, _callee49, this);
        }));

        function getTotalSupply(_x77) {
          return _getTotalSupply.apply(this, arguments);
        }

        return getTotalSupply;
      }()
      /**
       * Fetch the cluster InflationGovernor parameters
       */

    }, {
      key: "getInflationGovernor",
      value: function () {
        var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee50$(_context50) {
            while (1) switch (_context50.prev = _context50.next) {
              case 0:
                args = this._buildArgs([], commitment);
                _context50.next = 3;
                return this._rpcRequest('getInflationGovernor', args);

              case 3:
                unsafeRes = _context50.sent;
                res = _create(unsafeRes, GetInflationGovernorRpcResult);

                if (!('error' in res)) {
                  _context50.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get inflation');

              case 7:
                return _context50.abrupt("return", res.result);

              case 8:
              case "end":
                return _context50.stop();
            }
          }, _callee50, this);
        }));

        function getInflationGovernor(_x78) {
          return _getInflationGovernor.apply(this, arguments);
        }

        return getInflationGovernor;
      }()
      /**
       * Fetch the inflation reward for a list of addresses for an epoch
       */

    }, {
      key: "getInflationReward",
      value: function () {
        var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51(addresses, epoch, commitmentOrConfig) {
          var _extractCommitmentFro14, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee51$(_context51) {
            while (1) switch (_context51.prev = _context51.next) {
              case 0:
                _extractCommitmentFro14 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro14.commitment, config = _extractCommitmentFro14.config;
                args = this._buildArgs([addresses.map(function (pubkey) {
                  return pubkey.toBase58();
                })], commitment, undefined
                /* encoding */
                , _objectSpread2(_objectSpread2({}, config), {}, {
                  epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch
                }));
                _context51.next = 4;
                return this._rpcRequest('getInflationReward', args);

              case 4:
                unsafeRes = _context51.sent;
                res = _create(unsafeRes, GetInflationRewardResult);

                if (!('error' in res)) {
                  _context51.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');

              case 8:
                return _context51.abrupt("return", res.result);

              case 9:
              case "end":
                return _context51.stop();
            }
          }, _callee51, this);
        }));

        function getInflationReward(_x79, _x80, _x81) {
          return _getInflationReward.apply(this, arguments);
        }

        return getInflationReward;
      }()
      /**
       * Fetch the specific inflation values for the current epoch
       */

    }, {
      key: "getInflationRate",
      value: function () {
        var _getInflationRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee52$(_context52) {
            while (1) switch (_context52.prev = _context52.next) {
              case 0:
                _context52.next = 2;
                return this._rpcRequest('getInflationRate', []);

              case 2:
                unsafeRes = _context52.sent;
                res = _create(unsafeRes, GetInflationRateRpcResult);

                if (!('error' in res)) {
                  _context52.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');

              case 6:
                return _context52.abrupt("return", res.result);

              case 7:
              case "end":
                return _context52.stop();
            }
          }, _callee52, this);
        }));

        function getInflationRate() {
          return _getInflationRate.apply(this, arguments);
        }

        return getInflationRate;
      }()
      /**
       * Fetch the Epoch Info parameters
       */

    }, {
      key: "getEpochInfo",
      value: function () {
        var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(commitmentOrConfig) {
          var _extractCommitmentFro15, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee53$(_context53) {
            while (1) switch (_context53.prev = _context53.next) {
              case 0:
                _extractCommitmentFro15 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro15.commitment, config = _extractCommitmentFro15.config;
                args = this._buildArgs([], commitment, undefined
                /* encoding */
                , config);
                _context53.next = 4;
                return this._rpcRequest('getEpochInfo', args);

              case 4:
                unsafeRes = _context53.sent;
                res = _create(unsafeRes, GetEpochInfoRpcResult);

                if (!('error' in res)) {
                  _context53.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');

              case 8:
                return _context53.abrupt("return", res.result);

              case 9:
              case "end":
                return _context53.stop();
            }
          }, _callee53, this);
        }));

        function getEpochInfo(_x82) {
          return _getEpochInfo.apply(this, arguments);
        }

        return getEpochInfo;
      }()
      /**
       * Fetch the Epoch Schedule parameters
       */

    }, {
      key: "getEpochSchedule",
      value: function () {
        var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
          var unsafeRes, res, epochSchedule;
          return _regeneratorRuntime().wrap(function _callee54$(_context54) {
            while (1) switch (_context54.prev = _context54.next) {
              case 0:
                _context54.next = 2;
                return this._rpcRequest('getEpochSchedule', []);

              case 2:
                unsafeRes = _context54.sent;
                res = _create(unsafeRes, GetEpochScheduleRpcResult);

                if (!('error' in res)) {
                  _context54.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');

              case 6:
                epochSchedule = res.result;
                return _context54.abrupt("return", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));

              case 8:
              case "end":
                return _context54.stop();
            }
          }, _callee54, this);
        }));

        function getEpochSchedule() {
          return _getEpochSchedule.apply(this, arguments);
        }

        return getEpochSchedule;
      }()
      /**
       * Fetch the leader schedule for the current epoch
       * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}
       */

    }, {
      key: "getLeaderSchedule",
      value: function () {
        var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee55$(_context55) {
            while (1) switch (_context55.prev = _context55.next) {
              case 0:
                _context55.next = 2;
                return this._rpcRequest('getLeaderSchedule', []);

              case 2:
                unsafeRes = _context55.sent;
                res = _create(unsafeRes, GetLeaderScheduleRpcResult);

                if (!('error' in res)) {
                  _context55.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');

              case 6:
                return _context55.abrupt("return", res.result);

              case 7:
              case "end":
                return _context55.stop();
            }
          }, _callee55, this);
        }));

        function getLeaderSchedule() {
          return _getLeaderSchedule.apply(this, arguments);
        }

        return getLeaderSchedule;
      }()
      /**
       * Fetch the minimum balance needed to exempt an account of `dataLength`
       * size from rent
       */

    }, {
      key: "getMinimumBalanceForRentExemption",
      value: function () {
        var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(dataLength, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee56$(_context56) {
            while (1) switch (_context56.prev = _context56.next) {
              case 0:
                args = this._buildArgs([dataLength], commitment);
                _context56.next = 3;
                return this._rpcRequest('getMinimumBalanceForRentExemption', args);

              case 3:
                unsafeRes = _context56.sent;
                res = _create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);

                if (!('error' in res)) {
                  _context56.next = 8;
                  break;
                }

                console.warn('Unable to fetch minimum balance for rent exemption');
                return _context56.abrupt("return", 0);

              case 8:
                return _context56.abrupt("return", res.result);

              case 9:
              case "end":
                return _context56.stop();
            }
          }, _callee56, this);
        }));

        function getMinimumBalanceForRentExemption(_x83, _x84) {
          return _getMinimumBalanceForRentExemption.apply(this, arguments);
        }

        return getMinimumBalanceForRentExemption;
      }()
      /**
       * Fetch a recent blockhash from the cluster, return with context
       * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}
       *
       * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.
       */

    }, {
      key: "getRecentBlockhashAndContext",
      value: function () {
        var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(commitment) {
          var _yield$this$getLatest, context, blockhash, feeCalculator;

          return _regeneratorRuntime().wrap(function _callee57$(_context57) {
            while (1) switch (_context57.prev = _context57.next) {
              case 0:
                _context57.next = 2;
                return this.getLatestBlockhashAndContext(commitment);

              case 2:
                _yield$this$getLatest = _context57.sent;
                context = _yield$this$getLatest.context;
                blockhash = _yield$this$getLatest.value.blockhash;

                _context57.t0 = function toJSON() {
                  return {};
                };

                feeCalculator = {
                  get lamportsPerSignature() {
                    throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');
                  },

                  toJSON: _context57.t0
                };
                return _context57.abrupt("return", {
                  context: context,
                  value: {
                    blockhash: blockhash,
                    feeCalculator: feeCalculator
                  }
                });

              case 8:
              case "end":
                return _context57.stop();
            }
          }, _callee57, this);
        }));

        function getRecentBlockhashAndContext(_x85) {
          return _getRecentBlockhashAndContext.apply(this, arguments);
        }

        return getRecentBlockhashAndContext;
      }()
      /**
       * Fetch recent performance samples
       * @return {Promise<Array<PerfSample>>}
       */

    }, {
      key: "getRecentPerformanceSamples",
      value: function () {
        var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(limit) {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee58$(_context58) {
            while (1) switch (_context58.prev = _context58.next) {
              case 0:
                _context58.next = 2;
                return this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);

              case 2:
                unsafeRes = _context58.sent;
                res = _create(unsafeRes, GetRecentPerformanceSamplesRpcResult);

                if (!('error' in res)) {
                  _context58.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');

              case 6:
                return _context58.abrupt("return", res.result);

              case 7:
              case "end":
                return _context58.stop();
            }
          }, _callee58, this);
        }));

        function getRecentPerformanceSamples(_x86) {
          return _getRecentPerformanceSamples.apply(this, arguments);
        }

        return getRecentPerformanceSamples;
      }()
      /**
       * Fetch the fee calculator for a recent blockhash from the cluster, return with context
       *
       * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.
       */

    }, {
      key: "getFeeCalculatorForBlockhash",
      value: function () {
        var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(blockhash, commitment) {
          var args, unsafeRes, res, _res$result, context, value;

          return _regeneratorRuntime().wrap(function _callee59$(_context59) {
            while (1) switch (_context59.prev = _context59.next) {
              case 0:
                args = this._buildArgs([blockhash], commitment);
                _context59.next = 3;
                return this._rpcRequest('getFeeCalculatorForBlockhash', args);

              case 3:
                unsafeRes = _context59.sent;
                res = _create(unsafeRes, GetFeeCalculatorRpcResult);

                if (!('error' in res)) {
                  _context59.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');

              case 7:
                _res$result = res.result, context = _res$result.context, value = _res$result.value;
                return _context59.abrupt("return", {
                  context: context,
                  value: value !== null ? value.feeCalculator : null
                });

              case 9:
              case "end":
                return _context59.stop();
            }
          }, _callee59, this);
        }));

        function getFeeCalculatorForBlockhash(_x87, _x88) {
          return _getFeeCalculatorForBlockhash.apply(this, arguments);
        }

        return getFeeCalculatorForBlockhash;
      }()
      /**
       * Fetch the fee for a message from the cluster, return with context
       */

    }, {
      key: "getFeeForMessage",
      value: function () {
        var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(message, commitment) {
          var wireMessage, args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee60$(_context60) {
            while (1) switch (_context60.prev = _context60.next) {
              case 0:
                wireMessage = toBuffer(message.serialize()).toString('base64');
                args = this._buildArgs([wireMessage], commitment);
                _context60.next = 4;
                return this._rpcRequest('getFeeForMessage', args);

              case 4:
                unsafeRes = _context60.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(nullable(number$1())));

                if (!('error' in res)) {
                  _context60.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');

              case 8:
                if (!(res.result === null)) {
                  _context60.next = 10;
                  break;
                }

                throw new Error('invalid blockhash');

              case 10:
                return _context60.abrupt("return", res.result);

              case 11:
              case "end":
                return _context60.stop();
            }
          }, _callee60, this);
        }));

        function getFeeForMessage(_x89, _x90) {
          return _getFeeForMessage.apply(this, arguments);
        }

        return getFeeForMessage;
      }()
      /**
       * Fetch a list of prioritization fees from recent blocks.
       */

    }, {
      key: "getRecentPrioritizationFees",
      value: function () {
        var _getRecentPrioritizationFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(config) {
          var _config$lockedWritabl;

          var accounts, args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee61$(_context61) {
            while (1) switch (_context61.prev = _context61.next) {
              case 0:
                accounts = config === null || config === void 0 ? void 0 : (_config$lockedWritabl = config.lockedWritableAccounts) === null || _config$lockedWritabl === void 0 ? void 0 : _config$lockedWritabl.map(function (key) {
                  return key.toBase58();
                });
                args = accounts !== null && accounts !== void 0 && accounts.length ? [accounts] : [];
                _context61.next = 4;
                return this._rpcRequest('getRecentPrioritizationFees', args);

              case 4:
                unsafeRes = _context61.sent;
                res = _create(unsafeRes, GetRecentPrioritizationFeesRpcResult);

                if (!('error' in res)) {
                  _context61.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');

              case 8:
                return _context61.abrupt("return", res.result);

              case 9:
              case "end":
                return _context61.stop();
            }
          }, _callee61, this);
        }));

        function getRecentPrioritizationFees(_x91) {
          return _getRecentPrioritizationFees.apply(this, arguments);
        }

        return getRecentPrioritizationFees;
      }()
      /**
       * Fetch a recent blockhash from the cluster
       * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}
       *
       * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.
       */

    }, {
      key: "getRecentBlockhash",
      value: function () {
        var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(commitment) {
          var res;
          return _regeneratorRuntime().wrap(function _callee62$(_context62) {
            while (1) switch (_context62.prev = _context62.next) {
              case 0:
                _context62.prev = 0;
                _context62.next = 3;
                return this.getRecentBlockhashAndContext(commitment);

              case 3:
                res = _context62.sent;
                return _context62.abrupt("return", res.value);

              case 7:
                _context62.prev = 7;
                _context62.t0 = _context62["catch"](0);
                throw new Error('failed to get recent blockhash: ' + _context62.t0);

              case 10:
              case "end":
                return _context62.stop();
            }
          }, _callee62, this, [[0, 7]]);
        }));

        function getRecentBlockhash(_x92) {
          return _getRecentBlockhash.apply(this, arguments);
        }

        return getRecentBlockhash;
      }()
      /**
       * Fetch the latest blockhash from the cluster
       * @return {Promise<BlockhashWithExpiryBlockHeight>}
       */

    }, {
      key: "getLatestBlockhash",
      value: function () {
        var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(commitmentOrConfig) {
          var res;
          return _regeneratorRuntime().wrap(function _callee63$(_context63) {
            while (1) switch (_context63.prev = _context63.next) {
              case 0:
                _context63.prev = 0;
                _context63.next = 3;
                return this.getLatestBlockhashAndContext(commitmentOrConfig);

              case 3:
                res = _context63.sent;
                return _context63.abrupt("return", res.value);

              case 7:
                _context63.prev = 7;
                _context63.t0 = _context63["catch"](0);
                throw new Error('failed to get recent blockhash: ' + _context63.t0);

              case 10:
              case "end":
                return _context63.stop();
            }
          }, _callee63, this, [[0, 7]]);
        }));

        function getLatestBlockhash(_x93) {
          return _getLatestBlockhash.apply(this, arguments);
        }

        return getLatestBlockhash;
      }()
      /**
       * Fetch the latest blockhash from the cluster
       * @return {Promise<BlockhashWithExpiryBlockHeight>}
       */

    }, {
      key: "getLatestBlockhashAndContext",
      value: function () {
        var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(commitmentOrConfig) {
          var _extractCommitmentFro16, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee64$(_context64) {
            while (1) switch (_context64.prev = _context64.next) {
              case 0:
                _extractCommitmentFro16 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro16.commitment, config = _extractCommitmentFro16.config;
                args = this._buildArgs([], commitment, undefined
                /* encoding */
                , config);
                _context64.next = 4;
                return this._rpcRequest('getLatestBlockhash', args);

              case 4:
                unsafeRes = _context64.sent;
                res = _create(unsafeRes, GetLatestBlockhashRpcResult);

                if (!('error' in res)) {
                  _context64.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');

              case 8:
                return _context64.abrupt("return", res.result);

              case 9:
              case "end":
                return _context64.stop();
            }
          }, _callee64, this);
        }));

        function getLatestBlockhashAndContext(_x94) {
          return _getLatestBlockhashAndContext.apply(this, arguments);
        }

        return getLatestBlockhashAndContext;
      }()
      /**
       * Returns whether a blockhash is still valid or not
       */

    }, {
      key: "isBlockhashValid",
      value: function () {
        var _isBlockhashValid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(blockhash, rawConfig) {
          var _extractCommitmentFro17, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee65$(_context65) {
            while (1) switch (_context65.prev = _context65.next) {
              case 0:
                _extractCommitmentFro17 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro17.commitment, config = _extractCommitmentFro17.config;
                args = this._buildArgs([blockhash], commitment, undefined
                /* encoding */
                , config);
                _context65.next = 4;
                return this._rpcRequest('isBlockhashValid', args);

              case 4:
                unsafeRes = _context65.sent;
                res = _create(unsafeRes, IsBlockhashValidRpcResult);

                if (!('error' in res)) {
                  _context65.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');

              case 8:
                return _context65.abrupt("return", res.result);

              case 9:
              case "end":
                return _context65.stop();
            }
          }, _callee65, this);
        }));

        function isBlockhashValid(_x95, _x96) {
          return _isBlockhashValid.apply(this, arguments);
        }

        return isBlockhashValid;
      }()
      /**
       * Fetch the node version
       */

    }, {
      key: "getVersion",
      value: function () {
        var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee66$(_context66) {
            while (1) switch (_context66.prev = _context66.next) {
              case 0:
                _context66.next = 2;
                return this._rpcRequest('getVersion', []);

              case 2:
                unsafeRes = _context66.sent;
                res = _create(unsafeRes, jsonRpcResult(VersionResult));

                if (!('error' in res)) {
                  _context66.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get version');

              case 6:
                return _context66.abrupt("return", res.result);

              case 7:
              case "end":
                return _context66.stop();
            }
          }, _callee66, this);
        }));

        function getVersion() {
          return _getVersion.apply(this, arguments);
        }

        return getVersion;
      }()
      /**
       * Fetch the genesis hash
       */

    }, {
      key: "getGenesisHash",
      value: function () {
        var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee67$(_context67) {
            while (1) switch (_context67.prev = _context67.next) {
              case 0:
                _context67.next = 2;
                return this._rpcRequest('getGenesisHash', []);

              case 2:
                unsafeRes = _context67.sent;
                res = _create(unsafeRes, jsonRpcResult(string()));

                if (!('error' in res)) {
                  _context67.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');

              case 6:
                return _context67.abrupt("return", res.result);

              case 7:
              case "end":
                return _context67.stop();
            }
          }, _callee67, this);
        }));

        function getGenesisHash() {
          return _getGenesisHash.apply(this, arguments);
        }

        return getGenesisHash;
      }()
      /**
       * Fetch a processed block from the cluster.
       *
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */

      /**
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by
       * setting the `maxSupportedTransactionVersion` property.
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Fetch a processed block from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Fetch a processed block from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "getBlock",
      value: function () {
        var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(slot, rawConfig) {
          var _extractCommitmentFro18, commitment, config, args, unsafeRes, res, _res, _res2, result;

          return _regeneratorRuntime().wrap(function _callee68$(_context68) {
            while (1) switch (_context68.prev = _context68.next) {
              case 0:
                _extractCommitmentFro18 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro18.commitment, config = _extractCommitmentFro18.config;
                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined
                /* encoding */
                , config);
                _context68.next = 4;
                return this._rpcRequest('getBlock', args);

              case 4:
                unsafeRes = _context68.sent;
                _context68.prev = 5;
                _context68.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;
                _context68.next = _context68.t0 === 'accounts' ? 9 : _context68.t0 === 'none' ? 13 : 17;
                break;

              case 9:
                res = _create(unsafeRes, GetAccountsModeBlockRpcResult);

                if (!('error' in res)) {
                  _context68.next = 12;
                  break;
                }

                throw res.error;

              case 12:
                return _context68.abrupt("return", res.result);

              case 13:
                _res = _create(unsafeRes, GetNoneModeBlockRpcResult);

                if (!('error' in _res)) {
                  _context68.next = 16;
                  break;
                }

                throw _res.error;

              case 16:
                return _context68.abrupt("return", _res.result);

              case 17:
                _res2 = _create(unsafeRes, GetBlockRpcResult);

                if (!('error' in _res2)) {
                  _context68.next = 20;
                  break;
                }

                throw _res2.error;

              case 20:
                result = _res2.result;
                return _context68.abrupt("return", result ? _objectSpread2(_objectSpread2({}, result), {}, {
                  transactions: result.transactions.map(function (_ref37) {
                    var transaction = _ref37.transaction,
                        meta = _ref37.meta,
                        version = _ref37.version;
                    return {
                      meta: meta,
                      transaction: _objectSpread2(_objectSpread2({}, transaction), {}, {
                        message: versionedMessageFromResponse(version, transaction.message)
                      }),
                      version: version
                    };
                  })
                }) : null);

              case 22:
                _context68.next = 27;
                break;

              case 24:
                _context68.prev = 24;
                _context68.t1 = _context68["catch"](5);
                throw new SolanaJSONRPCError(_context68.t1, 'failed to get confirmed block');

              case 27:
              case "end":
                return _context68.stop();
            }
          }, _callee68, this, [[5, 24]]);
        }));

        function getBlock(_x97, _x98) {
          return _getBlock.apply(this, arguments);
        }

        return getBlock;
      }()
      /**
       * Fetch parsed transaction details for a confirmed or finalized block
       */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "getParsedBlock",
      value: function () {
        var _getParsedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(slot, rawConfig) {
          var _extractCommitmentFro19, commitment, config, args, unsafeRes, res, _res3, _res4;

          return _regeneratorRuntime().wrap(function _callee69$(_context69) {
            while (1) switch (_context69.prev = _context69.next) {
              case 0:
                _extractCommitmentFro19 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro19.commitment, config = _extractCommitmentFro19.config;
                args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);
                _context69.next = 4;
                return this._rpcRequest('getBlock', args);

              case 4:
                unsafeRes = _context69.sent;
                _context69.prev = 5;
                _context69.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;
                _context69.next = _context69.t0 === 'accounts' ? 9 : _context69.t0 === 'none' ? 13 : 17;
                break;

              case 9:
                res = _create(unsafeRes, GetParsedAccountsModeBlockRpcResult);

                if (!('error' in res)) {
                  _context69.next = 12;
                  break;
                }

                throw res.error;

              case 12:
                return _context69.abrupt("return", res.result);

              case 13:
                _res3 = _create(unsafeRes, GetParsedNoneModeBlockRpcResult);

                if (!('error' in _res3)) {
                  _context69.next = 16;
                  break;
                }

                throw _res3.error;

              case 16:
                return _context69.abrupt("return", _res3.result);

              case 17:
                _res4 = _create(unsafeRes, GetParsedBlockRpcResult);

                if (!('error' in _res4)) {
                  _context69.next = 20;
                  break;
                }

                throw _res4.error;

              case 20:
                return _context69.abrupt("return", _res4.result);

              case 21:
                _context69.next = 26;
                break;

              case 23:
                _context69.prev = 23;
                _context69.t1 = _context69["catch"](5);
                throw new SolanaJSONRPCError(_context69.t1, 'failed to get block');

              case 26:
              case "end":
                return _context69.stop();
            }
          }, _callee69, this, [[5, 23]]);
        }));

        function getParsedBlock(_x99, _x100) {
          return _getParsedBlock.apply(this, arguments);
        }

        return getParsedBlock;
      }()
      /*
       * Returns recent block production information from the current or previous epoch
       */

    }, {
      key: "getBlockProduction",
      value: function () {
        var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(configOrCommitment) {
          var extra, commitment, c, rest, args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee70$(_context70) {
            while (1) switch (_context70.prev = _context70.next) {
              case 0:
                if (typeof configOrCommitment === 'string') {
                  commitment = configOrCommitment;
                } else if (configOrCommitment) {
                  c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded3);
                  commitment = c;
                  extra = rest;
                }

                args = this._buildArgs([], commitment, 'base64', extra);
                _context70.next = 4;
                return this._rpcRequest('getBlockProduction', args);

              case 4:
                unsafeRes = _context70.sent;
                res = _create(unsafeRes, BlockProductionResponseStruct);

                if (!('error' in res)) {
                  _context70.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get block production information');

              case 8:
                return _context70.abrupt("return", res.result);

              case 9:
              case "end":
                return _context70.stop();
            }
          }, _callee70, this);
        }));

        function getBlockProduction(_x101) {
          return _getBlockProduction.apply(this, arguments);
        }

        return getBlockProduction;
      }()
      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       *
       * @deprecated Instead, call `getTransaction` using a
       * `GetVersionedTransactionConfig` by setting the
       * `maxSupportedTransactionVersion` property.
       */

      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Fetch a confirmed or finalized transaction from the cluster.
       */
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "getTransaction",
      value: function () {
        var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(signature, rawConfig) {
          var _extractCommitmentFro20, commitment, config, args, unsafeRes, res, result;

          return _regeneratorRuntime().wrap(function _callee71$(_context71) {
            while (1) switch (_context71.prev = _context71.next) {
              case 0:
                _extractCommitmentFro20 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro20.commitment, config = _extractCommitmentFro20.config;
                args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined
                /* encoding */
                , config);
                _context71.next = 4;
                return this._rpcRequest('getTransaction', args);

              case 4:
                unsafeRes = _context71.sent;
                res = _create(unsafeRes, GetTransactionRpcResult);

                if (!('error' in res)) {
                  _context71.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');

              case 8:
                result = res.result;

                if (result) {
                  _context71.next = 11;
                  break;
                }

                return _context71.abrupt("return", result);

              case 11:
                return _context71.abrupt("return", _objectSpread2(_objectSpread2({}, result), {}, {
                  transaction: _objectSpread2(_objectSpread2({}, result.transaction), {}, {
                    message: versionedMessageFromResponse(result.version, result.transaction.message)
                  })
                }));

              case 12:
              case "end":
                return _context71.stop();
            }
          }, _callee71, this);
        }));

        function getTransaction(_x102, _x103) {
          return _getTransaction.apply(this, arguments);
        }

        return getTransaction;
      }()
      /**
       * Fetch parsed transaction details for a confirmed or finalized transaction
       */

    }, {
      key: "getParsedTransaction",
      value: function () {
        var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(signature, commitmentOrConfig) {
          var _extractCommitmentFro21, commitment, config, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee72$(_context72) {
            while (1) switch (_context72.prev = _context72.next) {
              case 0:
                _extractCommitmentFro21 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro21.commitment, config = _extractCommitmentFro21.config;
                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);
                _context72.next = 4;
                return this._rpcRequest('getTransaction', args);

              case 4:
                unsafeRes = _context72.sent;
                res = _create(unsafeRes, GetParsedTransactionRpcResult);

                if (!('error' in res)) {
                  _context72.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');

              case 8:
                return _context72.abrupt("return", res.result);

              case 9:
              case "end":
                return _context72.stop();
            }
          }, _callee72, this);
        }));

        function getParsedTransaction(_x104, _x105) {
          return _getParsedTransaction.apply(this, arguments);
        }

        return getParsedTransaction;
      }()
      /**
       * Fetch parsed transaction details for a batch of confirmed transactions
       */

    }, {
      key: "getParsedTransactions",
      value: function () {
        var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(signatures, commitmentOrConfig) {
          var _this21 = this;

          var _extractCommitmentFro22, commitment, config, batch, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee73$(_context73) {
            while (1) switch (_context73.prev = _context73.next) {
              case 0:
                _extractCommitmentFro22 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro22.commitment, config = _extractCommitmentFro22.config;
                batch = signatures.map(function (signature) {
                  var args = _this21._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);

                  return {
                    methodName: 'getTransaction',
                    args: args
                  };
                });
                _context73.next = 4;
                return this._rpcBatchRequest(batch);

              case 4:
                unsafeRes = _context73.sent;
                res = unsafeRes.map(function (unsafeRes) {
                  var res = _create(unsafeRes, GetParsedTransactionRpcResult);

                  if ('error' in res) {
                    throw new SolanaJSONRPCError(res.error, 'failed to get transactions');
                  }

                  return res.result;
                });
                return _context73.abrupt("return", res);

              case 7:
              case "end":
                return _context73.stop();
            }
          }, _callee73, this);
        }));

        function getParsedTransactions(_x106, _x107) {
          return _getParsedTransactions.apply(this, arguments);
        }

        return getParsedTransactions;
      }()
      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.
       *
       * @deprecated Instead, call `getTransactions` using a
       * `GetVersionedTransactionConfig` by setting the
       * `maxSupportedTransactionVersion` property.
       */

      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link
       * VersionedTransactionResponse}.
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Fetch transaction details for a batch of confirmed transactions.
       * Similar to {@link getParsedTransactions} but returns a {@link
       * VersionedTransactionResponse}.
       */
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "getTransactions",
      value: function () {
        var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74(signatures, commitmentOrConfig) {
          var _this22 = this;

          var _extractCommitmentFro23, commitment, config, batch, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee74$(_context74) {
            while (1) switch (_context74.prev = _context74.next) {
              case 0:
                _extractCommitmentFro23 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro23.commitment, config = _extractCommitmentFro23.config;
                batch = signatures.map(function (signature) {
                  var args = _this22._buildArgsAtLeastConfirmed([signature], commitment, undefined
                  /* encoding */
                  , config);

                  return {
                    methodName: 'getTransaction',
                    args: args
                  };
                });
                _context74.next = 4;
                return this._rpcBatchRequest(batch);

              case 4:
                unsafeRes = _context74.sent;
                res = unsafeRes.map(function (unsafeRes) {
                  var res = _create(unsafeRes, GetTransactionRpcResult);

                  if ('error' in res) {
                    throw new SolanaJSONRPCError(res.error, 'failed to get transactions');
                  }

                  var result = res.result;
                  if (!result) return result;
                  return _objectSpread2(_objectSpread2({}, result), {}, {
                    transaction: _objectSpread2(_objectSpread2({}, result.transaction), {}, {
                      message: versionedMessageFromResponse(result.version, result.transaction.message)
                    })
                  });
                });
                return _context74.abrupt("return", res);

              case 7:
              case "end":
                return _context74.stop();
            }
          }, _callee74, this);
        }));

        function getTransactions(_x108, _x109) {
          return _getTransactions.apply(this, arguments);
        }

        return getTransactions;
      }()
      /**
       * Fetch a list of Transactions and transaction statuses from the cluster
       * for a confirmed block.
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.
       */

    }, {
      key: "getConfirmedBlock",
      value: function () {
        var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(slot, commitment) {
          var args, unsafeRes, res, result, block;
          return _regeneratorRuntime().wrap(function _callee75$(_context75) {
            while (1) switch (_context75.prev = _context75.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([slot], commitment);
                _context75.next = 3;
                return this._rpcRequest('getBlock', args);

              case 3:
                unsafeRes = _context75.sent;
                res = _create(unsafeRes, GetConfirmedBlockRpcResult);

                if (!('error' in res)) {
                  _context75.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');

              case 7:
                result = res.result;

                if (result) {
                  _context75.next = 10;
                  break;
                }

                throw new Error('Confirmed block ' + slot + ' not found');

              case 10:
                block = _objectSpread2(_objectSpread2({}, result), {}, {
                  transactions: result.transactions.map(function (_ref38) {
                    var transaction = _ref38.transaction,
                        meta = _ref38.meta;
                    var message = new Message(transaction.message);
                    return {
                      meta: meta,
                      transaction: _objectSpread2(_objectSpread2({}, transaction), {}, {
                        message: message
                      })
                    };
                  })
                });
                return _context75.abrupt("return", _objectSpread2(_objectSpread2({}, block), {}, {
                  transactions: block.transactions.map(function (_ref39) {
                    var transaction = _ref39.transaction,
                        meta = _ref39.meta;
                    return {
                      meta: meta,
                      transaction: Transaction.populate(transaction.message, transaction.signatures)
                    };
                  })
                }));

              case 12:
              case "end":
                return _context75.stop();
            }
          }, _callee75, this);
        }));

        function getConfirmedBlock(_x110, _x111) {
          return _getConfirmedBlock.apply(this, arguments);
        }

        return getConfirmedBlock;
      }()
      /**
       * Fetch confirmed blocks between two slots
       */

    }, {
      key: "getBlocks",
      value: function () {
        var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76(startSlot, endSlot, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee76$(_context76) {
            while (1) switch (_context76.prev = _context76.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);
                _context76.next = 3;
                return this._rpcRequest('getBlocks', args);

              case 3:
                unsafeRes = _context76.sent;
                res = _create(unsafeRes, jsonRpcResult(array(number$1())));

                if (!('error' in res)) {
                  _context76.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get blocks');

              case 7:
                return _context76.abrupt("return", res.result);

              case 8:
              case "end":
                return _context76.stop();
            }
          }, _callee76, this);
        }));

        function getBlocks(_x112, _x113, _x114) {
          return _getBlocks.apply(this, arguments);
        }

        return getBlocks;
      }()
      /**
       * Fetch a list of Signatures from the cluster for a block, excluding rewards
       */

    }, {
      key: "getBlockSignatures",
      value: function () {
        var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(slot, commitment) {
          var args, unsafeRes, res, result;
          return _regeneratorRuntime().wrap(function _callee77$(_context77) {
            while (1) switch (_context77.prev = _context77.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {
                  transactionDetails: 'signatures',
                  rewards: false
                });
                _context77.next = 3;
                return this._rpcRequest('getBlock', args);

              case 3:
                unsafeRes = _context77.sent;
                res = _create(unsafeRes, GetBlockSignaturesRpcResult);

                if (!('error' in res)) {
                  _context77.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get block');

              case 7:
                result = res.result;

                if (result) {
                  _context77.next = 10;
                  break;
                }

                throw new Error('Block ' + slot + ' not found');

              case 10:
                return _context77.abrupt("return", result);

              case 11:
              case "end":
                return _context77.stop();
            }
          }, _callee77, this);
        }));

        function getBlockSignatures(_x115, _x116) {
          return _getBlockSignatures.apply(this, arguments);
        }

        return getBlockSignatures;
      }()
      /**
       * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.
       */

    }, {
      key: "getConfirmedBlockSignatures",
      value: function () {
        var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(slot, commitment) {
          var args, unsafeRes, res, result;
          return _regeneratorRuntime().wrap(function _callee78$(_context78) {
            while (1) switch (_context78.prev = _context78.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {
                  transactionDetails: 'signatures',
                  rewards: false
                });
                _context78.next = 3;
                return this._rpcRequest('getBlock', args);

              case 3:
                unsafeRes = _context78.sent;
                res = _create(unsafeRes, GetBlockSignaturesRpcResult);

                if (!('error' in res)) {
                  _context78.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');

              case 7:
                result = res.result;

                if (result) {
                  _context78.next = 10;
                  break;
                }

                throw new Error('Confirmed block ' + slot + ' not found');

              case 10:
                return _context78.abrupt("return", result);

              case 11:
              case "end":
                return _context78.stop();
            }
          }, _callee78, this);
        }));

        function getConfirmedBlockSignatures(_x117, _x118) {
          return _getConfirmedBlockSignatures.apply(this, arguments);
        }

        return getConfirmedBlockSignatures;
      }()
      /**
       * Fetch a transaction details for a confirmed transaction
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.
       */

    }, {
      key: "getConfirmedTransaction",
      value: function () {
        var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(signature, commitment) {
          var args, unsafeRes, res, result, message, signatures;
          return _regeneratorRuntime().wrap(function _callee79$(_context79) {
            while (1) switch (_context79.prev = _context79.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([signature], commitment);
                _context79.next = 3;
                return this._rpcRequest('getTransaction', args);

              case 3:
                unsafeRes = _context79.sent;
                res = _create(unsafeRes, GetTransactionRpcResult);

                if (!('error' in res)) {
                  _context79.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get transaction');

              case 7:
                result = res.result;

                if (result) {
                  _context79.next = 10;
                  break;
                }

                return _context79.abrupt("return", result);

              case 10:
                message = new Message(result.transaction.message);
                signatures = result.transaction.signatures;
                return _context79.abrupt("return", _objectSpread2(_objectSpread2({}, result), {}, {
                  transaction: Transaction.populate(message, signatures)
                }));

              case 13:
              case "end":
                return _context79.stop();
            }
          }, _callee79, this);
        }));

        function getConfirmedTransaction(_x119, _x120) {
          return _getConfirmedTransaction.apply(this, arguments);
        }

        return getConfirmedTransaction;
      }()
      /**
       * Fetch parsed transaction details for a confirmed transaction
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.
       */

    }, {
      key: "getParsedConfirmedTransaction",
      value: function () {
        var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(signature, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee80$(_context80) {
            while (1) switch (_context80.prev = _context80.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');
                _context80.next = 3;
                return this._rpcRequest('getTransaction', args);

              case 3:
                unsafeRes = _context80.sent;
                res = _create(unsafeRes, GetParsedTransactionRpcResult);

                if (!('error' in res)) {
                  _context80.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');

              case 7:
                return _context80.abrupt("return", res.result);

              case 8:
              case "end":
                return _context80.stop();
            }
          }, _callee80, this);
        }));

        function getParsedConfirmedTransaction(_x121, _x122) {
          return _getParsedConfirmedTransaction.apply(this, arguments);
        }

        return getParsedConfirmedTransaction;
      }()
      /**
       * Fetch parsed transaction details for a batch of confirmed transactions
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.
       */

    }, {
      key: "getParsedConfirmedTransactions",
      value: function () {
        var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81(signatures, commitment) {
          var _this23 = this;

          var batch, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee81$(_context81) {
            while (1) switch (_context81.prev = _context81.next) {
              case 0:
                batch = signatures.map(function (signature) {
                  var args = _this23._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');

                  return {
                    methodName: 'getTransaction',
                    args: args
                  };
                });
                _context81.next = 3;
                return this._rpcBatchRequest(batch);

              case 3:
                unsafeRes = _context81.sent;
                res = unsafeRes.map(function (unsafeRes) {
                  var res = _create(unsafeRes, GetParsedTransactionRpcResult);

                  if ('error' in res) {
                    throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');
                  }

                  return res.result;
                });
                return _context81.abrupt("return", res);

              case 6:
              case "end":
                return _context81.stop();
            }
          }, _callee81, this);
        }));

        function getParsedConfirmedTransactions(_x123, _x124) {
          return _getParsedConfirmedTransactions.apply(this, arguments);
        }

        return getParsedConfirmedTransactions;
      }()
      /**
       * Fetch a list of all the confirmed signatures for transactions involving an address
       * within a specified slot range. Max range allowed is 10,000 slots.
       *
       * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.
       *
       * @param address queried address
       * @param startSlot start slot, inclusive
       * @param endSlot end slot, inclusive
       */

    }, {
      key: "getConfirmedSignaturesForAddress",
      value: function () {
        var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82(address, startSlot, endSlot) {
          var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;

          return _regeneratorRuntime().wrap(function _callee82$(_context82) {
            while (1) switch (_context82.prev = _context82.next) {
              case 0:
                options = {};
                _context82.next = 3;
                return this.getFirstAvailableBlock();

              case 3:
                firstAvailableBlock = _context82.sent;

              case 4:
                if ('until' in options) {
                  _context82.next = 24;
                  break;
                }

                startSlot--;

                if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {
                  _context82.next = 8;
                  break;
                }

                return _context82.abrupt("break", 24);

              case 8:
                _context82.prev = 8;
                _context82.next = 11;
                return this.getConfirmedBlockSignatures(startSlot, 'finalized');

              case 11:
                block = _context82.sent;

                if (block.signatures.length > 0) {
                  options.until = block.signatures[block.signatures.length - 1].toString();
                }

                _context82.next = 22;
                break;

              case 15:
                _context82.prev = 15;
                _context82.t0 = _context82["catch"](8);

                if (!(_context82.t0 instanceof Error && _context82.t0.message.includes('skipped'))) {
                  _context82.next = 21;
                  break;
                }

                return _context82.abrupt("continue", 4);

              case 21:
                throw _context82.t0;

              case 22:
                _context82.next = 4;
                break;

              case 24:
                _context82.next = 26;
                return this.getSlot('finalized');

              case 26:
                highestConfirmedRoot = _context82.sent;

              case 27:
                if ('before' in options) {
                  _context82.next = 47;
                  break;
                }

                endSlot++;

                if (!(endSlot > highestConfirmedRoot)) {
                  _context82.next = 31;
                  break;
                }

                return _context82.abrupt("break", 47);

              case 31:
                _context82.prev = 31;
                _context82.next = 34;
                return this.getConfirmedBlockSignatures(endSlot);

              case 34:
                _block = _context82.sent;

                if (_block.signatures.length > 0) {
                  options.before = _block.signatures[_block.signatures.length - 1].toString();
                }

                _context82.next = 45;
                break;

              case 38:
                _context82.prev = 38;
                _context82.t1 = _context82["catch"](31);

                if (!(_context82.t1 instanceof Error && _context82.t1.message.includes('skipped'))) {
                  _context82.next = 44;
                  break;
                }

                return _context82.abrupt("continue", 27);

              case 44:
                throw _context82.t1;

              case 45:
                _context82.next = 27;
                break;

              case 47:
                _context82.next = 49;
                return this.getConfirmedSignaturesForAddress2(address, options);

              case 49:
                confirmedSignatureInfo = _context82.sent;
                return _context82.abrupt("return", confirmedSignatureInfo.map(function (info) {
                  return info.signature;
                }));

              case 51:
              case "end":
                return _context82.stop();
            }
          }, _callee82, this, [[8, 15], [31, 38]]);
        }));

        function getConfirmedSignaturesForAddress(_x125, _x126, _x127) {
          return _getConfirmedSignaturesForAddress.apply(this, arguments);
        }

        return getConfirmedSignaturesForAddress;
      }()
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.
       */

    }, {
      key: "getConfirmedSignaturesForAddress2",
      value: function () {
        var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(address, options, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee83$(_context83) {
            while (1) switch (_context83.prev = _context83.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);
                _context83.next = 3;
                return this._rpcRequest('getConfirmedSignaturesForAddress2', args);

              case 3:
                unsafeRes = _context83.sent;
                res = _create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);

                if (!('error' in res)) {
                  _context83.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');

              case 7:
                return _context83.abrupt("return", res.result);

              case 8:
              case "end":
                return _context83.stop();
            }
          }, _callee83, this);
        }));

        function getConfirmedSignaturesForAddress2(_x128, _x129, _x130) {
          return _getConfirmedSignaturesForAddress2.apply(this, arguments);
        }

        return getConfirmedSignaturesForAddress2;
      }()
      /**
       * Returns confirmed signatures for transactions involving an
       * address backwards in time from the provided signature or most recent confirmed block
       *
       *
       * @param address queried address
       * @param options
       */

    }, {
      key: "getSignaturesForAddress",
      value: function () {
        var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84(address, options, commitment) {
          var args, unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee84$(_context84) {
            while (1) switch (_context84.prev = _context84.next) {
              case 0:
                args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);
                _context84.next = 3;
                return this._rpcRequest('getSignaturesForAddress', args);

              case 3:
                unsafeRes = _context84.sent;
                res = _create(unsafeRes, GetSignaturesForAddressRpcResult);

                if (!('error' in res)) {
                  _context84.next = 7;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');

              case 7:
                return _context84.abrupt("return", res.result);

              case 8:
              case "end":
                return _context84.stop();
            }
          }, _callee84, this);
        }));

        function getSignaturesForAddress(_x131, _x132, _x133) {
          return _getSignaturesForAddress.apply(this, arguments);
        }

        return getSignaturesForAddress;
      }()
    }, {
      key: "getAddressLookupTable",
      value: function () {
        var _getAddressLookupTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85(accountKey, config) {
          var _yield$this$getAccoun, context, accountInfo, value;

          return _regeneratorRuntime().wrap(function _callee85$(_context85) {
            while (1) switch (_context85.prev = _context85.next) {
              case 0:
                _context85.next = 2;
                return this.getAccountInfoAndContext(accountKey, config);

              case 2:
                _yield$this$getAccoun = _context85.sent;
                context = _yield$this$getAccoun.context;
                accountInfo = _yield$this$getAccoun.value;
                value = null;

                if (accountInfo !== null) {
                  value = new AddressLookupTableAccount({
                    key: accountKey,
                    state: AddressLookupTableAccount.deserialize(accountInfo.data)
                  });
                }

                return _context85.abrupt("return", {
                  context: context,
                  value: value
                });

              case 8:
              case "end":
                return _context85.stop();
            }
          }, _callee85, this);
        }));

        function getAddressLookupTable(_x134, _x135) {
          return _getAddressLookupTable.apply(this, arguments);
        }

        return getAddressLookupTable;
      }()
      /**
       * Fetch the contents of a Nonce account from the cluster, return with context
       */

    }, {
      key: "getNonceAndContext",
      value: function () {
        var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86(nonceAccount, commitmentOrConfig) {
          var _yield$this$getAccoun2, context, accountInfo, value;

          return _regeneratorRuntime().wrap(function _callee86$(_context86) {
            while (1) switch (_context86.prev = _context86.next) {
              case 0:
                _context86.next = 2;
                return this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);

              case 2:
                _yield$this$getAccoun2 = _context86.sent;
                context = _yield$this$getAccoun2.context;
                accountInfo = _yield$this$getAccoun2.value;
                value = null;

                if (accountInfo !== null) {
                  value = NonceAccount.fromAccountData(accountInfo.data);
                }

                return _context86.abrupt("return", {
                  context: context,
                  value: value
                });

              case 8:
              case "end":
                return _context86.stop();
            }
          }, _callee86, this);
        }));

        function getNonceAndContext(_x136, _x137) {
          return _getNonceAndContext.apply(this, arguments);
        }

        return getNonceAndContext;
      }()
      /**
       * Fetch the contents of a Nonce account from the cluster
       */

    }, {
      key: "getNonce",
      value: function () {
        var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(nonceAccount, commitmentOrConfig) {
          return _regeneratorRuntime().wrap(function _callee87$(_context87) {
            while (1) switch (_context87.prev = _context87.next) {
              case 0:
                _context87.next = 2;
                return this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(function (x) {
                  return x.value;
                })["catch"](function (e) {
                  throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);
                });

              case 2:
                return _context87.abrupt("return", _context87.sent);

              case 3:
              case "end":
                return _context87.stop();
            }
          }, _callee87, this);
        }));

        function getNonce(_x138, _x139) {
          return _getNonce.apply(this, arguments);
        }

        return getNonce;
      }()
      /**
       * Request an allocation of lamports to the specified address
       *
       * ```typescript
       * import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
       *
       * (async () => {
       *   const connection = new Connection("https://api.testnet.solana.com", "confirmed");
       *   const myAddress = new PublicKey("2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM");
       *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);
       *   await connection.confirmTransaction(signature);
       * })();
       * ```
       */

    }, {
      key: "requestAirdrop",
      value: function () {
        var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(to, lamports) {
          var unsafeRes, res;
          return _regeneratorRuntime().wrap(function _callee88$(_context88) {
            while (1) switch (_context88.prev = _context88.next) {
              case 0:
                _context88.next = 2;
                return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);

              case 2:
                unsafeRes = _context88.sent;
                res = _create(unsafeRes, RequestAirdropRpcResult);

                if (!('error' in res)) {
                  _context88.next = 6;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "airdrop to ".concat(to.toBase58(), " failed"));

              case 6:
                return _context88.abrupt("return", res.result);

              case 7:
              case "end":
                return _context88.stop();
            }
          }, _callee88, this);
        }));

        function requestAirdrop(_x140, _x141) {
          return _requestAirdrop.apply(this, arguments);
        }

        return requestAirdrop;
      }()
      /**
       * @internal
       */

    }, {
      key: "_blockhashWithExpiryBlockHeight",
      value: function () {
        var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89(disableCache) {
          var timeSinceFetch, expired;
          return _regeneratorRuntime().wrap(function _callee89$(_context89) {
            while (1) switch (_context89.prev = _context89.next) {
              case 0:
                if (disableCache) {
                  _context89.next = 10;
                  break;
                }

              case 1:
                if (!this._pollingBlockhash) {
                  _context89.next = 6;
                  break;
                }

                _context89.next = 4;
                return sleep(100);

              case 4:
                _context89.next = 1;
                break;

              case 6:
                timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;
                expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;

                if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {
                  _context89.next = 10;
                  break;
                }

                return _context89.abrupt("return", this._blockhashInfo.latestBlockhash);

              case 10:
                _context89.next = 12;
                return this._pollNewBlockhash();

              case 12:
                return _context89.abrupt("return", _context89.sent);

              case 13:
              case "end":
                return _context89.stop();
            }
          }, _callee89, this);
        }));

        function _blockhashWithExpiryBlockHeight(_x142) {
          return _blockhashWithExpiryBlockHeight2.apply(this, arguments);
        }

        return _blockhashWithExpiryBlockHeight;
      }()
      /**
       * @internal
       */

    }, {
      key: "_pollNewBlockhash",
      value: function () {
        var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
          var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;
          return _regeneratorRuntime().wrap(function _callee90$(_context90) {
            while (1) switch (_context90.prev = _context90.next) {
              case 0:
                this._pollingBlockhash = true;
                _context90.prev = 1;
                startTime = Date.now();
                cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;
                cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;
                i = 0;

              case 6:
                if (!(i < 50)) {
                  _context90.next = 18;
                  break;
                }

                _context90.next = 9;
                return this.getLatestBlockhash('finalized');

              case 9:
                latestBlockhash = _context90.sent;

                if (!(cachedBlockhash !== latestBlockhash.blockhash)) {
                  _context90.next = 13;
                  break;
                }

                this._blockhashInfo = {
                  latestBlockhash: latestBlockhash,
                  lastFetch: Date.now(),
                  transactionSignatures: [],
                  simulatedSignatures: []
                };
                return _context90.abrupt("return", latestBlockhash);

              case 13:
                _context90.next = 15;
                return sleep(MS_PER_SLOT / 2);

              case 15:
                i++;
                _context90.next = 6;
                break;

              case 18:
                throw new Error("Unable to obtain a new blockhash after ".concat(Date.now() - startTime, "ms"));

              case 19:
                _context90.prev = 19;
                this._pollingBlockhash = false;
                return _context90.finish(19);

              case 22:
              case "end":
                return _context90.stop();
            }
          }, _callee90, this, [[1,, 19, 22]]);
        }));

        function _pollNewBlockhash() {
          return _pollNewBlockhash2.apply(this, arguments);
        }

        return _pollNewBlockhash;
      }()
      /**
       * get the stake minimum delegation
       */

    }, {
      key: "getStakeMinimumDelegation",
      value: function () {
        var _getStakeMinimumDelegation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91(config) {
          var _extractCommitmentFro24, commitment, configArg, args, unsafeRes, res;

          return _regeneratorRuntime().wrap(function _callee91$(_context91) {
            while (1) switch (_context91.prev = _context91.next) {
              case 0:
                _extractCommitmentFro24 = extractCommitmentFromConfig(config), commitment = _extractCommitmentFro24.commitment, configArg = _extractCommitmentFro24.config;
                args = this._buildArgs([], commitment, 'base64', configArg);
                _context91.next = 4;
                return this._rpcRequest('getStakeMinimumDelegation', args);

              case 4:
                unsafeRes = _context91.sent;
                res = _create(unsafeRes, jsonRpcResultAndContext(number$1()));

                if (!('error' in res)) {
                  _context91.next = 8;
                  break;
                }

                throw new SolanaJSONRPCError(res.error, "failed to get stake minimum delegation");

              case 8:
                return _context91.abrupt("return", res.result);

              case 9:
              case "end":
                return _context91.stop();
            }
          }, _callee91, this);
        }));

        function getStakeMinimumDelegation(_x143) {
          return _getStakeMinimumDelegation.apply(this, arguments);
        }

        return getStakeMinimumDelegation;
      }()
      /**
       * Simulate a transaction
       *
       * @deprecated Instead, call {@link simulateTransaction} with {@link
       * VersionedTransaction} and {@link SimulateTransactionConfig} parameters
       */

      /**
       * Simulate a transaction
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Simulate a transaction
       */
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "simulateTransaction",
      value: function () {
        var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92(transactionOrMessage, configOrSigners, includeAccounts) {
          var versionedTx, _wireTransaction, _encodedTransaction, _config, _args93, _unsafeRes, _res5, transaction, originalTx, signers, _transaction3, disableCache, _transaction4, latestBlockhash, _signature3, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;

          return _regeneratorRuntime().wrap(function _callee92$(_context92) {
            while (1) switch (_context92.prev = _context92.next) {
              case 0:
                if (!('message' in transactionOrMessage)) {
                  _context92.next = 18;
                  break;
                }

                versionedTx = transactionOrMessage;
                _wireTransaction = versionedTx.serialize();
                _encodedTransaction = Buffer$1.from(_wireTransaction).toString('base64');

                if (!(Array.isArray(configOrSigners) || includeAccounts !== undefined)) {
                  _context92.next = 6;
                  break;
                }

                throw new Error('Invalid arguments');

              case 6:
                _config = configOrSigners || {};
                _config.encoding = 'base64';

                if (!('commitment' in _config)) {
                  _config.commitment = this.commitment;
                }

                if (configOrSigners && _typeof(configOrSigners) === 'object' && 'innerInstructions' in configOrSigners) {
                  _config.innerInstructions = configOrSigners.innerInstructions;
                }

                _args93 = [_encodedTransaction, _config];
                _context92.next = 13;
                return this._rpcRequest('simulateTransaction', _args93);

              case 13:
                _unsafeRes = _context92.sent;
                _res5 = _create(_unsafeRes, SimulatedTransactionResponseStruct);

                if (!('error' in _res5)) {
                  _context92.next = 17;
                  break;
                }

                throw new Error('failed to simulate transaction: ' + _res5.error.message);

              case 17:
                return _context92.abrupt("return", _res5.result);

              case 18:
                if (transactionOrMessage instanceof Transaction) {
                  originalTx = transactionOrMessage;
                  transaction = new Transaction();
                  transaction.feePayer = originalTx.feePayer;
                  transaction.instructions = transactionOrMessage.instructions;
                  transaction.nonceInfo = originalTx.nonceInfo;
                  transaction.signatures = originalTx.signatures;
                } else {
                  transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction

                  transaction._message = transaction._json = undefined;
                }

                if (!(configOrSigners !== undefined && !Array.isArray(configOrSigners))) {
                  _context92.next = 21;
                  break;
                }

                throw new Error('Invalid arguments');

              case 21:
                signers = configOrSigners;

                if (!(transaction.nonceInfo && signers)) {
                  _context92.next = 26;
                  break;
                }

                (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));

                _context92.next = 46;
                break;

              case 26:
                disableCache = this._disableBlockhashCaching;

              case 27:
                _context92.next = 29;
                return this._blockhashWithExpiryBlockHeight(disableCache);

              case 29:
                latestBlockhash = _context92.sent;
                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
                transaction.recentBlockhash = latestBlockhash.blockhash;

                if (signers) {
                  _context92.next = 34;
                  break;
                }

                return _context92.abrupt("break", 46);

              case 34:
                (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));

                if (transaction.signature) {
                  _context92.next = 37;
                  break;
                }

                throw new Error('!signature');

              case 37:
                _signature3 = transaction.signature.toString('base64');

                if (!(!this._blockhashInfo.simulatedSignatures.includes(_signature3) && !this._blockhashInfo.transactionSignatures.includes(_signature3))) {
                  _context92.next = 43;
                  break;
                }

                // The signature of this transaction has not been seen before with the
                // current recentBlockhash, all done. Let's break
                this._blockhashInfo.simulatedSignatures.push(_signature3);

                return _context92.abrupt("break", 46);

              case 43:
                // This transaction would be treated as duplicate (its derived signature
                // matched to one of already recorded signatures).
                // So, we must fetch a new blockhash for a different signature by disabling
                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
                disableCache = true;

              case 44:
                _context92.next = 27;
                break;

              case 46:
                message = transaction._compile();
                signData = message.serialize();
                wireTransaction = transaction._serialize(signData);
                encodedTransaction = wireTransaction.toString('base64');
                config = {
                  encoding: 'base64',
                  commitment: this.commitment
                };

                if (includeAccounts) {
                  addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {
                    return key.toBase58();
                  });
                  config['accounts'] = {
                    encoding: 'base64',
                    addresses: addresses
                  };
                }

                if (signers) {
                  config.sigVerify = true;
                }

                if (configOrSigners && _typeof(configOrSigners) === 'object' && 'innerInstructions' in configOrSigners) {
                  config.innerInstructions = configOrSigners.innerInstructions;
                }

                args = [encodedTransaction, config];
                _context92.next = 57;
                return this._rpcRequest('simulateTransaction', args);

              case 57:
                unsafeRes = _context92.sent;
                res = _create(unsafeRes, SimulatedTransactionResponseStruct);

                if (!('error' in res)) {
                  _context92.next = 62;
                  break;
                }

                if ('data' in res.error) {
                  logs = res.error.data.logs;

                  if (logs && Array.isArray(logs)) {
                    traceIndent = '\n    ';
                    logTrace = traceIndent + logs.join(traceIndent);
                    console.error(res.error.message, logTrace);
                  }
                }

                throw new SendTransactionError({
                  action: 'simulate',
                  signature: '',
                  transactionMessage: res.error.message,
                  logs: logs
                });

              case 62:
                return _context92.abrupt("return", res.result);

              case 63:
              case "end":
                return _context92.stop();
            }
          }, _callee92, this);
        }));

        function simulateTransaction(_x144, _x145, _x146) {
          return _simulateTransaction.apply(this, arguments);
        }

        return simulateTransaction;
      }()
      /**
       * Sign and send a transaction
       *
       * @deprecated Instead, call {@link sendTransaction} with a {@link
       * VersionedTransaction}
       */

      /**
       * Send a signed transaction
       */
      // eslint-disable-next-line no-dupe-class-members

      /**
       * Sign and send a transaction
       */
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "sendTransaction",
      value: function () {
        var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93(transaction, signersOrOptions, options) {
          var _wireTransaction2, signers, disableCache, latestBlockhash, _signature4, wireTransaction;

          return _regeneratorRuntime().wrap(function _callee93$(_context93) {
            while (1) switch (_context93.prev = _context93.next) {
              case 0:
                if (!('version' in transaction)) {
                  _context93.next = 7;
                  break;
                }

                if (!(signersOrOptions && Array.isArray(signersOrOptions))) {
                  _context93.next = 3;
                  break;
                }

                throw new Error('Invalid arguments');

              case 3:
                _wireTransaction2 = transaction.serialize();
                _context93.next = 6;
                return this.sendRawTransaction(_wireTransaction2, signersOrOptions);

              case 6:
                return _context93.abrupt("return", _context93.sent);

              case 7:
                if (!(signersOrOptions === undefined || !Array.isArray(signersOrOptions))) {
                  _context93.next = 9;
                  break;
                }

                throw new Error('Invalid arguments');

              case 9:
                signers = signersOrOptions;

                if (!transaction.nonceInfo) {
                  _context93.next = 14;
                  break;
                }

                transaction.sign.apply(transaction, _toConsumableArray(signers));
                _context93.next = 32;
                break;

              case 14:
                disableCache = this._disableBlockhashCaching;

              case 15:
                _context93.next = 17;
                return this._blockhashWithExpiryBlockHeight(disableCache);

              case 17:
                latestBlockhash = _context93.sent;
                transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;
                transaction.recentBlockhash = latestBlockhash.blockhash;
                transaction.sign.apply(transaction, _toConsumableArray(signers));

                if (transaction.signature) {
                  _context93.next = 23;
                  break;
                }

                throw new Error('!signature');

              case 23:
                _signature4 = transaction.signature.toString('base64');

                if (this._blockhashInfo.transactionSignatures.includes(_signature4)) {
                  _context93.next = 29;
                  break;
                }

                // The signature of this transaction has not been seen before with the
                // current recentBlockhash, all done. Let's break
                this._blockhashInfo.transactionSignatures.push(_signature4);

                return _context93.abrupt("break", 32);

              case 29:
                // This transaction would be treated as duplicate (its derived signature
                // matched to one of already recorded signatures).
                // So, we must fetch a new blockhash for a different signature by disabling
                // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).
                disableCache = true;

              case 30:
                _context93.next = 15;
                break;

              case 32:
                wireTransaction = transaction.serialize();
                _context93.next = 35;
                return this.sendRawTransaction(wireTransaction, options);

              case 35:
                return _context93.abrupt("return", _context93.sent);

              case 36:
              case "end":
                return _context93.stop();
            }
          }, _callee93, this);
        }));

        function sendTransaction(_x147, _x148, _x149) {
          return _sendTransaction.apply(this, arguments);
        }

        return sendTransaction;
      }()
      /**
       * Send a transaction that has already been signed and serialized into the
       * wire format
       */

    }, {
      key: "sendRawTransaction",
      value: function () {
        var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(rawTransaction, options) {
          var encodedTransaction, result;
          return _regeneratorRuntime().wrap(function _callee94$(_context94) {
            while (1) switch (_context94.prev = _context94.next) {
              case 0:
                encodedTransaction = toBuffer(rawTransaction).toString('base64');
                _context94.next = 3;
                return this.sendEncodedTransaction(encodedTransaction, options);

              case 3:
                result = _context94.sent;
                return _context94.abrupt("return", result);

              case 5:
              case "end":
                return _context94.stop();
            }
          }, _callee94, this);
        }));

        function sendRawTransaction(_x150, _x151) {
          return _sendRawTransaction.apply(this, arguments);
        }

        return sendRawTransaction;
      }()
      /**
       * Send a transaction that has already been signed, serialized into the
       * wire format, and encoded as a base64 string
       */

    }, {
      key: "sendEncodedTransaction",
      value: function () {
        var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95(encodedTransaction, options) {
          var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;
          return _regeneratorRuntime().wrap(function _callee95$(_context95) {
            while (1) switch (_context95.prev = _context95.next) {
              case 0:
                config = {
                  encoding: 'base64'
                };
                skipPreflight = options && options.skipPreflight;
                preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.
                : options && options.preflightCommitment || this.commitment;

                if (options && options.maxRetries != null) {
                  config.maxRetries = options.maxRetries;
                }

                if (options && options.minContextSlot != null) {
                  config.minContextSlot = options.minContextSlot;
                }

                if (skipPreflight) {
                  config.skipPreflight = skipPreflight;
                }

                if (preflightCommitment) {
                  config.preflightCommitment = preflightCommitment;
                }

                args = [encodedTransaction, config];
                _context95.next = 10;
                return this._rpcRequest('sendTransaction', args);

              case 10:
                unsafeRes = _context95.sent;
                res = _create(unsafeRes, SendTransactionRpcResult);

                if (!('error' in res)) {
                  _context95.next = 16;
                  break;
                }

                logs = undefined;

                if ('data' in res.error) {
                  logs = res.error.data.logs;
                }

                throw new SendTransactionError({
                  action: skipPreflight ? 'send' : 'simulate',
                  signature: '',
                  transactionMessage: res.error.message,
                  logs: logs
                });

              case 16:
                return _context95.abrupt("return", res.result);

              case 17:
              case "end":
                return _context95.stop();
            }
          }, _callee95, this);
        }));

        function sendEncodedTransaction(_x152, _x153) {
          return _sendEncodedTransaction.apply(this, arguments);
        }

        return sendEncodedTransaction;
      }()
      /**
       * @internal
       */

    }, {
      key: "_wsOnOpen",
      value: function _wsOnOpen() {
        var _this24 = this;

        this._rpcWebSocketConnected = true;
        this._rpcWebSocketHeartbeat = setInterval(function () {
          // Ping server every 5s to prevent idle timeouts
          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
            return _regeneratorRuntime().wrap(function _callee96$(_context96) {
              while (1) switch (_context96.prev = _context96.next) {
                case 0:
                  _context96.prev = 0;
                  _context96.next = 3;
                  return _this24._rpcWebSocket.notify('ping');

                case 3:
                  _context96.next = 7;
                  break;

                case 5:
                  _context96.prev = 5;
                  _context96.t0 = _context96["catch"](0);

                case 7:
                case "end":
                  return _context96.stop();
              }
            }, _callee96, null, [[0, 5]]);
          }))();
        }, 5000);

        this._updateSubscriptions();
      }
      /**
       * @internal
       */

    }, {
      key: "_wsOnError",
      value: function _wsOnError(err) {
        this._rpcWebSocketConnected = false;
        console.error('ws error:', err.message);
      }
      /**
       * @internal
       */

    }, {
      key: "_wsOnClose",
      value: function _wsOnClose(code) {
        var _this25 = this;

        this._rpcWebSocketConnected = false;
        this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;

        if (this._rpcWebSocketIdleTimeout) {
          clearTimeout(this._rpcWebSocketIdleTimeout);
          this._rpcWebSocketIdleTimeout = null;
        }

        if (this._rpcWebSocketHeartbeat) {
          clearInterval(this._rpcWebSocketHeartbeat);
          this._rpcWebSocketHeartbeat = null;
        }

        if (code === 1000) {
          // explicit close, check if any subscriptions have been made since close
          this._updateSubscriptions();

          return;
        } // implicit close, prepare subscriptions for auto-reconnect


        this._subscriptionCallbacksByServerSubscriptionId = {};
        Object.entries(this._subscriptionsByHash).forEach(function (_ref41) {
          var _ref42 = _slicedToArray(_ref41, 2),
              hash = _ref42[0],
              subscription = _ref42[1];

          _this25._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
            state: 'pending'
          }));
        });
      }
      /**
       * @internal
       */

    }, {
      key: "_setSubscription",
      value: function _setSubscription(hash, nextSubscription) {
        var _this$_subscriptionsB;

        var prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;
        this._subscriptionsByHash[hash] = nextSubscription;

        if (prevState !== nextSubscription.state) {
          var stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];

          if (stateChangeCallbacks) {
            stateChangeCallbacks.forEach(function (cb) {
              try {
                cb(nextSubscription.state); // eslint-disable-next-line no-empty
              } catch (_unused4) {}
            });
          }
        }
      }
      /**
       * @internal
       */

    }, {
      key: "_onSubscriptionStateChange",
      value: function _onSubscriptionStateChange(clientSubscriptionId, callback) {
        var _this$_subscriptionSt,
            _this26 = this;

        var hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];

        if (hash == null) {
          return function () {};
        }

        var stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());
        stateChangeCallbacks.add(callback);
        return function () {
          stateChangeCallbacks["delete"](callback);

          if (stateChangeCallbacks.size === 0) {
            delete _this26._subscriptionStateChangeCallbacksByHash[hash];
          }
        };
      }
      /**
       * @internal
       */

    }, {
      key: "_updateSubscriptions",
      value: function () {
        var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
          var _this27 = this;

          var activeWebSocketGeneration, isCurrentConnectionStillActive;
          return _regeneratorRuntime().wrap(function _callee100$(_context100) {
            while (1) switch (_context100.prev = _context100.next) {
              case 0:
                if (!(Object.keys(this._subscriptionsByHash).length === 0)) {
                  _context100.next = 3;
                  break;
                }

                if (this._rpcWebSocketConnected) {
                  this._rpcWebSocketConnected = false;
                  this._rpcWebSocketIdleTimeout = setTimeout(function () {
                    _this27._rpcWebSocketIdleTimeout = null;

                    try {
                      _this27._rpcWebSocket.close();
                    } catch (err) {
                      // swallow error if socket has already been closed.
                      if (err instanceof Error) {
                        console.log("Error when closing socket connection: ".concat(err.message));
                      }
                    }
                  }, 500);
                }

                return _context100.abrupt("return");

              case 3:
                if (this._rpcWebSocketIdleTimeout !== null) {
                  clearTimeout(this._rpcWebSocketIdleTimeout);
                  this._rpcWebSocketIdleTimeout = null;
                  this._rpcWebSocketConnected = true;
                }

                if (this._rpcWebSocketConnected) {
                  _context100.next = 7;
                  break;
                }

                this._rpcWebSocket.connect();

                return _context100.abrupt("return");

              case 7:
                activeWebSocketGeneration = this._rpcWebSocketGeneration;

                isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {
                  return activeWebSocketGeneration === _this27._rpcWebSocketGeneration;
                };

                _context100.next = 11;
                return Promise.all( // Don't be tempted to change this to `Object.entries`. We call
                // `_updateSubscriptions` recursively when processing the state,
                // so it's important that we look up the *current* version of
                // each subscription, every time we process a hash.
                Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {
                  var _ref43 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee99(hash) {
                    var subscription;
                    return _regeneratorRuntime().wrap(function _callee99$(_context99) {
                      while (1) switch (_context99.prev = _context99.next) {
                        case 0:
                          subscription = _this27._subscriptionsByHash[hash];

                          if (!(subscription === undefined)) {
                            _context99.next = 3;
                            break;
                          }

                          return _context99.abrupt("return");

                        case 3:
                          _context99.t0 = subscription.state;
                          _context99.next = _context99.t0 === 'pending' ? 6 : _context99.t0 === 'unsubscribed' ? 6 : _context99.t0 === 'subscribed' ? 15 : 19;
                          break;

                        case 6:
                          if (!(subscription.callbacks.size === 0)) {
                            _context99.next = 12;
                            break;
                          }

                          /**
                           * You can end up here when:
                           *
                           * - a subscription has recently unsubscribed
                           *   without having new callbacks added to it
                           *   while the unsubscribe was in flight, or
                           * - when a pending subscription has its
                           *   listeners removed before a request was
                           *   sent to the server.
                           *
                           * Being that nobody is interested in this
                           * subscription any longer, delete it.
                           */
                          delete _this27._subscriptionsByHash[hash];

                          if (subscription.state === 'unsubscribed') {
                            delete _this27._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];
                          }

                          _context99.next = 11;
                          return _this27._updateSubscriptions();

                        case 11:
                          return _context99.abrupt("return");

                        case 12:
                          _context99.next = 14;
                          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
                            var args, method, serverSubscriptionId;
                            return _regeneratorRuntime().wrap(function _callee97$(_context97) {
                              while (1) switch (_context97.prev = _context97.next) {
                                case 0:
                                  args = subscription.args, method = subscription.method;
                                  _context97.prev = 1;

                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'subscribing'
                                  }));

                                  _context97.next = 5;
                                  return _this27._rpcWebSocket.call(method, args);

                                case 5:
                                  serverSubscriptionId = _context97.sent;

                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    serverSubscriptionId: serverSubscriptionId,
                                    state: 'subscribed'
                                  }));

                                  _this27._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;
                                  _context97.next = 10;
                                  return _this27._updateSubscriptions();

                                case 10:
                                  _context97.next = 20;
                                  break;

                                case 12:
                                  _context97.prev = 12;
                                  _context97.t0 = _context97["catch"](1);
                                  console.error("Received ".concat(_context97.t0 instanceof Error ? '' : 'JSON-RPC ', "error calling `").concat(method, "`"), {
                                    args: args,
                                    error: _context97.t0
                                  });

                                  if (isCurrentConnectionStillActive()) {
                                    _context97.next = 17;
                                    break;
                                  }

                                  return _context97.abrupt("return");

                                case 17:
                                  // TODO: Maybe add an 'errored' state or a retry limit?
                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'pending'
                                  }));

                                  _context97.next = 20;
                                  return _this27._updateSubscriptions();

                                case 20:
                                case "end":
                                  return _context97.stop();
                              }
                            }, _callee97, null, [[1, 12]]);
                          }))();

                        case 14:
                          return _context99.abrupt("break", 19);

                        case 15:
                          if (!(subscription.callbacks.size === 0)) {
                            _context99.next = 18;
                            break;
                          }

                          _context99.next = 18;
                          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
                            var serverSubscriptionId, unsubscribeMethod;
                            return _regeneratorRuntime().wrap(function _callee98$(_context98) {
                              while (1) switch (_context98.prev = _context98.next) {
                                case 0:
                                  serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;

                                  if (!_this27._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {
                                    _context98.next = 5;
                                    break;
                                  }

                                  /**
                                   * Special case.
                                   * If we're dealing with a subscription that has been auto-
                                   * disposed by the RPC, then we can skip the RPC call to
                                   * tear down the subscription here.
                                   *
                                   * NOTE: There is a proposal to eliminate this special case, here:
                                   * https://github.com/solana-labs/solana/issues/18892
                                   */
                                  _this27._subscriptionsAutoDisposedByRpc["delete"](serverSubscriptionId);

                                  _context98.next = 21;
                                  break;

                                case 5:
                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'unsubscribing'
                                  }));

                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'unsubscribing'
                                  }));

                                  _context98.prev = 7;
                                  _context98.next = 10;
                                  return _this27._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);

                                case 10:
                                  _context98.next = 21;
                                  break;

                                case 12:
                                  _context98.prev = 12;
                                  _context98.t0 = _context98["catch"](7);

                                  if (_context98.t0 instanceof Error) {
                                    console.error("".concat(unsubscribeMethod, " error:"), _context98.t0.message);
                                  }

                                  if (isCurrentConnectionStillActive()) {
                                    _context98.next = 17;
                                    break;
                                  }

                                  return _context98.abrupt("return");

                                case 17:
                                  // TODO: Maybe add an 'errored' state or a retry limit?
                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'subscribed'
                                  }));

                                  _context98.next = 20;
                                  return _this27._updateSubscriptions();

                                case 20:
                                  return _context98.abrupt("return");

                                case 21:
                                  _this27._setSubscription(hash, _objectSpread2(_objectSpread2({}, subscription), {}, {
                                    state: 'unsubscribed'
                                  }));

                                  _context98.next = 24;
                                  return _this27._updateSubscriptions();

                                case 24:
                                case "end":
                                  return _context98.stop();
                              }
                            }, _callee98, null, [[7, 12]]);
                          }))();

                        case 18:
                          return _context99.abrupt("break", 19);

                        case 19:
                        case "end":
                          return _context99.stop();
                      }
                    }, _callee99);
                  }));

                  return function (_x154) {
                    return _ref43.apply(this, arguments);
                  };
                }()));

              case 11:
              case "end":
                return _context100.stop();
            }
          }, _callee100, this);
        }));

        function _updateSubscriptions() {
          return _updateSubscriptions2.apply(this, arguments);
        }

        return _updateSubscriptions;
      }()
      /**
       * @internal
       */

    }, {
      key: "_handleServerNotification",
      value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {
        var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];

        if (callbacks === undefined) {
          return;
        }

        callbacks.forEach(function (cb) {
          try {
            cb.apply(void 0, _toConsumableArray(callbackArgs));
          } catch (e) {
            console.error(e);
          }
        });
      }
      /**
       * @internal
       */

    }, {
      key: "_wsOnAccountNotification",
      value: function _wsOnAccountNotification(notification) {
        var _create$1 = _create(notification, AccountNotificationResult),
            result = _create$1.result,
            subscription = _create$1.subscription;

        this._handleServerNotification(subscription, [result.value, result.context]);
      }
      /**
       * @internal
       */

    }, {
      key: "_makeSubscription",
      value: function _makeSubscription(subscriptionConfig,
      /**
       * When preparing `args` for a call to `_makeSubscription`, be sure
       * to carefully apply a default `commitment` property, if necessary.
       *
       * - If the user supplied a `commitment` use that.
       * - Otherwise, if the `Connection::commitment` is set, use that.
       * - Otherwise, set it to the RPC server default: `finalized`.
       *
       * This is extremely important to ensure that these two fundamentally
       * identical subscriptions produce the same identifying hash:
       *
       * - A subscription made without specifying a commitment.
       * - A subscription made where the commitment specified is the same
       *   as the default applied to the subscription above.
       *
       * Example; these two subscriptions must produce the same hash:
       *
       * - An `accountSubscribe` subscription for `'PUBKEY'`
       * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment
       *   `'finalized'`.
       *
       * See the 'making a subscription with defaulted params omitted' test
       * in `connection-subscriptions.ts` for more.
       */
      args) {
        var _this28 = this;

        var clientSubscriptionId = this._nextClientSubscriptionId++;
        var hash = fastStableStringify([subscriptionConfig.method, args]);
        var existingSubscription = this._subscriptionsByHash[hash];

        if (existingSubscription === undefined) {
          this._subscriptionsByHash[hash] = _objectSpread2(_objectSpread2({}, subscriptionConfig), {}, {
            args: args,
            callbacks: new Set([subscriptionConfig.callback]),
            state: 'pending'
          });
        } else {
          existingSubscription.callbacks.add(subscriptionConfig.callback);
        }

        this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;
        this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
          var subscription;
          return _regeneratorRuntime().wrap(function _callee101$(_context101) {
            while (1) switch (_context101.prev = _context101.next) {
              case 0:
                delete _this28._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];
                delete _this28._subscriptionHashByClientSubscriptionId[clientSubscriptionId];
                subscription = _this28._subscriptionsByHash[hash];
                assert$1(subscription !== undefined, "Could not find a `Subscription` when tearing down client subscription #".concat(clientSubscriptionId));
                subscription.callbacks["delete"](subscriptionConfig.callback);
                _context101.next = 7;
                return _this28._updateSubscriptions();

              case 7:
              case "end":
                return _context101.stop();
            }
          }, _callee101);
        }));

        this._updateSubscriptions();

        return clientSubscriptionId;
      }
      /**
       * Register a callback to be invoked whenever the specified account changes
       *
       * @param publicKey Public key of the account to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param config
       * @return subscription id
       */

      /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "onAccountChange",
      value: function onAccountChange(publicKey, callback, commitmentOrConfig) {
        var _extractCommitmentFro25 = extractCommitmentFromConfig(commitmentOrConfig),
            commitment = _extractCommitmentFro25.commitment,
            config = _extractCommitmentFro25.config;

        var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.
        'base64', config);

        return this._makeSubscription({
          callback: callback,
          method: 'accountSubscribe',
          unsubscribeMethod: 'accountUnsubscribe'
        }, args);
      }
      /**
       * Deregister an account notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeAccountChangeListener",
      value: function () {
        var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee102(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee102$(_context102) {
            while (1) switch (_context102.prev = _context102.next) {
              case 0:
                _context102.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');

              case 2:
              case "end":
                return _context102.stop();
            }
          }, _callee102, this);
        }));

        function removeAccountChangeListener(_x155) {
          return _removeAccountChangeListener.apply(this, arguments);
        }

        return removeAccountChangeListener;
      }()
      /**
       * @internal
       */

    }, {
      key: "_wsOnProgramAccountNotification",
      value: function _wsOnProgramAccountNotification(notification) {
        var _create2 = _create(notification, ProgramAccountNotificationResult),
            result = _create2.result,
            subscription = _create2.subscription;

        this._handleServerNotification(subscription, [{
          accountId: result.value.pubkey,
          accountInfo: result.value.account
        }, result.context]);
      }
      /**
       * Register a callback to be invoked whenever accounts owned by the
       * specified program change
       *
       * @param programId Public key of the program to monitor
       * @param callback Function to invoke whenever the account is changed
       * @param config
       * @return subscription id
       */

      /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */
      // eslint-disable-next-line no-dupe-class-members
      // eslint-disable-next-line no-dupe-class-members

    }, {
      key: "onProgramAccountChange",
      value: function onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {
        var _extractCommitmentFro26 = extractCommitmentFromConfig(commitmentOrConfig),
            commitment = _extractCommitmentFro26.commitment,
            config = _extractCommitmentFro26.config;

        var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.
        'base64'
        /* encoding */
        , config ? config : maybeFilters ? {
          filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)
        } : undefined
        /* extra */
        );

        return this._makeSubscription({
          callback: callback,
          method: 'programSubscribe',
          unsubscribeMethod: 'programUnsubscribe'
        }, args);
      }
      /**
       * Deregister an account notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeProgramAccountChangeListener",
      value: function () {
        var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee103(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee103$(_context103) {
            while (1) switch (_context103.prev = _context103.next) {
              case 0:
                _context103.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');

              case 2:
              case "end":
                return _context103.stop();
            }
          }, _callee103, this);
        }));

        function removeProgramAccountChangeListener(_x156) {
          return _removeProgramAccountChangeListener.apply(this, arguments);
        }

        return removeProgramAccountChangeListener;
      }()
      /**
       * Registers a callback to be invoked whenever logs are emitted.
       */

    }, {
      key: "onLogs",
      value: function onLogs(filter, callback, commitment) {
        var args = this._buildArgs([_typeof(filter) === 'object' ? {
          mentions: [filter.toString()]
        } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.
        );

        return this._makeSubscription({
          callback: callback,
          method: 'logsSubscribe',
          unsubscribeMethod: 'logsUnsubscribe'
        }, args);
      }
      /**
       * Deregister a logs callback.
       *
       * @param clientSubscriptionId client subscription id to deregister.
       */

    }, {
      key: "removeOnLogsListener",
      value: function () {
        var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee104(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee104$(_context104) {
            while (1) switch (_context104.prev = _context104.next) {
              case 0:
                _context104.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');

              case 2:
              case "end":
                return _context104.stop();
            }
          }, _callee104, this);
        }));

        function removeOnLogsListener(_x157) {
          return _removeOnLogsListener.apply(this, arguments);
        }

        return removeOnLogsListener;
      }()
      /**
       * @internal
       */

    }, {
      key: "_wsOnLogsNotification",
      value: function _wsOnLogsNotification(notification) {
        var _create3 = _create(notification, LogsNotificationResult),
            result = _create3.result,
            subscription = _create3.subscription;

        this._handleServerNotification(subscription, [result.value, result.context]);
      }
      /**
       * @internal
       */

    }, {
      key: "_wsOnSlotNotification",
      value: function _wsOnSlotNotification(notification) {
        var _create4 = _create(notification, SlotNotificationResult),
            result = _create4.result,
            subscription = _create4.subscription;

        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon slot changes
       *
       * @param callback Function to invoke whenever the slot changes
       * @return subscription id
       */

    }, {
      key: "onSlotChange",
      value: function onSlotChange(callback) {
        return this._makeSubscription({
          callback: callback,
          method: 'slotSubscribe',
          unsubscribeMethod: 'slotUnsubscribe'
        }, []
        /* args */
        );
      }
      /**
       * Deregister a slot notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeSlotChangeListener",
      value: function () {
        var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee105(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee105$(_context105) {
            while (1) switch (_context105.prev = _context105.next) {
              case 0:
                _context105.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');

              case 2:
              case "end":
                return _context105.stop();
            }
          }, _callee105, this);
        }));

        function removeSlotChangeListener(_x158) {
          return _removeSlotChangeListener.apply(this, arguments);
        }

        return removeSlotChangeListener;
      }()
      /**
       * @internal
       */

    }, {
      key: "_wsOnSlotUpdatesNotification",
      value: function _wsOnSlotUpdatesNotification(notification) {
        var _create5 = _create(notification, SlotUpdateNotificationResult),
            result = _create5.result,
            subscription = _create5.subscription;

        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s
       * may be useful to track live progress of a cluster.
       *
       * @param callback Function to invoke whenever the slot updates
       * @return subscription id
       */

    }, {
      key: "onSlotUpdate",
      value: function onSlotUpdate(callback) {
        return this._makeSubscription({
          callback: callback,
          method: 'slotsUpdatesSubscribe',
          unsubscribeMethod: 'slotsUpdatesUnsubscribe'
        }, []
        /* args */
        );
      }
      /**
       * Deregister a slot update notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeSlotUpdateListener",
      value: function () {
        var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee106(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee106$(_context106) {
            while (1) switch (_context106.prev = _context106.next) {
              case 0:
                _context106.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');

              case 2:
              case "end":
                return _context106.stop();
            }
          }, _callee106, this);
        }));

        function removeSlotUpdateListener(_x159) {
          return _removeSlotUpdateListener.apply(this, arguments);
        }

        return removeSlotUpdateListener;
      }()
      /**
       * @internal
       */

    }, {
      key: "_unsubscribeClientSubscription",
      value: function () {
        var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee107(clientSubscriptionId, subscriptionName) {
          var dispose;
          return _regeneratorRuntime().wrap(function _callee107$(_context107) {
            while (1) switch (_context107.prev = _context107.next) {
              case 0:
                dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];

                if (!dispose) {
                  _context107.next = 6;
                  break;
                }

                _context107.next = 4;
                return dispose();

              case 4:
                _context107.next = 7;
                break;

              case 6:
                console.warn('Ignored unsubscribe request because an active subscription with id ' + "`".concat(clientSubscriptionId, "` for '").concat(subscriptionName, "' events ") + 'could not be found.');

              case 7:
              case "end":
                return _context107.stop();
            }
          }, _callee107, this);
        }));

        function _unsubscribeClientSubscription(_x160, _x161) {
          return _unsubscribeClientSubscription2.apply(this, arguments);
        }

        return _unsubscribeClientSubscription;
      }()
    }, {
      key: "_buildArgs",
      value: function _buildArgs(args, override, encoding, extra) {
        var commitment = override || this._commitment;

        if (commitment || encoding || extra) {
          var options = {};

          if (encoding) {
            options.encoding = encoding;
          }

          if (commitment) {
            options.commitment = commitment;
          }

          if (extra) {
            options = Object.assign(options, extra);
          }

          args.push(options);
        }

        return args;
      }
      /**
       * @internal
       */

    }, {
      key: "_buildArgsAtLeastConfirmed",
      value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {
        var commitment = override || this._commitment;

        if (commitment && !['confirmed', 'finalized'].includes(commitment)) {
          throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');
        }

        return this._buildArgs(args, override, encoding, extra);
      }
      /**
       * @internal
       */

    }, {
      key: "_wsOnSignatureNotification",
      value: function _wsOnSignatureNotification(notification) {
        var _create6 = _create(notification, SignatureNotificationResult),
            result = _create6.result,
            subscription = _create6.subscription;

        if (result.value !== 'receivedSignature') {
          /**
           * Special case.
           * After a signature is processed, RPCs automatically dispose of the
           * subscription on the server side. We need to track which of these
           * subscriptions have been disposed in such a way, so that we know
           * whether the client is dealing with a not-yet-processed signature
           * (in which case we must tear down the server subscription) or an
           * already-processed signature (in which case the client can simply
           * clear out the subscription locally without telling the server).
           *
           * NOTE: There is a proposal to eliminate this special case, here:
           * https://github.com/solana-labs/solana/issues/18892
           */
          this._subscriptionsAutoDisposedByRpc.add(subscription);
        }

        this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{
          type: 'received'
        }, result.context] : [{
          type: 'status',
          result: result.value
        }, result.context]);
      }
      /**
       * Register a callback to be invoked upon signature updates
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param commitment Specify the commitment level signature must reach before notification
       * @return subscription id
       */

    }, {
      key: "onSignature",
      value: function onSignature(signature, _callback, commitment) {
        var _this29 = this;

        var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.
        );

        var clientSubscriptionId = this._makeSubscription({
          callback: function callback(notification, context) {
            if (notification.type === 'status') {
              _callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service
              // so no need to explicitly send an unsubscribe message.


              try {
                _this29.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty

              } catch (_err) {// Already removed.
              }
            }
          },
          method: 'signatureSubscribe',
          unsubscribeMethod: 'signatureUnsubscribe'
        }, args);

        return clientSubscriptionId;
      }
      /**
       * Register a callback to be invoked when a transaction is
       * received and/or processed.
       *
       * @param signature Transaction signature string in base 58
       * @param callback Function to invoke on signature notifications
       * @param options Enable received notifications and set the commitment
       *   level that signature must reach before notification
       * @return subscription id
       */

    }, {
      key: "onSignatureWithOptions",
      value: function onSignatureWithOptions(signature, _callback2, options) {
        var _this30 = this;

        var _options$commitment = _objectSpread2(_objectSpread2({}, options), {}, {
          commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.

        }),
            commitment = _options$commitment.commitment,
            extra = _objectWithoutProperties(_options$commitment, _excluded4);

        var args = this._buildArgs([signature], commitment, undefined
        /* encoding */
        , extra);

        var clientSubscriptionId = this._makeSubscription({
          callback: function callback(notification, context) {
            _callback2(notification, context); // Signatures subscriptions are auto-removed by the RPC service
            // so no need to explicitly send an unsubscribe message.


            try {
              _this30.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty

            } catch (_err) {// Already removed.
            }
          },
          method: 'signatureSubscribe',
          unsubscribeMethod: 'signatureUnsubscribe'
        }, args);

        return clientSubscriptionId;
      }
      /**
       * Deregister a signature notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeSignatureListener",
      value: function () {
        var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee108(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee108$(_context108) {
            while (1) switch (_context108.prev = _context108.next) {
              case 0:
                _context108.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');

              case 2:
              case "end":
                return _context108.stop();
            }
          }, _callee108, this);
        }));

        function removeSignatureListener(_x162) {
          return _removeSignatureListener.apply(this, arguments);
        }

        return removeSignatureListener;
      }()
      /**
       * @internal
       */

    }, {
      key: "_wsOnRootNotification",
      value: function _wsOnRootNotification(notification) {
        var _create7 = _create(notification, RootNotificationResult),
            result = _create7.result,
            subscription = _create7.subscription;

        this._handleServerNotification(subscription, [result]);
      }
      /**
       * Register a callback to be invoked upon root changes
       *
       * @param callback Function to invoke whenever the root changes
       * @return subscription id
       */

    }, {
      key: "onRootChange",
      value: function onRootChange(callback) {
        return this._makeSubscription({
          callback: callback,
          method: 'rootSubscribe',
          unsubscribeMethod: 'rootUnsubscribe'
        }, []
        /* args */
        );
      }
      /**
       * Deregister a root notification callback
       *
       * @param clientSubscriptionId client subscription id to deregister
       */

    }, {
      key: "removeRootChangeListener",
      value: function () {
        var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee109(clientSubscriptionId) {
          return _regeneratorRuntime().wrap(function _callee109$(_context109) {
            while (1) switch (_context109.prev = _context109.next) {
              case 0:
                _context109.next = 2;
                return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');

              case 2:
              case "end":
                return _context109.stop();
            }
          }, _callee109, this);
        }));

        function removeRootChangeListener(_x163) {
          return _removeRootChangeListener.apply(this, arguments);
        }

        return removeRootChangeListener;
      }()
    }]);

    return Connection;
  }();
  /**
   * Keypair signer interface
   */

  /**
   * An account keypair used for signing transactions.
   */


  var Keypair = /*#__PURE__*/function () {
    /**
     * Create a new keypair instance.
     * Generate random keypair if no {@link Ed25519Keypair} is provided.
     *
     * @param {Ed25519Keypair} keypair ed25519 keypair
     */
    function Keypair(keypair) {
      _classCallCheck(this, Keypair);

      this._keypair = void 0;
      this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();
    }
    /**
     * Generate a new random keypair
     *
     * @returns {Keypair} Keypair
     */


    _createClass(Keypair, [{
      key: "publicKey",
      get:
      /**
       * The public key for this keypair
       *
       * @returns {PublicKey} PublicKey
       */
      function get() {
        return new PublicKey(this._keypair.publicKey);
      }
      /**
       * The raw secret key for this keypair
       * @returns {Uint8Array} Secret key in an array of Uint8 bytes
       */

    }, {
      key: "secretKey",
      get: function get() {
        return new Uint8Array(this._keypair.secretKey);
      }
    }], [{
      key: "generate",
      value: function generate() {
        return new Keypair(generateKeypair());
      }
      /**
       * Create a keypair from a raw secret key byte array.
       *
       * This method should only be used to recreate a keypair from a previously
       * generated secret key. Generating keypairs from a random seed should be done
       * with the {@link Keypair.fromSeed} method.
       *
       * @throws error if the provided secret key is invalid and validation is not skipped.
       *
       * @param secretKey secret key byte array
       * @param options skip secret key validation
       *
       * @returns {Keypair} Keypair
       */

    }, {
      key: "fromSecretKey",
      value: function fromSecretKey(secretKey, options) {
        if (secretKey.byteLength !== 64) {
          throw new Error('bad secret key size');
        }

        var publicKey = secretKey.slice(32, 64);

        if (!options || !options.skipValidation) {
          var privateScalar = secretKey.slice(0, 32);
          var computedPublicKey = getPublicKey(privateScalar);

          for (var ii = 0; ii < 32; ii++) {
            if (publicKey[ii] !== computedPublicKey[ii]) {
              throw new Error('provided secretKey is invalid');
            }
          }
        }

        return new Keypair({
          publicKey: publicKey,
          secretKey: secretKey
        });
      }
      /**
       * Generate a keypair from a 32 byte seed.
       *
       * @param seed seed byte array
       *
       * @returns {Keypair} Keypair
       */

    }, {
      key: "fromSeed",
      value: function fromSeed(seed) {
        var publicKey = getPublicKey(seed);
        var secretKey = new Uint8Array(64);
        secretKey.set(seed);
        secretKey.set(publicKey, 32);
        return new Keypair({
          publicKey: publicKey,
          secretKey: secretKey
        });
      }
    }]);

    return Keypair;
  }();
  /**
   * An enumeration of valid LookupTableInstructionType's
   */

  /**
   * An enumeration of valid address lookup table InstructionType's
   * @internal
   */


  var LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({
    CreateLookupTable: {
      index: 0,
      layout: struct([u32('instruction'), u64$1('recentSlot'), u8('bumpSeed')])
    },
    FreezeLookupTable: {
      index: 1,
      layout: struct([u32('instruction')])
    },
    ExtendLookupTable: {
      index: 2,
      layout: struct([u32('instruction'), u64$1(), seq$1(publicKey(), offset$1(u32(), -8), 'addresses')])
    },
    DeactivateLookupTable: {
      index: 3,
      layout: struct([u32('instruction')])
    },
    CloseLookupTable: {
      index: 4,
      layout: struct([u32('instruction')])
    }
  });

  var AddressLookupTableInstruction = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function AddressLookupTableInstruction() {
      _classCallCheck(this, AddressLookupTableInstruction);
    }

    _createClass(AddressLookupTableInstruction, null, [{
      key: "decodeInstructionType",
      value: function decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        var instructionTypeLayout = u32('instruction');
        var index = instructionTypeLayout.decode(instruction.data);
        var type;

        for (var _i10 = 0, _Object$entries2 = Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS); _i10 < _Object$entries2.length; _i10++) {
          var _Object$entries2$_i2 = _slicedToArray(_Object$entries2[_i10], 2),
              layoutType = _Object$entries2$_i2[0],
              layout = _Object$entries2$_i2[1];

          if (layout.index == index) {
            type = layoutType;
            break;
          }
        }

        if (!type) {
          throw new Error('Invalid Instruction. Should be a LookupTable Instruction');
        }

        return type;
      }
    }, {
      key: "decodeCreateLookupTable",
      value: function decodeCreateLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 4);

        var _decodeData$12 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data),
            recentSlot = _decodeData$12.recentSlot;

        return {
          authority: instruction.keys[1].pubkey,
          payer: instruction.keys[2].pubkey,
          recentSlot: Number(recentSlot)
        };
      }
    }, {
      key: "decodeExtendLookupTable",
      value: function decodeExtendLookupTable(instruction) {
        this.checkProgramId(instruction.programId);

        if (instruction.keys.length < 2) {
          throw new Error("invalid instruction; found ".concat(instruction.keys.length, " keys, expected at least 2"));
        }

        var _decodeData$13 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data),
            addresses = _decodeData$13.addresses;

        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey,
          payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,
          addresses: addresses.map(function (buffer) {
            return new PublicKey(buffer);
          })
        };
      }
    }, {
      key: "decodeCloseLookupTable",
      value: function decodeCloseLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 3);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey,
          recipient: instruction.keys[2].pubkey
        };
      }
    }, {
      key: "decodeFreezeLookupTable",
      value: function decodeFreezeLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 2);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey
        };
      }
    }, {
      key: "decodeDeactivateLookupTable",
      value: function decodeDeactivateLookupTable(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeysLength(instruction.keys, 2);
        return {
          lookupTable: instruction.keys[0].pubkey,
          authority: instruction.keys[1].pubkey
        };
      }
      /**
       * @internal
       */

    }, {
      key: "checkProgramId",
      value: function checkProgramId(programId) {
        if (!programId.equals(AddressLookupTableProgram.programId)) {
          throw new Error('invalid instruction; programId is not AddressLookupTable Program');
        }
      }
      /**
       * @internal
       */

    }, {
      key: "checkKeysLength",
      value: function checkKeysLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error("invalid instruction; found ".concat(keys.length, " keys, expected at least ").concat(expectedLength));
        }
      }
    }]);

    return AddressLookupTableInstruction;
  }();

  var AddressLookupTableProgram = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function AddressLookupTableProgram() {
      _classCallCheck(this, AddressLookupTableProgram);
    }

    _createClass(AddressLookupTableProgram, null, [{
      key: "createLookupTable",
      value: function createLookupTable(params) {
        var _PublicKey$findProgra = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE_1(BigInt(params.recentSlot), 8)], this.programId),
            _PublicKey$findProgra2 = _slicedToArray(_PublicKey$findProgra, 2),
            lookupTableAddress = _PublicKey$findProgra2[0],
            bumpSeed = _PublicKey$findProgra2[1];

        var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;
        var data = encodeData(type, {
          recentSlot: BigInt(params.recentSlot),
          bumpSeed: bumpSeed
        });
        var keys = [{
          pubkey: lookupTableAddress,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: params.payer,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false
        }];
        return [new TransactionInstruction({
          programId: this.programId,
          keys: keys,
          data: data
        }), lookupTableAddress];
      }
    }, {
      key: "freezeLookupTable",
      value: function freezeLookupTable(params) {
        var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;
        var data = encodeData(type);
        var keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys: keys,
          data: data
        });
      }
    }, {
      key: "extendLookupTable",
      value: function extendLookupTable(params) {
        var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;
        var data = encodeData(type, {
          addresses: params.addresses.map(function (addr) {
            return addr.toBytes();
          })
        });
        var keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];

        if (params.payer) {
          keys.push({
            pubkey: params.payer,
            isSigner: true,
            isWritable: true
          }, {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false
          });
        }

        return new TransactionInstruction({
          programId: this.programId,
          keys: keys,
          data: data
        });
      }
    }, {
      key: "deactivateLookupTable",
      value: function deactivateLookupTable(params) {
        var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;
        var data = encodeData(type);
        var keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys: keys,
          data: data
        });
      }
    }, {
      key: "closeLookupTable",
      value: function closeLookupTable(params) {
        var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;
        var data = encodeData(type);
        var keys = [{
          pubkey: params.lookupTable,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: params.authority,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: params.recipient,
          isSigner: false,
          isWritable: true
        }];
        return new TransactionInstruction({
          programId: this.programId,
          keys: keys,
          data: data
        });
      }
    }]);

    return AddressLookupTableProgram;
  }();

  AddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');
  /**
   * Compute Budget Instruction class
   */

  var ComputeBudgetInstruction = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function ComputeBudgetInstruction() {
      _classCallCheck(this, ComputeBudgetInstruction);
    }
    /**
     * Decode a compute budget instruction and retrieve the instruction type.
     */


    _createClass(ComputeBudgetInstruction, null, [{
      key: "decodeInstructionType",
      value: function decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        var instructionTypeLayout = u8('instruction');
        var typeIndex = instructionTypeLayout.decode(instruction.data);
        var type;

        for (var _i11 = 0, _Object$entries3 = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i11 < _Object$entries3.length; _i11++) {
          var _Object$entries3$_i2 = _slicedToArray(_Object$entries3[_i11], 2),
              ixType = _Object$entries3$_i2[0],
              layout = _Object$entries3$_i2[1];

          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');
        }

        return type;
      }
      /**
       * Decode request units compute budget instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeRequestUnits",
      value: function decodeRequestUnits(instruction) {
        this.checkProgramId(instruction.programId);

        var _decodeData$14 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),
            units = _decodeData$14.units,
            additionalFee = _decodeData$14.additionalFee;

        return {
          units: units,
          additionalFee: additionalFee
        };
      }
      /**
       * Decode request heap frame compute budget instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeRequestHeapFrame",
      value: function decodeRequestHeapFrame(instruction) {
        this.checkProgramId(instruction.programId);

        var _decodeData$15 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),
            bytes = _decodeData$15.bytes;

        return {
          bytes: bytes
        };
      }
      /**
       * Decode set compute unit limit compute budget instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeSetComputeUnitLimit",
      value: function decodeSetComputeUnitLimit(instruction) {
        this.checkProgramId(instruction.programId);

        var _decodeData$16 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),
            units = _decodeData$16.units;

        return {
          units: units
        };
      }
      /**
       * Decode set compute unit price compute budget instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeSetComputeUnitPrice",
      value: function decodeSetComputeUnitPrice(instruction) {
        this.checkProgramId(instruction.programId);

        var _decodeData$17 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),
            microLamports = _decodeData$17.microLamports;

        return {
          microLamports: microLamports
        };
      }
      /**
       * @internal
       */

    }, {
      key: "checkProgramId",
      value: function checkProgramId(programId) {
        if (!programId.equals(ComputeBudgetProgram.programId)) {
          throw new Error('invalid instruction; programId is not ComputeBudgetProgram');
        }
      }
    }]);

    return ComputeBudgetInstruction;
  }();
  /**
   * An enumeration of valid ComputeBudgetInstructionType's
   */

  /**
   * Request units instruction params
   */

  /**
   * Request heap frame instruction params
   */

  /**
   * Set compute unit limit instruction params
   */

  /**
   * Set compute unit price instruction params
   */

  /**
   * An enumeration of valid ComputeBudget InstructionType's
   * @internal
   */


  var COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({
    RequestUnits: {
      index: 0,
      layout: struct([u8('instruction'), u32('units'), u32('additionalFee')])
    },
    RequestHeapFrame: {
      index: 1,
      layout: struct([u8('instruction'), u32('bytes')])
    },
    SetComputeUnitLimit: {
      index: 2,
      layout: struct([u8('instruction'), u32('units')])
    },
    SetComputeUnitPrice: {
      index: 3,
      layout: struct([u8('instruction'), u64$1('microLamports')])
    }
  });
  /**
   * Factory class for transaction instructions to interact with the Compute Budget program
   */

  var ComputeBudgetProgram = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function ComputeBudgetProgram() {
      _classCallCheck(this, ComputeBudgetProgram);
    }
    /**
     * Public key that identifies the Compute Budget program
     */

    /**
     * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}
     */


    _createClass(ComputeBudgetProgram, null, [{
      key: "requestUnits",
      value: function requestUnits(params) {
        var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;
        var data = encodeData(type, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data: data
        });
      }
    }, {
      key: "requestHeapFrame",
      value: function requestHeapFrame(params) {
        var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;
        var data = encodeData(type, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data: data
        });
      }
    }, {
      key: "setComputeUnitLimit",
      value: function setComputeUnitLimit(params) {
        var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;
        var data = encodeData(type, params);
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data: data
        });
      }
    }, {
      key: "setComputeUnitPrice",
      value: function setComputeUnitPrice(params) {
        var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;
        var data = encodeData(type, {
          microLamports: BigInt(params.microLamports)
        });
        return new TransactionInstruction({
          keys: [],
          programId: this.programId,
          data: data
        });
      }
    }]);

    return ComputeBudgetProgram;
  }();

  ComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');
  var PRIVATE_KEY_BYTES$1 = 64;
  var PUBLIC_KEY_BYTES$1 = 32;
  var SIGNATURE_BYTES = 64;
  /**
   * Params for creating an ed25519 instruction using a public key
   */

  /**
   * Params for creating an ed25519 instruction using a private key
   */

  var ED25519_INSTRUCTION_LAYOUT = struct([u8('numSignatures'), u8('padding'), u16('signatureOffset'), u16('signatureInstructionIndex'), u16('publicKeyOffset'), u16('publicKeyInstructionIndex'), u16('messageDataOffset'), u16('messageDataSize'), u16('messageInstructionIndex')]);

  var Ed25519Program = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function Ed25519Program() {
      _classCallCheck(this, Ed25519Program);
    }
    /**
     * Public key that identifies the ed25519 program
     */

    /**
     * Create an ed25519 instruction with a public key and signature. The
     * public key must be a buffer that is 32 bytes long, and the signature
     * must be a buffer of 64 bytes.
     */


    _createClass(Ed25519Program, null, [{
      key: "createInstructionWithPublicKey",
      value: function createInstructionWithPublicKey(params) {
        var publicKey = params.publicKey,
            message = params.message,
            signature = params.signature,
            instructionIndex = params.instructionIndex;
        assert$1(publicKey.length === PUBLIC_KEY_BYTES$1, "Public Key must be ".concat(PUBLIC_KEY_BYTES$1, " bytes but received ").concat(publicKey.length, " bytes"));
        assert$1(signature.length === SIGNATURE_BYTES, "Signature must be ".concat(SIGNATURE_BYTES, " bytes but received ").concat(signature.length, " bytes"));
        var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;
        var signatureOffset = publicKeyOffset + publicKey.length;
        var messageDataOffset = signatureOffset + signature.length;
        var numSignatures = 1;
        var instructionData = Buffer$1.alloc(messageDataOffset + message.length);
        var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.
        : instructionIndex;
        ED25519_INSTRUCTION_LAYOUT.encode({
          numSignatures: numSignatures,
          padding: 0,
          signatureOffset: signatureOffset,
          signatureInstructionIndex: index,
          publicKeyOffset: publicKeyOffset,
          publicKeyInstructionIndex: index,
          messageDataOffset: messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: index
        }, instructionData);
        instructionData.fill(publicKey, publicKeyOffset);
        instructionData.fill(signature, signatureOffset);
        instructionData.fill(message, messageDataOffset);
        return new TransactionInstruction({
          keys: [],
          programId: Ed25519Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an ed25519 instruction with a private key. The private key
       * must be a buffer that is 64 bytes long.
       */

    }, {
      key: "createInstructionWithPrivateKey",
      value: function createInstructionWithPrivateKey(params) {
        var privateKey = params.privateKey,
            message = params.message,
            instructionIndex = params.instructionIndex;
        assert$1(privateKey.length === PRIVATE_KEY_BYTES$1, "Private key must be ".concat(PRIVATE_KEY_BYTES$1, " bytes but received ").concat(privateKey.length, " bytes"));

        try {
          var keypair = Keypair.fromSecretKey(privateKey);

          var _publicKey2 = keypair.publicKey.toBytes();

          var _signature5 = _sign(message, keypair.secretKey);

          return this.createInstructionWithPublicKey({
            publicKey: _publicKey2,
            message: message,
            signature: _signature5,
            instructionIndex: instructionIndex
          });
        } catch (error) {
          throw new Error("Error creating instruction; ".concat(error));
        }
      }
    }]);

    return Ed25519Program;
  }();

  Ed25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');

  var ecdsaSign = function ecdsaSign(msgHash, privKey) {
    var signature = secp256k1.sign(msgHash, privKey);
    return [signature.toCompactRawBytes(), signature.recovery];
  };

  secp256k1.utils.isValidPrivateKey;
  var publicKeyCreate = secp256k1.getPublicKey;
  var PRIVATE_KEY_BYTES = 32;
  var ETHEREUM_ADDRESS_BYTES = 20;
  var PUBLIC_KEY_BYTES = 64;
  var SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;
  /**
   * Params for creating an secp256k1 instruction using a public key
   */

  /**
   * Params for creating an secp256k1 instruction using an Ethereum address
   */

  /**
   * Params for creating an secp256k1 instruction using a private key
   */

  var SECP256K1_INSTRUCTION_LAYOUT = struct([u8('numSignatures'), u16('signatureOffset'), u8('signatureInstructionIndex'), u16('ethAddressOffset'), u8('ethAddressInstructionIndex'), u16('messageDataOffset'), u16('messageDataSize'), u8('messageInstructionIndex'), blob$1(20, 'ethAddress'), blob$1(64, 'signature'), u8('recoveryId')]);

  var Secp256k1Program = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function Secp256k1Program() {
      _classCallCheck(this, Secp256k1Program);
    }
    /**
     * Public key that identifies the secp256k1 program
     */

    /**
     * Construct an Ethereum address from a secp256k1 public key buffer.
     * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer
     */


    _createClass(Secp256k1Program, null, [{
      key: "publicKeyToEthAddress",
      value: function publicKeyToEthAddress(publicKey) {
        assert$1(publicKey.length === PUBLIC_KEY_BYTES, "Public key must be ".concat(PUBLIC_KEY_BYTES, " bytes but received ").concat(publicKey.length, " bytes"));

        try {
          return Buffer$1.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);
        } catch (error) {
          throw new Error("Error constructing Ethereum address: ".concat(error));
        }
      }
      /**
       * Create an secp256k1 instruction with a public key. The public key
       * must be a buffer that is 64 bytes long.
       */

    }, {
      key: "createInstructionWithPublicKey",
      value: function createInstructionWithPublicKey(params) {
        var publicKey = params.publicKey,
            message = params.message,
            signature = params.signature,
            recoveryId = params.recoveryId,
            instructionIndex = params.instructionIndex;
        return Secp256k1Program.createInstructionWithEthAddress({
          ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),
          message: message,
          signature: signature,
          recoveryId: recoveryId,
          instructionIndex: instructionIndex
        });
      }
      /**
       * Create an secp256k1 instruction with an Ethereum address. The address
       * must be a hex string or a buffer that is 20 bytes long.
       */

    }, {
      key: "createInstructionWithEthAddress",
      value: function createInstructionWithEthAddress(params) {
        var rawAddress = params.ethAddress,
            message = params.message,
            signature = params.signature,
            recoveryId = params.recoveryId,
            _params$instructionIn = params.instructionIndex,
            instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;
        var ethAddress;

        if (typeof rawAddress === 'string') {
          if (rawAddress.startsWith('0x')) {
            ethAddress = Buffer$1.from(rawAddress.substr(2), 'hex');
          } else {
            ethAddress = Buffer$1.from(rawAddress, 'hex');
          }
        } else {
          ethAddress = rawAddress;
        }

        assert$1(ethAddress.length === ETHEREUM_ADDRESS_BYTES, "Address must be ".concat(ETHEREUM_ADDRESS_BYTES, " bytes but received ").concat(ethAddress.length, " bytes"));
        var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;
        var ethAddressOffset = dataStart;
        var signatureOffset = dataStart + ethAddress.length;
        var messageDataOffset = signatureOffset + signature.length + 1;
        var numSignatures = 1;
        var instructionData = Buffer$1.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);
        SECP256K1_INSTRUCTION_LAYOUT.encode({
          numSignatures: numSignatures,
          signatureOffset: signatureOffset,
          signatureInstructionIndex: instructionIndex,
          ethAddressOffset: ethAddressOffset,
          ethAddressInstructionIndex: instructionIndex,
          messageDataOffset: messageDataOffset,
          messageDataSize: message.length,
          messageInstructionIndex: instructionIndex,
          signature: toBuffer(signature),
          ethAddress: toBuffer(ethAddress),
          recoveryId: recoveryId
        }, instructionData);
        instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);
        return new TransactionInstruction({
          keys: [],
          programId: Secp256k1Program.programId,
          data: instructionData
        });
      }
      /**
       * Create an secp256k1 instruction with a private key. The private key
       * must be a buffer that is 32 bytes long.
       */

    }, {
      key: "createInstructionWithPrivateKey",
      value: function createInstructionWithPrivateKey(params) {
        var pkey = params.privateKey,
            message = params.message,
            instructionIndex = params.instructionIndex;
        assert$1(pkey.length === PRIVATE_KEY_BYTES, "Private key must be ".concat(PRIVATE_KEY_BYTES, " bytes but received ").concat(pkey.length, " bytes"));

        try {
          var privateKey = toBuffer(pkey);

          var _publicKey3 = publicKeyCreate(privateKey, false
          /* isCompressed */
          ).slice(1); // throw away leading byte


          var messageHash = Buffer$1.from(keccak_256(toBuffer(message)));

          var _ecdsaSign3 = ecdsaSign(messageHash, privateKey),
              _ecdsaSign4 = _slicedToArray(_ecdsaSign3, 2),
              _signature6 = _ecdsaSign4[0],
              recoveryId = _ecdsaSign4[1];

          return this.createInstructionWithPublicKey({
            publicKey: _publicKey3,
            message: message,
            signature: _signature6,
            recoveryId: recoveryId,
            instructionIndex: instructionIndex
          });
        } catch (error) {
          throw new Error("Error creating instruction; ".concat(error));
        }
      }
    }]);

    return Secp256k1Program;
  }();

  Secp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');

  var _Lockup;
  /**
   * Address of the stake config account which configures the rate
   * of stake warmup and cooldown as well as the slashing penalty.
   */


  var STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');
  /**
   * Stake account authority info
   */

  var Authorized = /*#__PURE__*/_createClass(
  /**
   * Create a new Authorized object
   * @param staker the stake authority
   * @param withdrawer the withdraw authority
   */
  function Authorized(staker, withdrawer) {
    _classCallCheck(this, Authorized);

    /** stake authority */
    this.staker = void 0;
    /** withdraw authority */

    this.withdrawer = void 0;
    this.staker = staker;
    this.withdrawer = withdrawer;
  });
  /**
   * Stake account lockup info
   */


  var Lockup = /*#__PURE__*/_createClass(
  /**
   * Create a new Lockup object
   */
  function Lockup(unixTimestamp, epoch, custodian) {
    _classCallCheck(this, Lockup);

    /** Unix timestamp of lockup expiration */
    this.unixTimestamp = void 0;
    /** Epoch of lockup expiration */

    this.epoch = void 0;
    /** Lockup custodian authority */

    this.custodian = void 0;
    this.unixTimestamp = unixTimestamp;
    this.epoch = epoch;
    this.custodian = custodian;
  }
  /**
   * Default, inactive Lockup value
   */
  );

  _Lockup = Lockup;
  Lockup["default"] = new _Lockup(0, 0, PublicKey["default"]);
  /**
   * Create stake account transaction params
   */

  /**
   * Create stake account with seed transaction params
   */

  /**
   * Initialize stake instruction params
   */

  /**
   * Delegate stake instruction params
   */

  /**
   * Authorize stake instruction params
   */

  /**
   * Authorize stake instruction params using a derived key
   */

  /**
   * Split stake instruction params
   */

  /**
   * Split with seed transaction params
   */

  /**
   * Withdraw stake instruction params
   */

  /**
   * Deactivate stake instruction params
   */

  /**
   * Merge stake instruction params
   */

  /**
   * Stake Instruction class
   */

  var StakeInstruction = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function StakeInstruction() {
      _classCallCheck(this, StakeInstruction);
    }
    /**
     * Decode a stake instruction and retrieve the instruction type.
     */


    _createClass(StakeInstruction, null, [{
      key: "decodeInstructionType",
      value: function decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        var instructionTypeLayout = u32('instruction');
        var typeIndex = instructionTypeLayout.decode(instruction.data);
        var type;

        for (var _i12 = 0, _Object$entries4 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i12 < _Object$entries4.length; _i12++) {
          var _Object$entries4$_i2 = _slicedToArray(_Object$entries4[_i12], 2),
              ixType = _Object$entries4$_i2[0],
              layout = _Object$entries4$_i2[1];

          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a StakeInstruction');
        }

        return type;
      }
      /**
       * Decode a initialize stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeInitialize",
      value: function decodeInitialize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$18 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),
            authorized = _decodeData$18.authorized,
            lockup = _decodeData$18.lockup;

        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),
          lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))
        };
      }
      /**
       * Decode a delegate stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeDelegate",
      value: function decodeDelegate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 6);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          votePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[5].pubkey
        };
      }
      /**
       * Decode an authorize stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAuthorize",
      value: function decodeAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$19 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),
            newAuthorized = _decodeData$19.newAuthorized,
            stakeAuthorizationType = _decodeData$19.stakeAuthorizationType;

        var o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };

        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }

        return o;
      }
      /**
       * Decode an authorize-with-seed stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAuthorizeWithSeed",
      value: function decodeAuthorizeWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 2);

        var _decodeData$20 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),
            newAuthorized = _decodeData$20.newAuthorized,
            stakeAuthorizationType = _decodeData$20.stakeAuthorizationType,
            authoritySeed = _decodeData$20.authoritySeed,
            authorityOwner = _decodeData$20.authorityOwner;

        var o = {
          stakePubkey: instruction.keys[0].pubkey,
          authorityBase: instruction.keys[1].pubkey,
          authoritySeed: authoritySeed,
          authorityOwner: new PublicKey(authorityOwner),
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          stakeAuthorizationType: {
            index: stakeAuthorizationType
          }
        };

        if (instruction.keys.length > 3) {
          o.custodianPubkey = instruction.keys[3].pubkey;
        }

        return o;
      }
      /**
       * Decode a split stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeSplit",
      value: function decodeSplit(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$21 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),
            lamports = _decodeData$21.lamports;

        return {
          stakePubkey: instruction.keys[0].pubkey,
          splitStakePubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          lamports: lamports
        };
      }
      /**
       * Decode a merge stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeMerge",
      value: function decodeMerge(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          sourceStakePubKey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey
        };
      }
      /**
       * Decode a withdraw stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeWithdraw",
      value: function decodeWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 5);

        var _decodeData$22 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),
            lamports = _decodeData$22.lamports;

        var o = {
          stakePubkey: instruction.keys[0].pubkey,
          toPubkey: instruction.keys[1].pubkey,
          authorizedPubkey: instruction.keys[4].pubkey,
          lamports: lamports
        };

        if (instruction.keys.length > 5) {
          o.custodianPubkey = instruction.keys[5].pubkey;
        }

        return o;
      }
      /**
       * Decode a deactivate stake instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeDeactivate",
      value: function decodeDeactivate(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);
        decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);
        return {
          stakePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey
        };
      }
      /**
       * @internal
       */

    }, {
      key: "checkProgramId",
      value: function checkProgramId(programId) {
        if (!programId.equals(StakeProgram.programId)) {
          throw new Error('invalid instruction; programId is not StakeProgram');
        }
      }
      /**
       * @internal
       */

    }, {
      key: "checkKeyLength",
      value: function checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error("invalid instruction; found ".concat(keys.length, " keys, expected at least ").concat(expectedLength));
        }
      }
    }]);

    return StakeInstruction;
  }();
  /**
   * An enumeration of valid StakeInstructionType's
   */

  /**
   * An enumeration of valid stake InstructionType's
   * @internal
   */


  var STAKE_INSTRUCTION_LAYOUTS = Object.freeze({
    Initialize: {
      index: 0,
      layout: struct([u32('instruction'), authorized(), lockup()])
    },
    Authorize: {
      index: 1,
      layout: struct([u32('instruction'), publicKey('newAuthorized'), u32('stakeAuthorizationType')])
    },
    Delegate: {
      index: 2,
      layout: struct([u32('instruction')])
    },
    Split: {
      index: 3,
      layout: struct([u32('instruction'), ns64('lamports')])
    },
    Withdraw: {
      index: 4,
      layout: struct([u32('instruction'), ns64('lamports')])
    },
    Deactivate: {
      index: 5,
      layout: struct([u32('instruction')])
    },
    Merge: {
      index: 7,
      layout: struct([u32('instruction')])
    },
    AuthorizeWithSeed: {
      index: 8,
      layout: struct([u32('instruction'), publicKey('newAuthorized'), u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])
    }
  });
  /**
   * Stake authorization type
   */

  /**
   * An enumeration of valid StakeAuthorizationLayout's
   */

  var StakeAuthorizationLayout = Object.freeze({
    Staker: {
      index: 0
    },
    Withdrawer: {
      index: 1
    }
  });
  /**
   * Factory class for transactions to interact with the Stake program
   */

  var StakeProgram = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function StakeProgram() {
      _classCallCheck(this, StakeProgram);
    }
    /**
     * Public key that identifies the Stake program
     */

    /**
     * Generate an Initialize instruction to add to a Stake Create transaction
     */


    _createClass(StakeProgram, null, [{
      key: "initialize",
      value: function initialize(params) {
        var stakePubkey = params.stakePubkey,
            authorized = params.authorized,
            maybeLockup = params.lockup;
        var lockup = maybeLockup || Lockup["default"];
        var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;
        var data = encodeData(type, {
          authorized: {
            staker: toBuffer(authorized.staker.toBuffer()),
            withdrawer: toBuffer(authorized.withdrawer.toBuffer())
          },
          lockup: {
            unixTimestamp: lockup.unixTimestamp,
            epoch: lockup.epoch,
            custodian: toBuffer(lockup.custodian.toBuffer())
          }
        });
        var instructionData = {
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a Transaction that creates a new Stake account at
       *   an address generated with `from`, a seed, and the Stake programId
       */

    }, {
      key: "createAccountWithSeed",
      value: function createAccountWithSeed(params) {
        var transaction = new Transaction();
        transaction.add(SystemProgram.createAccountWithSeed({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          basePubkey: params.basePubkey,
          seed: params.seed,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        var stakePubkey = params.stakePubkey,
            authorized = params.authorized,
            lockup = params.lockup;
        return transaction.add(this.initialize({
          stakePubkey: stakePubkey,
          authorized: authorized,
          lockup: lockup
        }));
      }
      /**
       * Generate a Transaction that creates a new Stake account
       */

    }, {
      key: "createAccount",
      value: function createAccount(params) {
        var transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.stakePubkey,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        var stakePubkey = params.stakePubkey,
            authorized = params.authorized,
            lockup = params.lockup;
        return transaction.add(this.initialize({
          stakePubkey: stakePubkey,
          authorized: authorized,
          lockup: lockup
        }));
      }
      /**
       * Generate a Transaction that delegates Stake tokens to a validator
       * Vote PublicKey. This transaction can also be used to redelegate Stake
       * to a new validator Vote PublicKey.
       */

    }, {
      key: "delegate",
      value: function delegate(params) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey,
            votePubkey = params.votePubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;
        var data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: votePubkey,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: STAKE_CONFIG_ID,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */

    }, {
      key: "authorize",
      value: function authorize(params) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey,
            newAuthorizedPubkey = params.newAuthorizedPubkey,
            stakeAuthorizationType = params.stakeAuthorizationType,
            custodianPubkey = params.custodianPubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;
        var data = encodeData(type, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index
        });
        var keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a Transaction that authorizes a new PublicKey as Staker
       * or Withdrawer on the Stake account.
       */

    }, {
      key: "authorizeWithSeed",
      value: function authorizeWithSeed(params) {
        var stakePubkey = params.stakePubkey,
            authorityBase = params.authorityBase,
            authoritySeed = params.authoritySeed,
            authorityOwner = params.authorityOwner,
            newAuthorizedPubkey = params.newAuthorizedPubkey,
            stakeAuthorizationType = params.stakeAuthorizationType,
            custodianPubkey = params.custodianPubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
        var data = encodeData(type, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          stakeAuthorizationType: stakeAuthorizationType.index,
          authoritySeed: authoritySeed,
          authorityOwner: toBuffer(authorityOwner.toBuffer())
        });
        var keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorityBase,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * @internal
       */

    }, {
      key: "splitInstruction",
      value: function splitInstruction(params) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey,
            splitStakePubkey = params.splitStakePubkey,
            lamports = params.lamports;
        var type = STAKE_INSTRUCTION_LAYOUTS.Split;
        var data = encodeData(type, {
          lamports: lamports
        });
        return new TransactionInstruction({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: splitStakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a Transaction that splits Stake tokens into another stake account
       */

    }, {
      key: "split",
      value: function split(params, // Compute the cost of allocating the new stake account in lamports
      rentExemptReserve) {
        var transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.authorizedPubkey,
          newAccountPubkey: params.splitStakePubkey,
          lamports: rentExemptReserve,
          space: this.space,
          programId: this.programId
        }));
        return transaction.add(this.splitInstruction(params));
      }
      /**
       * Generate a Transaction that splits Stake tokens into another account
       * derived from a base public key and seed
       */

    }, {
      key: "splitWithSeed",
      value: function splitWithSeed(params, // If this stake account is new, compute the cost of allocating it in lamports
      rentExemptReserve) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey,
            splitStakePubkey = params.splitStakePubkey,
            basePubkey = params.basePubkey,
            seed = params.seed,
            lamports = params.lamports;
        var transaction = new Transaction();
        transaction.add(SystemProgram.allocate({
          accountPubkey: splitStakePubkey,
          basePubkey: basePubkey,
          seed: seed,
          space: this.space,
          programId: this.programId
        }));

        if (rentExemptReserve && rentExemptReserve > 0) {
          transaction.add(SystemProgram.transfer({
            fromPubkey: params.authorizedPubkey,
            toPubkey: splitStakePubkey,
            lamports: rentExemptReserve
          }));
        }

        return transaction.add(this.splitInstruction({
          stakePubkey: stakePubkey,
          authorizedPubkey: authorizedPubkey,
          splitStakePubkey: splitStakePubkey,
          lamports: lamports
        }));
      }
      /**
       * Generate a Transaction that merges Stake accounts.
       */

    }, {
      key: "merge",
      value: function merge(params) {
        var stakePubkey = params.stakePubkey,
            sourceStakePubKey = params.sourceStakePubKey,
            authorizedPubkey = params.authorizedPubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.Merge;
        var data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: sourceStakePubKey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a Transaction that withdraws deactivated Stake tokens.
       */

    }, {
      key: "withdraw",
      value: function withdraw(params) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey,
            toPubkey = params.toPubkey,
            lamports = params.lamports,
            custodianPubkey = params.custodianPubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;
        var data = encodeData(type, {
          lamports: lamports
        });
        var keys = [{
          pubkey: stakePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: toPubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];

        if (custodianPubkey) {
          keys.push({
            pubkey: custodianPubkey,
            isSigner: true,
            isWritable: false
          });
        }

        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a Transaction that deactivates Stake tokens.
       */

    }, {
      key: "deactivate",
      value: function deactivate(params) {
        var stakePubkey = params.stakePubkey,
            authorizedPubkey = params.authorizedPubkey;
        var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;
        var data = encodeData(type);
        return new Transaction().add({
          keys: [{
            pubkey: stakePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: authorizedPubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        });
      }
    }]);

    return StakeProgram;
  }();

  StakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');
  /**
   * Max space of a Stake account
   *
   * This is generated from the solana-stake-program StakeState struct as
   * `StakeStateV2::size_of()`:
   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html
   */

  StakeProgram.space = 200;
  /**
   * Vote account info
   */

  var VoteInit = /*#__PURE__*/_createClass(
  /** [0, 100] */
  function VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {
    _classCallCheck(this, VoteInit);

    this.nodePubkey = void 0;
    this.authorizedVoter = void 0;
    this.authorizedWithdrawer = void 0;
    this.commission = void 0;
    this.nodePubkey = nodePubkey;
    this.authorizedVoter = authorizedVoter;
    this.authorizedWithdrawer = authorizedWithdrawer;
    this.commission = commission;
  });
  /**
   * Create vote account transaction params
   */

  /**
   * InitializeAccount instruction params
   */

  /**
   * Authorize instruction params
   */

  /**
   * AuthorizeWithSeed instruction params
   */

  /**
   * Withdraw from vote account transaction params
   */

  /**
   * Update validator identity (node pubkey) vote account instruction params.
   */

  /**
   * Vote Instruction class
   */


  var VoteInstruction = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function VoteInstruction() {
      _classCallCheck(this, VoteInstruction);
    }
    /**
     * Decode a vote instruction and retrieve the instruction type.
     */


    _createClass(VoteInstruction, null, [{
      key: "decodeInstructionType",
      value: function decodeInstructionType(instruction) {
        this.checkProgramId(instruction.programId);
        var instructionTypeLayout = u32('instruction');
        var typeIndex = instructionTypeLayout.decode(instruction.data);
        var type;

        for (var _i13 = 0, _Object$entries5 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i13 < _Object$entries5.length; _i13++) {
          var _Object$entries5$_i2 = _slicedToArray(_Object$entries5[_i13], 2),
              ixType = _Object$entries5$_i2[0],
              layout = _Object$entries5$_i2[1];

          if (layout.index == typeIndex) {
            type = ixType;
            break;
          }
        }

        if (!type) {
          throw new Error('Instruction type incorrect; not a VoteInstruction');
        }

        return type;
      }
      /**
       * Decode an initialize vote instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeInitializeAccount",
      value: function decodeInitializeAccount(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 4);

        var _decodeData$23 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),
            voteInit = _decodeData$23.voteInit;

        return {
          votePubkey: instruction.keys[0].pubkey,
          nodePubkey: instruction.keys[3].pubkey,
          voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)
        };
      }
      /**
       * Decode an authorize instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAuthorize",
      value: function decodeAuthorize(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$24 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),
            newAuthorized = _decodeData$24.newAuthorized,
            voteAuthorizationType = _decodeData$24.voteAuthorizationType;

        return {
          votePubkey: instruction.keys[0].pubkey,
          authorizedPubkey: instruction.keys[2].pubkey,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          voteAuthorizationType: {
            index: voteAuthorizationType
          }
        };
      }
      /**
       * Decode an authorize instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeAuthorizeWithSeed",
      value: function decodeAuthorizeWithSeed(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$25 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),
            _decodeData$25$voteAu = _decodeData$25.voteAuthorizeWithSeedArgs,
            currentAuthorityDerivedKeyOwnerPubkey = _decodeData$25$voteAu.currentAuthorityDerivedKeyOwnerPubkey,
            currentAuthorityDerivedKeySeed = _decodeData$25$voteAu.currentAuthorityDerivedKeySeed,
            newAuthorized = _decodeData$25$voteAu.newAuthorized,
            voteAuthorizationType = _decodeData$25$voteAu.voteAuthorizationType;

        return {
          currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,
          currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),
          currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,
          newAuthorizedPubkey: new PublicKey(newAuthorized),
          voteAuthorizationType: {
            index: voteAuthorizationType
          },
          votePubkey: instruction.keys[0].pubkey
        };
      }
      /**
       * Decode a withdraw instruction and retrieve the instruction params.
       */

    }, {
      key: "decodeWithdraw",
      value: function decodeWithdraw(instruction) {
        this.checkProgramId(instruction.programId);
        this.checkKeyLength(instruction.keys, 3);

        var _decodeData$26 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),
            lamports = _decodeData$26.lamports;

        return {
          votePubkey: instruction.keys[0].pubkey,
          authorizedWithdrawerPubkey: instruction.keys[2].pubkey,
          lamports: lamports,
          toPubkey: instruction.keys[1].pubkey
        };
      }
      /**
       * @internal
       */

    }, {
      key: "checkProgramId",
      value: function checkProgramId(programId) {
        if (!programId.equals(VoteProgram.programId)) {
          throw new Error('invalid instruction; programId is not VoteProgram');
        }
      }
      /**
       * @internal
       */

    }, {
      key: "checkKeyLength",
      value: function checkKeyLength(keys, expectedLength) {
        if (keys.length < expectedLength) {
          throw new Error("invalid instruction; found ".concat(keys.length, " keys, expected at least ").concat(expectedLength));
        }
      }
    }]);

    return VoteInstruction;
  }();
  /**
   * An enumeration of valid VoteInstructionType's
   */

  /** @internal */


  var VOTE_INSTRUCTION_LAYOUTS = Object.freeze({
    InitializeAccount: {
      index: 0,
      layout: struct([u32('instruction'), voteInit()])
    },
    Authorize: {
      index: 1,
      layout: struct([u32('instruction'), publicKey('newAuthorized'), u32('voteAuthorizationType')])
    },
    Withdraw: {
      index: 3,
      layout: struct([u32('instruction'), ns64('lamports')])
    },
    UpdateValidatorIdentity: {
      index: 4,
      layout: struct([u32('instruction')])
    },
    AuthorizeWithSeed: {
      index: 10,
      layout: struct([u32('instruction'), voteAuthorizeWithSeedArgs()])
    }
  });
  /**
   * VoteAuthorize type
   */

  /**
   * An enumeration of valid VoteAuthorization layouts.
   */

  var VoteAuthorizationLayout = Object.freeze({
    Voter: {
      index: 0
    },
    Withdrawer: {
      index: 1
    }
  });
  /**
   * Factory class for transactions to interact with the Vote program
   */

  var VoteProgram = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function VoteProgram() {
      _classCallCheck(this, VoteProgram);
    }
    /**
     * Public key that identifies the Vote program
     */

    /**
     * Generate an Initialize instruction.
     */


    _createClass(VoteProgram, null, [{
      key: "initializeAccount",
      value: function initializeAccount(params) {
        var votePubkey = params.votePubkey,
            nodePubkey = params.nodePubkey,
            voteInit = params.voteInit;
        var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;
        var data = encodeData(type, {
          voteInit: {
            nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),
            authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),
            authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),
            commission: voteInit.commission
          }
        });
        var instructionData = {
          keys: [{
            pubkey: votePubkey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: SYSVAR_CLOCK_PUBKEY,
            isSigner: false,
            isWritable: false
          }, {
            pubkey: nodePubkey,
            isSigner: true,
            isWritable: false
          }],
          programId: this.programId,
          data: data
        };
        return new TransactionInstruction(instructionData);
      }
      /**
       * Generate a transaction that creates a new Vote account.
       */

    }, {
      key: "createAccount",
      value: function createAccount(params) {
        var transaction = new Transaction();
        transaction.add(SystemProgram.createAccount({
          fromPubkey: params.fromPubkey,
          newAccountPubkey: params.votePubkey,
          lamports: params.lamports,
          space: this.space,
          programId: this.programId
        }));
        return transaction.add(this.initializeAccount({
          votePubkey: params.votePubkey,
          nodePubkey: params.voteInit.nodePubkey,
          voteInit: params.voteInit
        }));
      }
      /**
       * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.
       */

    }, {
      key: "authorize",
      value: function authorize(params) {
        var votePubkey = params.votePubkey,
            authorizedPubkey = params.authorizedPubkey,
            newAuthorizedPubkey = params.newAuthorizedPubkey,
            voteAuthorizationType = params.voteAuthorizationType;
        var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;
        var data = encodeData(type, {
          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
          voteAuthorizationType: voteAuthorizationType.index
        });
        var keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: authorizedPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account
       * where the current Voter or Withdrawer authority is a derived key.
       */

    }, {
      key: "authorizeWithSeed",
      value: function authorizeWithSeed(params) {
        var currentAuthorityDerivedKeyBasePubkey = params.currentAuthorityDerivedKeyBasePubkey,
            currentAuthorityDerivedKeyOwnerPubkey = params.currentAuthorityDerivedKeyOwnerPubkey,
            currentAuthorityDerivedKeySeed = params.currentAuthorityDerivedKeySeed,
            newAuthorizedPubkey = params.newAuthorizedPubkey,
            voteAuthorizationType = params.voteAuthorizationType,
            votePubkey = params.votePubkey;
        var type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;
        var data = encodeData(type, {
          voteAuthorizeWithSeedArgs: {
            currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),
            currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,
            newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),
            voteAuthorizationType: voteAuthorizationType.index
          }
        });
        var keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_CLOCK_PUBKEY,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: currentAuthorityDerivedKeyBasePubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction to withdraw from a Vote account.
       */

    }, {
      key: "withdraw",
      value: function withdraw(params) {
        var votePubkey = params.votePubkey,
            authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,
            lamports = params.lamports,
            toPubkey = params.toPubkey;
        var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;
        var data = encodeData(type, {
          lamports: lamports
        });
        var keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: toPubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: authorizedWithdrawerPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
      /**
       * Generate a transaction to withdraw safely from a Vote account.
       *
       * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`
       * checks that the withdraw amount will not exceed the specified balance while leaving enough left
       * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the
       * `withdraw` method directly.
       */

    }, {
      key: "safeWithdraw",
      value: function safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {
        if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {
          throw new Error('Withdraw will leave vote account with insufficient funds.');
        }

        return VoteProgram.withdraw(params);
      }
      /**
       * Generate a transaction to update the validator identity (node pubkey) of a Vote account.
       */

    }, {
      key: "updateValidatorIdentity",
      value: function updateValidatorIdentity(params) {
        var votePubkey = params.votePubkey,
            authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,
            nodePubkey = params.nodePubkey;
        var type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;
        var data = encodeData(type);
        var keys = [{
          pubkey: votePubkey,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: nodePubkey,
          isSigner: true,
          isWritable: false
        }, {
          pubkey: authorizedWithdrawerPubkey,
          isSigner: true,
          isWritable: false
        }];
        return new Transaction().add({
          keys: keys,
          programId: this.programId,
          data: data
        });
      }
    }]);

    return VoteProgram;
  }();

  VoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');
  /**
   * Max space of a Vote account
   *
   * This is generated from the solana-vote-program VoteState struct as
   * `VoteState::size_of()`:
   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of
   *
   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342
   */

  VoteProgram.space = 3762;
  var VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');
  /**
   * @internal
   */

  /**
   * Info used to identity validators.
   */

  var InfoString = type({
    name: string(),
    website: optional(string()),
    details: optional(string()),
    iconUrl: optional(string()),
    keybaseUsername: optional(string())
  });
  /**
   * ValidatorInfo class
   */

  var ValidatorInfo = /*#__PURE__*/function () {
    /**
     * Construct a valid ValidatorInfo
     *
     * @param key validator public key
     * @param info validator information
     */
    function ValidatorInfo(key, info) {
      _classCallCheck(this, ValidatorInfo);

      /**
       * validator public key
       */
      this.key = void 0;
      /**
       * validator information
       */

      this.info = void 0;
      this.key = key;
      this.info = info;
    }
    /**
     * Deserialize ValidatorInfo from the config account data. Exactly two config
     * keys are required in the data.
     *
     * @param buffer config account data
     * @return null if info was not found
     */


    _createClass(ValidatorInfo, null, [{
      key: "fromConfigData",
      value: function fromConfigData(buffer) {
        var byteArray = _toConsumableArray(buffer);

        var configKeyCount = decodeLength(byteArray);
        if (configKeyCount !== 2) return null;
        var configKeys = [];

        for (var i = 0; i < 2; i++) {
          var _publicKey4 = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));

          var isSigner = guardedShift(byteArray) === 1;
          configKeys.push({
            publicKey: _publicKey4,
            isSigner: isSigner
          });
        }

        if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {
          if (configKeys[1].isSigner) {
            var rawInfo = rustString().decode(Buffer$1.from(byteArray));
            var info = JSON.parse(rawInfo);
            _assert$1(info, InfoString);
            return new ValidatorInfo(configKeys[1].publicKey, info);
          }
        }

        return null;
      }
    }]);

    return ValidatorInfo;
  }();

  var VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');
  /**
   * History of how many credits earned by the end of each epoch
   */

  /**
   * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88
   *
   * @internal
   */

  var VoteAccountLayout = struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), u8('commission'), nu64$1(), // votes.length
  seq$1(struct([nu64$1('slot'), u32('confirmationCount')]), offset$1(u32(), -8), 'votes'), u8('rootSlotValid'), nu64$1('rootSlot'), nu64$1(), // authorizedVoters.length
  seq$1(struct([nu64$1('epoch'), publicKey('authorizedVoter')]), offset$1(u32(), -8), 'authorizedVoters'), struct([seq$1(struct([publicKey('authorizedPubkey'), nu64$1('epochOfLastAuthorizedSwitch'), nu64$1('targetEpoch')]), 32, 'buf'), nu64$1('idx'), u8('isEmpty')], 'priorVoters'), nu64$1(), // epochCredits.length
  seq$1(struct([nu64$1('epoch'), nu64$1('credits'), nu64$1('prevCredits')]), offset$1(u32(), -8), 'epochCredits'), struct([nu64$1('slot'), nu64$1('timestamp')], 'lastTimestamp')]);
  /**
   * VoteAccount class
   */

  var VoteAccount = /*#__PURE__*/function () {
    /**
     * @internal
     */
    function VoteAccount(args) {
      _classCallCheck(this, VoteAccount);

      this.nodePubkey = void 0;
      this.authorizedWithdrawer = void 0;
      this.commission = void 0;
      this.rootSlot = void 0;
      this.votes = void 0;
      this.authorizedVoters = void 0;
      this.priorVoters = void 0;
      this.epochCredits = void 0;
      this.lastTimestamp = void 0;
      this.nodePubkey = args.nodePubkey;
      this.authorizedWithdrawer = args.authorizedWithdrawer;
      this.commission = args.commission;
      this.rootSlot = args.rootSlot;
      this.votes = args.votes;
      this.authorizedVoters = args.authorizedVoters;
      this.priorVoters = args.priorVoters;
      this.epochCredits = args.epochCredits;
      this.lastTimestamp = args.lastTimestamp;
    }
    /**
     * Deserialize VoteAccount from the account data.
     *
     * @param buffer account data
     * @return VoteAccount
     */


    _createClass(VoteAccount, null, [{
      key: "fromAccountData",
      value: function fromAccountData(buffer) {
        var versionOffset = 4;
        var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);
        var rootSlot = va.rootSlot;

        if (!va.rootSlotValid) {
          rootSlot = null;
        }

        return new VoteAccount({
          nodePubkey: new PublicKey(va.nodePubkey),
          authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),
          commission: va.commission,
          votes: va.votes,
          rootSlot: rootSlot,
          authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),
          priorVoters: getPriorVoters(va.priorVoters),
          epochCredits: va.epochCredits,
          lastTimestamp: va.lastTimestamp
        });
      }
    }]);

    return VoteAccount;
  }();

  function parseAuthorizedVoter(_ref47) {
    var authorizedVoter = _ref47.authorizedVoter,
        epoch = _ref47.epoch;
    return {
      epoch: epoch,
      authorizedVoter: new PublicKey(authorizedVoter)
    };
  }

  function parsePriorVoters(_ref48) {
    var authorizedPubkey = _ref48.authorizedPubkey,
        epochOfLastAuthorizedSwitch = _ref48.epochOfLastAuthorizedSwitch,
        targetEpoch = _ref48.targetEpoch;
    return {
      authorizedPubkey: new PublicKey(authorizedPubkey),
      epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,
      targetEpoch: targetEpoch
    };
  }

  function getPriorVoters(_ref49) {
    var buf = _ref49.buf,
        idx = _ref49.idx,
        isEmpty = _ref49.isEmpty;

    if (isEmpty) {
      return [];
    }

    return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));
  }

  var endpoint$1 = {
    http: {
      devnet: 'http://api.devnet.solana.com',
      testnet: 'http://api.testnet.solana.com',
      'mainnet-beta': 'http://api.mainnet-beta.solana.com/'
    },
    https: {
      devnet: 'https://api.devnet.solana.com',
      testnet: 'https://api.testnet.solana.com',
      'mainnet-beta': 'https://api.mainnet-beta.solana.com/'
    }
  };
  /**
   * Retrieves the RPC API URL for the specified cluster
   * @param {Cluster} [cluster="devnet"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'
   * @param {boolean} [tls="http"] - Use TLS when connecting to cluster.
   *
   * @returns {string} URL string of the RPC endpoint
   */

  function clusterApiUrl(cluster, tls) {
    var key = tls === false ? 'http' : 'https';

    if (!cluster) {
      return endpoint$1[key]['devnet'];
    }

    var url = endpoint$1[key][cluster];

    if (!url) {
      throw new Error("Unknown ".concat(key, " cluster: ").concat(cluster));
    }

    return url;
  }
  /**
   * Send and confirm a raw transaction
   *
   * If `commitment` option is not specified, defaults to 'max' commitment.
   *
   * @param {Connection} connection
   * @param {Buffer} rawTransaction
   * @param {TransactionConfirmationStrategy} confirmationStrategy
   * @param {ConfirmOptions} [options]
   * @returns {Promise<TransactionSignature>}
   */

  /**
   * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`
   * is no longer supported and will be removed in a future version.
   */
  // eslint-disable-next-line no-redeclare
  // eslint-disable-next-line no-redeclare


  function sendAndConfirmRawTransaction(_x164, _x165, _x166, _x167) {
    return _sendAndConfirmRawTransaction.apply(this, arguments);
  }
  /**
   * There are 1-billion lamports in one SOL
   */


  function _sendAndConfirmRawTransaction() {
    _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee111(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {
      var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;
      return _regeneratorRuntime().wrap(function _callee111$(_context111) {
        while (1) switch (_context111.prev = _context111.next) {
          case 0:
            if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {
              confirmationStrategy = confirmationStrategyOrConfirmOptions;
              options = maybeConfirmOptions;
            } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {
              confirmationStrategy = confirmationStrategyOrConfirmOptions;
              options = maybeConfirmOptions;
            } else {
              options = confirmationStrategyOrConfirmOptions;
            }

            sendOptions = options && {
              skipPreflight: options.skipPreflight,
              preflightCommitment: options.preflightCommitment || options.commitment,
              minContextSlot: options.minContextSlot
            };
            _context111.next = 4;
            return connection.sendRawTransaction(rawTransaction, sendOptions);

          case 4:
            signature = _context111.sent;
            commitment = options && options.commitment;
            confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);
            _context111.next = 9;
            return confirmationPromise;

          case 9:
            status = _context111.sent.value;

            if (!status.err) {
              _context111.next = 14;
              break;
            }

            if (!(signature != null)) {
              _context111.next = 13;
              break;
            }

            throw new SendTransactionError({
              action: sendOptions !== null && sendOptions !== void 0 && sendOptions.skipPreflight ? 'send' : 'simulate',
              signature: signature,
              transactionMessage: "Status: (".concat(JSON.stringify(status), ")")
            });

          case 13:
            throw new Error("Raw transaction ".concat(signature, " failed (").concat(JSON.stringify(status), ")"));

          case 14:
            return _context111.abrupt("return", signature);

          case 15:
          case "end":
            return _context111.stop();
        }
      }, _callee111);
    }));
    return _sendAndConfirmRawTransaction.apply(this, arguments);
  }

  var LAMPORTS_PER_SOL = 1000000000;

  var index_browser_esm = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	Account: Account,
  	AddressLookupTableAccount: AddressLookupTableAccount,
  	AddressLookupTableInstruction: AddressLookupTableInstruction,
  	AddressLookupTableProgram: AddressLookupTableProgram,
  	Authorized: Authorized,
  	BLOCKHASH_CACHE_TIMEOUT_MS: BLOCKHASH_CACHE_TIMEOUT_MS,
  	BPF_LOADER_DEPRECATED_PROGRAM_ID: BPF_LOADER_DEPRECATED_PROGRAM_ID,
  	BPF_LOADER_PROGRAM_ID: BPF_LOADER_PROGRAM_ID,
  	BpfLoader: BpfLoader,
  	COMPUTE_BUDGET_INSTRUCTION_LAYOUTS: COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,
  	ComputeBudgetInstruction: ComputeBudgetInstruction,
  	ComputeBudgetProgram: ComputeBudgetProgram,
  	Connection: Connection,
  	Ed25519Program: Ed25519Program,
  	Enum: Enum,
  	EpochSchedule: EpochSchedule,
  	FeeCalculatorLayout: FeeCalculatorLayout,
  	Keypair: Keypair,
  	LAMPORTS_PER_SOL: LAMPORTS_PER_SOL,
  	LOOKUP_TABLE_INSTRUCTION_LAYOUTS: LOOKUP_TABLE_INSTRUCTION_LAYOUTS,
  	Loader: Loader,
  	Lockup: Lockup,
  	MAX_SEED_LENGTH: MAX_SEED_LENGTH,
  	Message: Message,
  	MessageAccountKeys: MessageAccountKeys,
  	MessageV0: MessageV0,
  	NONCE_ACCOUNT_LENGTH: NONCE_ACCOUNT_LENGTH,
  	NonceAccount: NonceAccount,
  	PACKET_DATA_SIZE: PACKET_DATA_SIZE,
  	PUBLIC_KEY_LENGTH: PUBLIC_KEY_LENGTH,
  	PublicKey: PublicKey,
  	SIGNATURE_LENGTH_IN_BYTES: SIGNATURE_LENGTH_IN_BYTES,
  	SOLANA_SCHEMA: SOLANA_SCHEMA,
  	STAKE_CONFIG_ID: STAKE_CONFIG_ID,
  	STAKE_INSTRUCTION_LAYOUTS: STAKE_INSTRUCTION_LAYOUTS,
  	SYSTEM_INSTRUCTION_LAYOUTS: SYSTEM_INSTRUCTION_LAYOUTS,
  	SYSVAR_CLOCK_PUBKEY: SYSVAR_CLOCK_PUBKEY,
  	SYSVAR_EPOCH_SCHEDULE_PUBKEY: SYSVAR_EPOCH_SCHEDULE_PUBKEY,
  	SYSVAR_INSTRUCTIONS_PUBKEY: SYSVAR_INSTRUCTIONS_PUBKEY,
  	SYSVAR_RECENT_BLOCKHASHES_PUBKEY: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,
  	SYSVAR_RENT_PUBKEY: SYSVAR_RENT_PUBKEY,
  	SYSVAR_REWARDS_PUBKEY: SYSVAR_REWARDS_PUBKEY,
  	SYSVAR_SLOT_HASHES_PUBKEY: SYSVAR_SLOT_HASHES_PUBKEY,
  	SYSVAR_SLOT_HISTORY_PUBKEY: SYSVAR_SLOT_HISTORY_PUBKEY,
  	SYSVAR_STAKE_HISTORY_PUBKEY: SYSVAR_STAKE_HISTORY_PUBKEY,
  	Secp256k1Program: Secp256k1Program,
  	SendTransactionError: SendTransactionError,
  	SolanaJSONRPCError: SolanaJSONRPCError,
  	SolanaJSONRPCErrorCode: SolanaJSONRPCErrorCode,
  	StakeAuthorizationLayout: StakeAuthorizationLayout,
  	StakeInstruction: StakeInstruction,
  	StakeProgram: StakeProgram,
  	Struct: Struct,
  	SystemInstruction: SystemInstruction,
  	SystemProgram: SystemProgram,
  	Transaction: Transaction,
  	TransactionExpiredBlockheightExceededError: TransactionExpiredBlockheightExceededError,
  	TransactionExpiredNonceInvalidError: TransactionExpiredNonceInvalidError,
  	TransactionExpiredTimeoutError: TransactionExpiredTimeoutError,
  	TransactionInstruction: TransactionInstruction,
  	TransactionMessage: TransactionMessage,
  	TransactionStatus: TransactionStatus,
  	VALIDATOR_INFO_KEY: VALIDATOR_INFO_KEY,
  	VERSION_PREFIX_MASK: VERSION_PREFIX_MASK,
  	VOTE_PROGRAM_ID: VOTE_PROGRAM_ID,
  	ValidatorInfo: ValidatorInfo,
  	VersionedMessage: VersionedMessage,
  	VersionedTransaction: VersionedTransaction,
  	VoteAccount: VoteAccount,
  	VoteAuthorizationLayout: VoteAuthorizationLayout,
  	VoteInit: VoteInit,
  	VoteInstruction: VoteInstruction,
  	VoteProgram: VoteProgram,
  	clusterApiUrl: clusterApiUrl,
  	sendAndConfirmRawTransaction: sendAndConfirmRawTransaction,
  	sendAndConfirmTransaction: sendAndConfirmTransaction
  });

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(index_browser_esm);

  var cjs$2 = {};

  var cjs$1 = {};

  var commitment = {};

  Object.defineProperty(commitment, "__esModule", {
    value: true
  });
  commitment.getCommitment = void 0;
  /**
   * TODO: docs
   */

  function getCommitment(commitment) {
    switch (commitment) {
      case 'processed':
      case 'confirmed':
      case 'finalized':
      case undefined:
        return commitment;

      case 'recent':
        return 'processed';

      case 'single':
      case 'singleGossip':
        return 'confirmed';

      case 'max':
      case 'root':
        return 'finalized';

      default:
        return undefined;
    }
  }

  commitment.getCommitment = getCommitment;

  var endpoint = {};

  var cjs = {};

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSolanaChain = exports.SOLANA_CHAINS = exports.SOLANA_LOCALNET_CHAIN = exports.SOLANA_TESTNET_CHAIN = exports.SOLANA_DEVNET_CHAIN = exports.SOLANA_MAINNET_CHAIN = void 0;
    /** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */

    exports.SOLANA_MAINNET_CHAIN = 'solana:mainnet';
    /** Solana Devnet cluster, e.g. https://api.devnet.solana.com */

    exports.SOLANA_DEVNET_CHAIN = 'solana:devnet';
    /** Solana Testnet cluster, e.g. https://api.testnet.solana.com */

    exports.SOLANA_TESTNET_CHAIN = 'solana:testnet';
    /** Solana Localnet cluster, e.g. http://localhost:8899 */

    exports.SOLANA_LOCALNET_CHAIN = 'solana:localnet';
    /** Array of all Solana clusters */

    exports.SOLANA_CHAINS = [exports.SOLANA_MAINNET_CHAIN, exports.SOLANA_DEVNET_CHAIN, exports.SOLANA_TESTNET_CHAIN, exports.SOLANA_LOCALNET_CHAIN];
    /**
     * Check if a chain corresponds with one of the Solana clusters.
     */

    function isSolanaChain(chain) {
      return exports.SOLANA_CHAINS.includes(chain);
    }

    exports.isSolanaChain = isSolanaChain;
  })(cjs);

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getEndpointForChain = exports.getChainForEndpoint = exports.LOCALNET_ENDPOINT = exports.TESTNET_ENDPOINT = exports.DEVNET_ENDPOINT = exports.MAINNET_ENDPOINT = void 0;
    var wallet_standard_chains_1 = cjs;
    /** TODO: docs */

    exports.MAINNET_ENDPOINT = 'https://api.mainnet-beta.solana.com';
    /** TODO: docs */

    exports.DEVNET_ENDPOINT = 'https://api.devnet.solana.com';
    /** TODO: docs */

    exports.TESTNET_ENDPOINT = 'https://api.testnet.solana.com';
    /** TODO: docs */

    exports.LOCALNET_ENDPOINT = 'http://localhost:8899';
    /**
     * TODO: docs
     */

    function getChainForEndpoint(endpoint) {
      if (endpoint.includes(exports.MAINNET_ENDPOINT)) return wallet_standard_chains_1.SOLANA_MAINNET_CHAIN;
      if (/\bdevnet\b/i.test(endpoint)) return wallet_standard_chains_1.SOLANA_DEVNET_CHAIN;
      if (/\btestnet\b/i.test(endpoint)) return wallet_standard_chains_1.SOLANA_TESTNET_CHAIN;
      if (/\blocalhost\b/i.test(endpoint) || /\b127\.0\.0\.1\b/.test(endpoint)) return wallet_standard_chains_1.SOLANA_LOCALNET_CHAIN;
      return wallet_standard_chains_1.SOLANA_MAINNET_CHAIN;
    }

    exports.getChainForEndpoint = getChainForEndpoint;
    /**
     * TODO: docs
     */

    function getEndpointForChain(chain, endpoint) {
      if (endpoint) return endpoint;
      if (chain === wallet_standard_chains_1.SOLANA_MAINNET_CHAIN) return exports.MAINNET_ENDPOINT;
      if (chain === wallet_standard_chains_1.SOLANA_DEVNET_CHAIN) return exports.DEVNET_ENDPOINT;
      if (chain === wallet_standard_chains_1.SOLANA_TESTNET_CHAIN) return exports.TESTNET_ENDPOINT;
      if (chain === wallet_standard_chains_1.SOLANA_LOCALNET_CHAIN) return exports.LOCALNET_ENDPOINT;
      return exports.MAINNET_ENDPOINT;
    }

    exports.getEndpointForChain = getEndpointForChain;
  })(endpoint);

  var signIn = {};

  var signMessage = {};

  var ed25519 = {};

  var sha512 = {};

  var _md = {};

  var _assert = {};

  Object.defineProperty(_assert, "__esModule", {
    value: true
  });
  _assert.isBytes = isBytes$1;
  _assert.number = number;
  _assert.bool = bool;
  _assert.bytes = bytes;
  _assert.hash = hash;
  _assert.exists = exists;
  _assert.output = output;

  function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error("positive integer expected, not ".concat(n));
  }

  function bool(b) {
    if (typeof b !== 'boolean') throw new Error("boolean expected, not ".concat(b));
  } // copied from utils


  function isBytes$1(a) {
    return a instanceof Uint8Array || a != null && _typeof(a) === 'object' && a.constructor.name === 'Uint8Array';
  }

  function bytes(b) {
    if (!isBytes$1(b)) throw new Error('Uint8Array expected');

    for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      lengths[_key - 1] = arguments[_key];
    }

    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error("Uint8Array expected of length ".concat(lengths, ", not of length=").concat(b.length));
  }

  function hash(h) {
    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(h.outputLen);
    number(h.blockLen);
  }

  function exists(instance) {
    var checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (instance.destroyed) throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
  }

  function output(out, instance) {
    bytes(out);
    var min = instance.outputLen;

    if (out.length < min) {
      throw new Error("digestInto() expects output buffer of length at least ".concat(min));
    }
  }

  var assert = {
    number: number,
    bool: bool,
    bytes: bytes,
    hash: hash,
    exists: exists,
    output: output
  };

  _assert["default"] = assert;

  var utils$1 = {};

  var crypto$1 = {};

  Object.defineProperty(crypto$1, "__esModule", {
    value: true
  });
  crypto$1.crypto = void 0;
  crypto$1.crypto = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

  (function (exports) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Hash = exports.nextTick = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
    exports.isBytes = isBytes;
    exports.byteSwap32 = byteSwap32;
    exports.bytesToHex = bytesToHex;
    exports.hexToBytes = hexToBytes;
    exports.asyncLoop = asyncLoop;
    exports.utf8ToBytes = utf8ToBytes;
    exports.toBytes = toBytes;
    exports.concatBytes = concatBytes;
    exports.checkOpts = checkOpts;
    exports.wrapConstructor = wrapConstructor;
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    exports.randomBytes = randomBytes; // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
    // node.js versions earlier than v19 don't declare it in global scope.
    // For node.js, package.json#exports field mapping rewrites import
    // from `crypto` to `cryptoNode`, which imports native module.
    // Makes the utils un-importable in browsers without a bundler.
    // Once node.js 18 is deprecated (2025-04-30), we can just drop the import.

    var crypto_1 = crypto$1;
    var _assert_js_1 = _assert; // export { isBytes } from './_assert.js';
    // We can't reuse isBytes from _assert, because somehow this causes huge perf issues

    function isBytes(a) {
      return a instanceof Uint8Array || a != null && _typeof(a) === 'object' && a.constructor.name === 'Uint8Array';
    } // Cast array to different type


    var u8 = function u8(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    };

    exports.u8 = u8;

    var u32 = function u32(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    };

    exports.u32 = u32; // Cast array to view

    var createView = function createView(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    };

    exports.createView = createView; // The rotate right (circular right shift) operation for uint32

    var rotr = function rotr(word, shift) {
      return word << 32 - shift | word >>> shift;
    };

    exports.rotr = rotr; // The rotate left (circular left shift) operation for uint32

    var rotl = function rotl(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    };

    exports.rotl = rotl;
    exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44; // The byte swap operation for uint32

    var byteSwap = function byteSwap(word) {
      return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;
    };

    exports.byteSwap = byteSwap; // Conditionally byte swap if on a big-endian platform

    exports.byteSwapIfBE = exports.isLE ? function (n) {
      return n;
    } : function (n) {
      return (0, exports.byteSwap)(n);
    }; // In place byte swap for Uint32Array

    function byteSwap32(arr) {
      for (var i = 0; i < arr.length; i++) {
        arr[i] = (0, exports.byteSwap)(arr[i]);
      }
    } // Array where index 0xf0 (240) is mapped to string 'f0'


    var hexes = /* @__PURE__ */Array.from({
      length: 256
    }, function (_, i) {
      return i.toString(16).padStart(2, '0');
    });
    /**
     * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
     */

    function bytesToHex(bytes) {
      (0, _assert_js_1.bytes)(bytes); // pre-caching improves the speed 6x

      var hex = '';

      for (var i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }

      return hex;
    } // We use optimized technique to convert hex string to byte array


    var asciis = {
      _0: 48,
      _9: 57,
      _A: 65,
      _F: 70,
      _a: 97,
      _f: 102
    };

    function asciiToBase16(_char) {
      if (_char >= asciis._0 && _char <= asciis._9) return _char - asciis._0;
      if (_char >= asciis._A && _char <= asciis._F) return _char - (asciis._A - 10);
      if (_char >= asciis._a && _char <= asciis._f) return _char - (asciis._a - 10);
      return;
    }
    /**
     * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
     */


    function hexToBytes(hex) {
      if (typeof hex !== 'string') throw new Error('hex string expected, got ' + _typeof(hex));
      var hl = hex.length;
      var al = hl / 2;
      if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
      var array = new Uint8Array(al);

      for (var ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        var n1 = asciiToBase16(hex.charCodeAt(hi));
        var n2 = asciiToBase16(hex.charCodeAt(hi + 1));

        if (n1 === undefined || n2 === undefined) {
          var _char2 = hex[hi] + hex[hi + 1];

          throw new Error('hex string expected, got non-hex character "' + _char2 + '" at index ' + hi);
        }

        array[ai] = n1 * 16 + n2;
      }

      return array;
    } // There is no setImmediate in browser and setTimeout is slow.
    // call of async fn will return Promise, which will be fullfiled only on
    // next scheduler queue processing step and this is exactly what we need.


    var nextTick = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));

      return function nextTick() {
        return _ref.apply(this, arguments);
      };
    }();

    exports.nextTick = nextTick; // Returns control to thread each 'tick' ms to avoid blocking

    function asyncLoop(_x, _x2, _x3) {
      return _asyncLoop.apply(this, arguments);
    }
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */


    function _asyncLoop() {
      _asyncLoop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(iters, tick, cb) {
        var ts, i, diff;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              ts = Date.now();
              i = 0;

            case 2:
              if (!(i < iters)) {
                _context2.next = 13;
                break;
              }

              cb(i); // Date.now() is not monotonic, so in case if clock goes backwards we return return control too

              diff = Date.now() - ts;

              if (!(diff >= 0 && diff < tick)) {
                _context2.next = 7;
                break;
              }

              return _context2.abrupt("continue", 10);

            case 7:
              _context2.next = 9;
              return (0, exports.nextTick)();

            case 9:
              ts += diff;

            case 10:
              i++;
              _context2.next = 2;
              break;

            case 13:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return _asyncLoop.apply(this, arguments);
    }

    function utf8ToBytes(str) {
      if (typeof str !== 'string') throw new Error("utf8ToBytes expected string, got ".concat(_typeof(str)));
      return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    /**
     * Normalizes (non-hex) string or Uint8Array to Uint8Array.
     * Warning: when Uint8Array is passed, it would NOT get copied.
     * Keep in mind for future mutable operations.
     */


    function toBytes(data) {
      if (typeof data === 'string') data = utf8ToBytes(data);
      (0, _assert_js_1.bytes)(data);
      return data;
    }
    /**
     * Copies several Uint8Arrays into one.
     */


    function concatBytes() {
      var sum = 0;

      for (var i = 0; i < arguments.length; i++) {
        var a = i < 0 || arguments.length <= i ? undefined : arguments[i];
        (0, _assert_js_1.bytes)(a);
        sum += a.length;
      }

      var res = new Uint8Array(sum);

      for (var _i2 = 0, pad = 0; _i2 < arguments.length; _i2++) {
        var _a = _i2 < 0 || arguments.length <= _i2 ? undefined : arguments[_i2];

        res.set(_a, pad);
        pad += _a.length;
      }

      return res;
    } // For runtime check if class implements interface


    var Hash = /*#__PURE__*/function () {
      function Hash() {
        _classCallCheck(this, Hash);
      }

      _createClass(Hash, [{
        key: "clone",
        value: // Safe version that clones internal state
        function clone() {
          return this._cloneInto();
        }
      }]);

      return Hash;
    }();

    exports.Hash = Hash;
    var toStr = {}.toString;

    function checkOpts(defaults, opts) {
      if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');
      var merged = Object.assign(defaults, opts);
      return merged;
    }

    function wrapConstructor(hashCons) {
      var hashC = function hashC(msg) {
        return hashCons().update(toBytes(msg)).digest();
      };

      var tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;

      hashC.create = function () {
        return hashCons();
      };

      return hashC;
    }

    function wrapConstructorWithOpts(hashCons) {
      var hashC = function hashC(msg, opts) {
        return hashCons(opts).update(toBytes(msg)).digest();
      };

      var tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;

      hashC.create = function (opts) {
        return hashCons(opts);
      };

      return hashC;
    }

    function wrapXOFConstructorWithOpts(hashCons) {
      var hashC = function hashC(msg, opts) {
        return hashCons(opts).update(toBytes(msg)).digest();
      };

      var tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;

      hashC.create = function (opts) {
        return hashCons(opts);
      };

      return hashC;
    }
    /**
     * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
     */


    function randomBytes() {
      var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;

      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      } // Legacy Node.js compatibility


      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === 'function') {
        return crypto_1.crypto.randomBytes(bytesLength);
      }

      throw new Error('crypto.getRandomValues must be defined');
    }
  })(utils$1);

  Object.defineProperty(_md, "__esModule", {
    value: true
  });
  _md.HashMD = _md.Maj = _md.Chi = void 0;
  var _assert_js_1 = _assert;
  var utils_js_1$6 = utils$1;
  /**
   * Polyfill for Safari 14
   */

  function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);

    var _32n = BigInt(32);

    var _u32_max = BigInt(0xffffffff);

    var wh = Number(value >> _32n & _u32_max);
    var wl = Number(value & _u32_max);
    var h = isLE ? 4 : 0;
    var l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
  }
  /**
   * Choice: a ? b : c
   */


  var Chi = function Chi(a, b, c) {
    return a & b ^ ~a & c;
  };

  _md.Chi = Chi;
  /**
   * Majority function, true if any two inputs is true
   */

  var Maj = function Maj(a, b, c) {
    return a & b ^ a & c ^ b & c;
  };

  _md.Maj = Maj;
  /**
   * Merkle-Damgard hash construction base class.
   * Could be used to create MD5, RIPEMD, SHA1, SHA2.
   */

  var HashMD = /*#__PURE__*/function (_utils_js_1$Hash) {
    _inherits(HashMD, _utils_js_1$Hash);

    var _super = _createSuper(HashMD);

    function HashMD(blockLen, outputLen, padOffset, isLE) {
      var _this;

      _classCallCheck(this, HashMD);

      _this = _super.call(this);
      _this.blockLen = blockLen;
      _this.outputLen = outputLen;
      _this.padOffset = padOffset;
      _this.isLE = isLE;
      _this.finished = false;
      _this.length = 0;
      _this.pos = 0;
      _this.destroyed = false;
      _this.buffer = new Uint8Array(blockLen);
      _this.view = (0, utils_js_1$6.createView)(_this.buffer);
      return _this;
    }

    _createClass(HashMD, [{
      key: "update",
      value: function update(data) {
        (0, _assert_js_1.exists)(this);
        var view = this.view,
            buffer = this.buffer,
            blockLen = this.blockLen;
        data = (0, utils_js_1$6.toBytes)(data);
        var len = data.length;

        for (var pos = 0; pos < len;) {
          var take = Math.min(blockLen - this.pos, len - pos); // Fast path: we have at least one block in input, cast it to view and process

          if (take === blockLen) {
            var dataView = (0, utils_js_1$6.createView)(data);

            for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);

            continue;
          }

          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;

          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }

        this.length += data.length;
        this.roundClean();
        return this;
      }
    }, {
      key: "digestInto",
      value: function digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true; // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.

        var buffer = this.buffer,
            view = this.view,
            blockLen = this.blockLen,
            isLE = this.isLE;
        var pos = this.pos; // append the bit '1' to the message

        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0); // we have less than padOffset left in buffer, so we cannot put length in
        // current block, need process it and pad again

        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        } // Pad until full block byte with zeros


        for (var i = pos; i < blockLen; i++) buffer[i] = 0; // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.


        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        var oview = (0, utils_js_1$6.createView)(out);
        var len = this.outputLen; // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT

        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
        var outLen = len / 4;
        var state = this.get();
        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');

        for (var _i2 = 0; _i2 < outLen; _i2++) oview.setUint32(4 * _i2, state[_i2], isLE);
      }
    }, {
      key: "digest",
      value: function digest() {
        var buffer = this.buffer,
            outputLen = this.outputLen;
        this.digestInto(buffer);
        var res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
    }, {
      key: "_cloneInto",
      value: function _cloneInto(to) {
        var _to;

        to || (to = new this.constructor());

        (_to = to).set.apply(_to, _toConsumableArray(this.get()));

        var blockLen = this.blockLen,
            buffer = this.buffer,
            length = this.length,
            finished = this.finished,
            destroyed = this.destroyed,
            pos = this.pos;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
      }
    }]);

    return HashMD;
  }(utils_js_1$6.Hash);

  _md.HashMD = HashMD;

  var _u64 = {};

  Object.defineProperty(_u64, "__esModule", {
    value: true
  });
  _u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = void 0;
  _u64.fromBig = fromBig;
  _u64.split = split;
  _u64.add = add;
  var U32_MASK64 = /* @__PURE__ */BigInt(Math.pow(2, 32) - 1);

  var _32n = /* @__PURE__ */BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022


  function fromBig(n) {
    var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (le) return {
      h: Number(n & U32_MASK64),
      l: Number(n >> _32n & U32_MASK64)
    };
    return {
      h: Number(n >> _32n & U32_MASK64) | 0,
      l: Number(n & U32_MASK64) | 0
    };
  }

  function split(lst) {
    var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var Ah = new Uint32Array(lst.length);
    var Al = new Uint32Array(lst.length);

    for (var i = 0; i < lst.length; i++) {
      var _fromBig2 = fromBig(lst[i], le),
          h = _fromBig2.h,
          l = _fromBig2.l;

      var _ref = [h, l];
      Ah[i] = _ref[0];
      Al[i] = _ref[1];
    }

    return [Ah, Al];
  }

  var toBig = function toBig(h, l) {
    return BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
  };

  _u64.toBig = toBig; // for Shift in [0, 32)

  var shrSH = function shrSH(h, _l, s) {
    return h >>> s;
  };

  _u64.shrSH = shrSH;

  var shrSL = function shrSL(h, l, s) {
    return h << 32 - s | l >>> s;
  };

  _u64.shrSL = shrSL; // Right rotate for Shift in [1, 32)

  var rotrSH = function rotrSH(h, l, s) {
    return h >>> s | l << 32 - s;
  };

  _u64.rotrSH = rotrSH;

  var rotrSL = function rotrSL(h, l, s) {
    return h << 32 - s | l >>> s;
  };

  _u64.rotrSL = rotrSL; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.

  var rotrBH = function rotrBH(h, l, s) {
    return h << 64 - s | l >>> s - 32;
  };

  _u64.rotrBH = rotrBH;

  var rotrBL = function rotrBL(h, l, s) {
    return h >>> s - 32 | l << 64 - s;
  };

  _u64.rotrBL = rotrBL; // Right rotate for shift===32 (just swaps l&h)

  var rotr32H = function rotr32H(_h, l) {
    return l;
  };

  _u64.rotr32H = rotr32H;

  var rotr32L = function rotr32L(h, _l) {
    return h;
  };

  _u64.rotr32L = rotr32L; // Left rotate for Shift in [1, 32)

  var rotlSH = function rotlSH(h, l, s) {
    return h << s | l >>> 32 - s;
  };

  _u64.rotlSH = rotlSH;

  var rotlSL = function rotlSL(h, l, s) {
    return l << s | h >>> 32 - s;
  };

  _u64.rotlSL = rotlSL; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.

  var rotlBH = function rotlBH(h, l, s) {
    return l << s - 32 | h >>> 64 - s;
  };

  _u64.rotlBH = rotlBH;

  var rotlBL = function rotlBL(h, l, s) {
    return h << s - 32 | l >>> 64 - s;
  };

  _u64.rotlBL = rotlBL; // JS uses 32-bit signed integers for bitwise operations which means we cannot
  // simple take carry out of low bit sum by shift, we need to use division.

  function add(Ah, Al, Bh, Bl) {
    var l = (Al >>> 0) + (Bl >>> 0);
    return {
      h: Ah + Bh + (l / Math.pow(2, 32) | 0) | 0,
      l: l | 0
    };
  } // Addition with more than 2 elements


  var add3L = function add3L(Al, Bl, Cl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  };

  _u64.add3L = add3L;

  var add3H = function add3H(low, Ah, Bh, Ch) {
    return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;
  };

  _u64.add3H = add3H;

  var add4L = function add4L(Al, Bl, Cl, Dl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  };

  _u64.add4L = add4L;

  var add4H = function add4H(low, Ah, Bh, Ch, Dh) {
    return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;
  };

  _u64.add4H = add4H;

  var add5L = function add5L(Al, Bl, Cl, Dl, El) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  };

  _u64.add5L = add5L;

  var add5H = function add5H(low, Ah, Bh, Ch, Dh, Eh) {
    return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;
  };

  _u64.add5H = add5H; // prettier-ignore

  var u64 = {
    fromBig: fromBig,
    split: split,
    toBig: toBig,
    shrSH: shrSH,
    shrSL: shrSL,
    rotrSH: rotrSH,
    rotrSL: rotrSL,
    rotrBH: rotrBH,
    rotrBL: rotrBL,
    rotr32H: rotr32H,
    rotr32L: rotr32L,
    rotlSH: rotlSH,
    rotlSL: rotlSL,
    rotlBH: rotlBH,
    rotlBL: rotlBL,
    add: add,
    add3L: add3L,
    add3H: add3H,
    add4L: add4L,
    add4H: add4H,
    add5H: add5H,
    add5L: add5L
  };

  _u64["default"] = u64;

  Object.defineProperty(sha512, "__esModule", {
    value: true
  });
  sha512.sha384 = sha512.sha512_256 = sha512.sha512_224 = sha512.sha512 = sha512.SHA384 = sha512.SHA512_256 = sha512.SHA512_224 = sha512.SHA512 = void 0;
  var _md_js_1 = _md;
  var _u64_js_1 = _u64;
  var utils_js_1$5 = utils$1; // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
  // prettier-ignore

  var _ref = /* @__PURE__ */function () {
    return _u64_js_1["default"].split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(function (n) {
      return BigInt(n);
    }));
  }(),
      _ref2 = _slicedToArray(_ref, 2),
      SHA512_Kh = _ref2[0],
      SHA512_Kl = _ref2[1]; // Temporary buffer, not used to store anything between runs


  var SHA512_W_H = /* @__PURE__ */new Uint32Array(80);
  var SHA512_W_L = /* @__PURE__ */new Uint32Array(80);

  var SHA512 = /*#__PURE__*/function (_md_js_1$HashMD) {
    _inherits(SHA512, _md_js_1$HashMD);

    var _super = _createSuper(SHA512);

    function SHA512() {
      var _this;

      _classCallCheck(this, SHA512);

      _this = _super.call(this, 128, 64, 16, false); // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
      // Also looks cleaner and easier to verify with spec.
      // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
      // h -- high 32 bits, l -- low 32 bits

      _this.Ah = 0x6a09e667 | 0;
      _this.Al = 0xf3bcc908 | 0;
      _this.Bh = 0xbb67ae85 | 0;
      _this.Bl = 0x84caa73b | 0;
      _this.Ch = 0x3c6ef372 | 0;
      _this.Cl = 0xfe94f82b | 0;
      _this.Dh = 0xa54ff53a | 0;
      _this.Dl = 0x5f1d36f1 | 0;
      _this.Eh = 0x510e527f | 0;
      _this.El = 0xade682d1 | 0;
      _this.Fh = 0x9b05688c | 0;
      _this.Fl = 0x2b3e6c1f | 0;
      _this.Gh = 0x1f83d9ab | 0;
      _this.Gl = 0xfb41bd6b | 0;
      _this.Hh = 0x5be0cd19 | 0;
      _this.Hl = 0x137e2179 | 0;
      return _this;
    } // prettier-ignore


    _createClass(SHA512, [{
      key: "get",
      value: function get() {
        var Ah = this.Ah,
            Al = this.Al,
            Bh = this.Bh,
            Bl = this.Bl,
            Ch = this.Ch,
            Cl = this.Cl,
            Dh = this.Dh,
            Dl = this.Dl,
            Eh = this.Eh,
            El = this.El,
            Fh = this.Fh,
            Fl = this.Fl,
            Gh = this.Gh,
            Gl = this.Gl,
            Hh = this.Hh,
            Hl = this.Hl;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      } // prettier-ignore

    }, {
      key: "set",
      value: function set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
    }, {
      key: "process",
      value: function process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (var i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H[i] = view.getUint32(offset);
          SHA512_W_L[i] = view.getUint32(offset += 4);
        }

        for (var _i2 = 16; _i2 < 80; _i2++) {
          // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
          var W15h = SHA512_W_H[_i2 - 15] | 0;
          var W15l = SHA512_W_L[_i2 - 15] | 0;

          var s0h = _u64_js_1["default"].rotrSH(W15h, W15l, 1) ^ _u64_js_1["default"].rotrSH(W15h, W15l, 8) ^ _u64_js_1["default"].shrSH(W15h, W15l, 7);

          var s0l = _u64_js_1["default"].rotrSL(W15h, W15l, 1) ^ _u64_js_1["default"].rotrSL(W15h, W15l, 8) ^ _u64_js_1["default"].shrSL(W15h, W15l, 7); // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)


          var W2h = SHA512_W_H[_i2 - 2] | 0;
          var W2l = SHA512_W_L[_i2 - 2] | 0;

          var s1h = _u64_js_1["default"].rotrSH(W2h, W2l, 19) ^ _u64_js_1["default"].rotrBH(W2h, W2l, 61) ^ _u64_js_1["default"].shrSH(W2h, W2l, 6);

          var s1l = _u64_js_1["default"].rotrSL(W2h, W2l, 19) ^ _u64_js_1["default"].rotrBL(W2h, W2l, 61) ^ _u64_js_1["default"].shrSL(W2h, W2l, 6); // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];


          var SUMl = _u64_js_1["default"].add4L(s0l, s1l, SHA512_W_L[_i2 - 7], SHA512_W_L[_i2 - 16]);

          var SUMh = _u64_js_1["default"].add4H(SUMl, s0h, s1h, SHA512_W_H[_i2 - 7], SHA512_W_H[_i2 - 16]);

          SHA512_W_H[_i2] = SUMh | 0;
          SHA512_W_L[_i2] = SUMl | 0;
        }

        var Ah = this.Ah,
            Al = this.Al,
            Bh = this.Bh,
            Bl = this.Bl,
            Ch = this.Ch,
            Cl = this.Cl,
            Dh = this.Dh,
            Dl = this.Dl,
            Eh = this.Eh,
            El = this.El,
            Fh = this.Fh,
            Fl = this.Fl,
            Gh = this.Gh,
            Gl = this.Gl,
            Hh = this.Hh,
            Hl = this.Hl; // Compression function main loop, 80 rounds

        for (var _i4 = 0; _i4 < 80; _i4++) {
          // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
          var sigma1h = _u64_js_1["default"].rotrSH(Eh, El, 14) ^ _u64_js_1["default"].rotrSH(Eh, El, 18) ^ _u64_js_1["default"].rotrBH(Eh, El, 41);

          var sigma1l = _u64_js_1["default"].rotrSL(Eh, El, 14) ^ _u64_js_1["default"].rotrSL(Eh, El, 18) ^ _u64_js_1["default"].rotrBL(Eh, El, 41); //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;


          var CHIh = Eh & Fh ^ ~Eh & Gh;
          var CHIl = El & Fl ^ ~El & Gl; // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
          // prettier-ignore

          var T1ll = _u64_js_1["default"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[_i4], SHA512_W_L[_i4]);

          var T1h = _u64_js_1["default"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[_i4], SHA512_W_H[_i4]);

          var T1l = T1ll | 0; // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)

          var sigma0h = _u64_js_1["default"].rotrSH(Ah, Al, 28) ^ _u64_js_1["default"].rotrBH(Ah, Al, 34) ^ _u64_js_1["default"].rotrBH(Ah, Al, 39);

          var sigma0l = _u64_js_1["default"].rotrSL(Ah, Al, 28) ^ _u64_js_1["default"].rotrBL(Ah, Al, 34) ^ _u64_js_1["default"].rotrBL(Ah, Al, 39);

          var MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          var MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;

          var _u64_js_1$default$add = _u64_js_1["default"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0);

          Eh = _u64_js_1$default$add.h;
          El = _u64_js_1$default$add.l;
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;

          var All = _u64_js_1["default"].add3L(T1l, sigma0l, MAJl);

          Ah = _u64_js_1["default"].add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        } // Add the compressed chunk to the current hash value


        var _u64_js_1$default$add2 = _u64_js_1["default"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0);

        Ah = _u64_js_1$default$add2.h;
        Al = _u64_js_1$default$add2.l;

        var _u64_js_1$default$add3 = _u64_js_1["default"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0);

        Bh = _u64_js_1$default$add3.h;
        Bl = _u64_js_1$default$add3.l;

        var _u64_js_1$default$add4 = _u64_js_1["default"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0);

        Ch = _u64_js_1$default$add4.h;
        Cl = _u64_js_1$default$add4.l;

        var _u64_js_1$default$add5 = _u64_js_1["default"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0);

        Dh = _u64_js_1$default$add5.h;
        Dl = _u64_js_1$default$add5.l;

        var _u64_js_1$default$add6 = _u64_js_1["default"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0);

        Eh = _u64_js_1$default$add6.h;
        El = _u64_js_1$default$add6.l;

        var _u64_js_1$default$add7 = _u64_js_1["default"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0);

        Fh = _u64_js_1$default$add7.h;
        Fl = _u64_js_1$default$add7.l;

        var _u64_js_1$default$add8 = _u64_js_1["default"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0);

        Gh = _u64_js_1$default$add8.h;
        Gl = _u64_js_1$default$add8.l;

        var _u64_js_1$default$add9 = _u64_js_1["default"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0);

        Hh = _u64_js_1$default$add9.h;
        Hl = _u64_js_1$default$add9.l;
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
    }, {
      key: "roundClean",
      value: function roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    }]);

    return SHA512;
  }(_md_js_1.HashMD);

  sha512.SHA512 = SHA512;

  var SHA512_224 = /*#__PURE__*/function (_SHA) {
    _inherits(SHA512_224, _SHA);

    var _super2 = _createSuper(SHA512_224);

    function SHA512_224() {
      var _this2;

      _classCallCheck(this, SHA512_224);

      _this2 = _super2.call(this); // h -- high 32 bits, l -- low 32 bits

      _this2.Ah = 0x8c3d37c8 | 0;
      _this2.Al = 0x19544da2 | 0;
      _this2.Bh = 0x73e19966 | 0;
      _this2.Bl = 0x89dcd4d6 | 0;
      _this2.Ch = 0x1dfab7ae | 0;
      _this2.Cl = 0x32ff9c82 | 0;
      _this2.Dh = 0x679dd514 | 0;
      _this2.Dl = 0x582f9fcf | 0;
      _this2.Eh = 0x0f6d2b69 | 0;
      _this2.El = 0x7bd44da8 | 0;
      _this2.Fh = 0x77e36f73 | 0;
      _this2.Fl = 0x04c48942 | 0;
      _this2.Gh = 0x3f9d85a8 | 0;
      _this2.Gl = 0x6a1d36c8 | 0;
      _this2.Hh = 0x1112e6ad | 0;
      _this2.Hl = 0x91d692a1 | 0;
      _this2.outputLen = 28;
      return _this2;
    }

    return _createClass(SHA512_224);
  }(SHA512);

  sha512.SHA512_224 = SHA512_224;

  var SHA512_256 = /*#__PURE__*/function (_SHA2) {
    _inherits(SHA512_256, _SHA2);

    var _super3 = _createSuper(SHA512_256);

    function SHA512_256() {
      var _this3;

      _classCallCheck(this, SHA512_256);

      _this3 = _super3.call(this); // h -- high 32 bits, l -- low 32 bits

      _this3.Ah = 0x22312194 | 0;
      _this3.Al = 0xfc2bf72c | 0;
      _this3.Bh = 0x9f555fa3 | 0;
      _this3.Bl = 0xc84c64c2 | 0;
      _this3.Ch = 0x2393b86b | 0;
      _this3.Cl = 0x6f53b151 | 0;
      _this3.Dh = 0x96387719 | 0;
      _this3.Dl = 0x5940eabd | 0;
      _this3.Eh = 0x96283ee2 | 0;
      _this3.El = 0xa88effe3 | 0;
      _this3.Fh = 0xbe5e1e25 | 0;
      _this3.Fl = 0x53863992 | 0;
      _this3.Gh = 0x2b0199fc | 0;
      _this3.Gl = 0x2c85b8aa | 0;
      _this3.Hh = 0x0eb72ddc | 0;
      _this3.Hl = 0x81c52ca2 | 0;
      _this3.outputLen = 32;
      return _this3;
    }

    return _createClass(SHA512_256);
  }(SHA512);

  sha512.SHA512_256 = SHA512_256;

  var SHA384 = /*#__PURE__*/function (_SHA3) {
    _inherits(SHA384, _SHA3);

    var _super4 = _createSuper(SHA384);

    function SHA384() {
      var _this4;

      _classCallCheck(this, SHA384);

      _this4 = _super4.call(this); // h -- high 32 bits, l -- low 32 bits

      _this4.Ah = 0xcbbb9d5d | 0;
      _this4.Al = 0xc1059ed8 | 0;
      _this4.Bh = 0x629a292a | 0;
      _this4.Bl = 0x367cd507 | 0;
      _this4.Ch = 0x9159015a | 0;
      _this4.Cl = 0x3070dd17 | 0;
      _this4.Dh = 0x152fecd8 | 0;
      _this4.Dl = 0xf70e5939 | 0;
      _this4.Eh = 0x67332667 | 0;
      _this4.El = 0xffc00b31 | 0;
      _this4.Fh = 0x8eb44a87 | 0;
      _this4.Fl = 0x68581511 | 0;
      _this4.Gh = 0xdb0c2e0d | 0;
      _this4.Gl = 0x64f98fa7 | 0;
      _this4.Hh = 0x47b5481d | 0;
      _this4.Hl = 0xbefa4fa4 | 0;
      _this4.outputLen = 48;
      return _this4;
    }

    return _createClass(SHA384);
  }(SHA512);

  sha512.SHA384 = SHA384;
  sha512.sha512 = (0, utils_js_1$5.wrapConstructor)(function () {
    return new SHA512();
  });
  sha512.sha512_224 = (0, utils_js_1$5.wrapConstructor)(function () {
    return new SHA512_224();
  });
  sha512.sha512_256 = (0, utils_js_1$5.wrapConstructor)(function () {
    return new SHA512_256();
  });
  sha512.sha384 = (0, utils_js_1$5.wrapConstructor)(function () {
    return new SHA384();
  });

  var edwards = {};

  var curve = {};

  var modular = {};

  var utils = {};

  Object.defineProperty(utils, "__esModule", {
    value: true
  });
  utils.notImplemented = utils.bitMask = void 0;
  utils.isBytes = isBytes;
  utils.abytes = abytes;
  utils.abool = abool;
  utils.bytesToHex = bytesToHex;
  utils.numberToHexUnpadded = numberToHexUnpadded;
  utils.hexToNumber = hexToNumber;
  utils.hexToBytes = hexToBytes;
  utils.bytesToNumberBE = bytesToNumberBE;
  utils.bytesToNumberLE = bytesToNumberLE;
  utils.numberToBytesBE = numberToBytesBE;
  utils.numberToBytesLE = numberToBytesLE;
  utils.numberToVarBytesBE = numberToVarBytesBE;
  utils.ensureBytes = ensureBytes;
  utils.concatBytes = concatBytes;
  utils.equalBytes = equalBytes;
  utils.utf8ToBytes = utf8ToBytes;
  utils.inRange = inRange;
  utils.aInRange = aInRange;
  utils.bitLen = bitLen;
  utils.bitGet = bitGet;
  utils.bitSet = bitSet;
  utils.createHmacDrbg = createHmacDrbg;
  utils.validateObject = validateObject;
  utils.memoized = memoized;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // 100 lines of code in the file are duplicated from noble-hashes (utils).
  // This is OK: `abstract` directory does not use noble-hashes.
  // User may opt-in into using different hashing library. This way, noble-hashes
  // won't be included into their bundle.

  var _0n$4 = /* @__PURE__ */BigInt(0);

  var _1n$4 = /* @__PURE__ */BigInt(1);

  var _2n$2 = /* @__PURE__ */BigInt(2);

  function isBytes(a) {
    return a instanceof Uint8Array || a != null && _typeof(a) === 'object' && a.constructor.name === 'Uint8Array';
  }

  function abytes(item) {
    if (!isBytes(item)) throw new Error('Uint8Array expected');
  }

  function abool(title, value) {
    if (typeof value !== 'boolean') throw new Error("".concat(title, " must be valid boolean, got \"").concat(value, "\"."));
  } // Array where index 0xf0 (240) is mapped to string 'f0'


  var hexes = /* @__PURE__ */Array.from({
    length: 256
  }, function (_, i) {
    return i.toString(16).padStart(2, '0');
  });
  /**
   * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
   */

  function bytesToHex(bytes) {
    abytes(bytes); // pre-caching improves the speed 6x

    var hex = '';

    for (var i = 0; i < bytes.length; i++) {
      hex += hexes[bytes[i]];
    }

    return hex;
  }

  function numberToHexUnpadded(num) {
    var hex = num.toString(16);
    return hex.length & 1 ? "0".concat(hex) : hex;
  }

  function hexToNumber(hex) {
    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + _typeof(hex)); // Big Endian

    return BigInt(hex === '' ? '0' : "0x".concat(hex));
  } // We use optimized technique to convert hex string to byte array


  var asciis = {
    _0: 48,
    _9: 57,
    _A: 65,
    _F: 70,
    _a: 97,
    _f: 102
  };

  function asciiToBase16(_char) {
    if (_char >= asciis._0 && _char <= asciis._9) return _char - asciis._0;
    if (_char >= asciis._A && _char <= asciis._F) return _char - (asciis._A - 10);
    if (_char >= asciis._a && _char <= asciis._f) return _char - (asciis._a - 10);
    return;
  }
  /**
   * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
   */


  function hexToBytes(hex) {
    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + _typeof(hex));
    var hl = hex.length;
    var al = hl / 2;
    if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
    var array = new Uint8Array(al);

    for (var ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      var n1 = asciiToBase16(hex.charCodeAt(hi));
      var n2 = asciiToBase16(hex.charCodeAt(hi + 1));

      if (n1 === undefined || n2 === undefined) {
        var _char2 = hex[hi] + hex[hi + 1];

        throw new Error('hex string expected, got non-hex character "' + _char2 + '" at index ' + hi);
      }

      array[ai] = n1 * 16 + n2;
    }

    return array;
  } // BE: Big Endian, LE: Little Endian


  function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
  }

  function bytesToNumberLE(bytes) {
    abytes(bytes);
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
  }

  function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
  }

  function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
  } // Unpadded, rarely used


  function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
  }
  /**
   * Takes hex string or Uint8Array, converts to Uint8Array.
   * Validates output length.
   * Will throw error for other types.
   * @param title descriptive title for an error e.g. 'private key'
   * @param hex hex string or Uint8Array
   * @param expectedLength optional, will compare to result array's length
   * @returns
   */


  function ensureBytes(title, hex, expectedLength) {
    var res;

    if (typeof hex === 'string') {
      try {
        res = hexToBytes(hex);
      } catch (e) {
        throw new Error("".concat(title, " must be valid hex string, got \"").concat(hex, "\". Cause: ").concat(e));
      }
    } else if (isBytes(hex)) {
      // Uint8Array.from() instead of hash.slice() because node.js Buffer
      // is instance of Uint8Array, and its slice() creates **mutable** copy
      res = Uint8Array.from(hex);
    } else {
      throw new Error("".concat(title, " must be hex string or Uint8Array"));
    }

    var len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error("".concat(title, " expected ").concat(expectedLength, " bytes, got ").concat(len));
    return res;
  }
  /**
   * Copies several Uint8Arrays into one.
   */


  function concatBytes() {
    var sum = 0;

    for (var i = 0; i < arguments.length; i++) {
      var a = i < 0 || arguments.length <= i ? undefined : arguments[i];
      abytes(a);
      sum += a.length;
    }

    var res = new Uint8Array(sum);

    for (var _i2 = 0, pad = 0; _i2 < arguments.length; _i2++) {
      var _a = _i2 < 0 || arguments.length <= _i2 ? undefined : arguments[_i2];

      res.set(_a, pad);
      pad += _a.length;
    }

    return res;
  } // Compares 2 u8a-s in kinda constant time


  function equalBytes(a, b) {
    if (a.length !== b.length) return false;
    var diff = 0;

    for (var i = 0; i < a.length; i++) diff |= a[i] ^ b[i];

    return diff === 0;
  }
  /**
   * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
   */


  function utf8ToBytes(str) {
    if (typeof str !== 'string') throw new Error("utf8ToBytes expected string, got ".concat(_typeof(str)));
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
  } // Is positive bigint


  var isPosBig = function isPosBig(n) {
    return typeof n === 'bigint' && _0n$4 <= n;
  };

  function inRange(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
  }
  /**
   * Asserts min <= n < max. NOTE: It's < max and not <= max.
   * @example
   * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)
   */


  function aInRange(title, n, min, max) {
    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?
    // consider P=256n, min=0n, max=P
    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`
    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`
    // - our way is the cleanest:               `inRange('x', x, 0n, P)
    if (!inRange(n, min, max)) throw new Error("expected valid ".concat(title, ": ").concat(min, " <= n < ").concat(max, ", got ").concat(_typeof(n), " ").concat(n));
  } // Bit operations

  /**
   * Calculates amount of bits in a bigint.
   * Same as `n.toString(2).length`
   */


  function bitLen(n) {
    var len;

    for (len = 0; n > _0n$4; n >>= _1n$4, len += 1);

    return len;
  }
  /**
   * Gets single bit at position.
   * NOTE: first bit position is 0 (same as arrays)
   * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
   */


  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n$4;
  }
  /**
   * Sets single bit at position.
   */


  function bitSet(n, pos, value) {
    return n | (value ? _1n$4 : _0n$4) << BigInt(pos);
  }
  /**
   * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
   * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
   */


  var bitMask = function bitMask(n) {
    return (_2n$2 << BigInt(n - 1)) - _1n$4;
  };

  utils.bitMask = bitMask; // DRBG

  var u8n = function u8n(data) {
    return new Uint8Array(data);
  }; // creates Uint8Array


  var u8fr = function u8fr(arr) {
    return Uint8Array.from(arr);
  }; // another shortcut

  /**
   * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
   * @returns function that will call DRBG until 2nd arg returns something meaningful
   * @example
   *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
   *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
   */


  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function'); // Step B, Step C: set hashLen to 8*ceil(hlen/8)

    var v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.

    var k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same

    var i = 0; // Iterations counter, will throw when over 1000

    var reset = function reset() {
      v.fill(1);
      k.fill(0);
      i = 0;
    };

    var h = function h() {
      for (var _len = arguments.length, b = new Array(_len), _key = 0; _key < _len; _key++) {
        b[_key] = arguments[_key];
      }

      return hmacFn.apply(void 0, [k, v].concat(b));
    }; // hmac(k)(v, ...values)


    var reseed = function reseed() {
      var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : u8n();
      // HMAC-DRBG reseed() function. Steps D-G
      k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)

      v = h(); // v = hmac(k || v)

      if (seed.length === 0) return;
      k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)

      v = h(); // v = hmac(k || v)
    };

    var gen = function gen() {
      // HMAC-DRBG generate() function
      if (i++ >= 1000) throw new Error('drbg: tried 1000 values');
      var len = 0;
      var out = [];

      while (len < qByteLen) {
        v = h();
        var sl = v.slice();
        out.push(sl);
        len += v.length;
      }

      return concatBytes.apply(void 0, out);
    };

    var genUntil = function genUntil(seed, pred) {
      reset();
      reseed(seed); // Steps D-G

      var res = undefined; // Step H: grind until k is in [1..n-1]

      while (!(res = pred(gen()))) reseed();

      reset();
      return res;
    };

    return genUntil;
  } // Validating curves and fields


  var validatorFns = {
    bigint: function bigint(val) {
      return typeof val === 'bigint';
    },
    "function": function _function(val) {
      return typeof val === 'function';
    },
    "boolean": function boolean(val) {
      return typeof val === 'boolean';
    },
    string: function string(val) {
      return typeof val === 'string';
    },
    stringOrUint8Array: function stringOrUint8Array(val) {
      return typeof val === 'string' || isBytes(val);
    },
    isSafeInteger: function isSafeInteger(val) {
      return Number.isSafeInteger(val);
    },
    array: function array(val) {
      return Array.isArray(val);
    },
    field: function field(val, object) {
      return object.Fp.isValid(val);
    },
    hash: function hash(val) {
      return typeof val === 'function' && Number.isSafeInteger(val.outputLen);
    }
  }; // type Record<K extends string | number | symbol, T> = { [P in K]: T; }

  function validateObject(object, validators) {
    var optValidators = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var checkField = function checkField(fieldName, type, isOptional) {
      var checkVal = validatorFns[type];
      if (typeof checkVal !== 'function') throw new Error("Invalid validator \"".concat(type, "\", expected function"));
      var val = object[fieldName];
      if (isOptional && val === undefined) return;

      if (!checkVal(val, object)) {
        throw new Error("Invalid param ".concat(String(fieldName), "=").concat(val, " (").concat(_typeof(val), "), expected ").concat(type));
      }
    };

    for (var _i3 = 0, _Object$entries = Object.entries(validators); _i3 < _Object$entries.length; _i3++) {
      var _Object$entries$_i2 = _slicedToArray(_Object$entries[_i3], 2),
          fieldName = _Object$entries$_i2[0],
          type = _Object$entries$_i2[1];

      checkField(fieldName, type, false);
    }

    for (var _i4 = 0, _Object$entries2 = Object.entries(optValidators); _i4 < _Object$entries2.length; _i4++) {
      var _Object$entries2$_i2 = _slicedToArray(_Object$entries2[_i4], 2),
          _fieldName = _Object$entries2$_i2[0],
          _type = _Object$entries2$_i2[1];

      checkField(_fieldName, _type, true);
    }

    return object;
  } // validate type tests
  // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
  // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
  // // Should fail type-check
  // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
  // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
  // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
  // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

  /**
   * throws not implemented error
   */


  var notImplemented = function notImplemented() {
    throw new Error('not implemented');
  };

  utils.notImplemented = notImplemented;
  /**
   * Memoizes (caches) computation result.
   * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.
   */

  function memoized(fn) {
    var map = new WeakMap();
    return function (arg) {
      var val = map.get(arg);
      if (val !== undefined) return val;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var computed = fn.apply(void 0, [arg].concat(args));
      map.set(arg, computed);
      return computed;
    };
  }

  Object.defineProperty(modular, "__esModule", {
    value: true
  });
  modular.isNegativeLE = void 0;
  modular.mod = mod;
  modular.pow = pow;
  modular.pow2 = pow2;
  modular.invert = invert;
  modular.tonelliShanks = tonelliShanks;
  modular.FpSqrt = FpSqrt;
  modular.validateField = validateField;
  modular.FpPow = FpPow;
  modular.FpInvertBatch = FpInvertBatch;
  modular.FpDiv = FpDiv;
  modular.FpLegendre = FpLegendre;
  modular.FpIsSquare = FpIsSquare;
  modular.nLength = nLength;
  modular.Field = Field;
  modular.FpSqrtOdd = FpSqrtOdd;
  modular.FpSqrtEven = FpSqrtEven;
  modular.hashToPrivateScalar = hashToPrivateScalar;
  modular.getFieldBytesLength = getFieldBytesLength;
  modular.getMinHashLength = getMinHashLength;
  modular.mapHashToField = mapHashToField;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Utilities for modular arithmetics and finite fields

  var utils_js_1$4 = utils; // prettier-ignore

  var _0n$3 = BigInt(0),
      _1n$3 = BigInt(1),
      _2n$1 = BigInt(2),
      _3n = BigInt(3); // prettier-ignore


  var _4n = BigInt(4),
      _5n = BigInt(5),
      _8n$1 = BigInt(8); // prettier-ignore


  BigInt(9);
      BigInt(16); // Calculates a modulo b


  function mod(a, b) {
    var result = a % b;
    return result >= _0n$3 ? result : b + result;
  }
  /**
   * Efficiently raise num to power and do modular division.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   * @example
   * pow(2n, 6n, 11n) // 64n % 11n == 9n
   */
  // TODO: use field version && remove


  function pow(num, power, modulo) {
    if (modulo <= _0n$3 || power < _0n$3) throw new Error('Expected power/modulo > 0');
    if (modulo === _1n$3) return _0n$3;
    var res = _1n$3;

    while (power > _0n$3) {
      if (power & _1n$3) res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n$3;
    }

    return res;
  } // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)


  function pow2(x, power, modulo) {
    var res = x;

    while (power-- > _0n$3) {
      res *= res;
      res %= modulo;
    }

    return res;
  } // Inverses number over modulo


  function invert(number, modulo) {
    if (number === _0n$3 || modulo <= _0n$3) {
      throw new Error("invert: expected positive integers, got n=".concat(number, " mod=").concat(modulo));
    } // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.


    var a = mod(number, modulo);
    var b = modulo; // prettier-ignore

    var x = _0n$3,
        u = _1n$3;

    while (a !== _0n$3) {
      // JIT applies optimization if those two lines follow each other
      var q = b / a;
      var r = b % a;
      var m = x - u * q;

      b = a, a = r, x = u, u = m;
    }

    var gcd = b;
    if (gcd !== _1n$3) throw new Error('invert: does not exist');
    return mod(x, modulo);
  }
  /**
   * Tonelli-Shanks square root search algorithm.
   * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
   * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
   * Will start an infinite loop if field order P is not prime.
   * @param P field order
   * @returns function that takes field Fp (created from P) and number n
   */


  function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    var legendreC = (P - _1n$3) / _2n$1;
    var Q, S, Z; // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd

    for (Q = P - _1n$3, S = 0; Q % _2n$1 === _0n$3; Q /= _2n$1, S++); // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq


    for (Z = _2n$1; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++); // Fast-path


    if (S === 1) {
      var p1div4 = (P + _1n$3) / _4n;
      return function tonelliFast(Fp, n) {
        var root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // Slow-path


    var Q1div2 = (Q + _1n$3) / _2n$1;
    return function tonelliSlow(Fp, n) {
      // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');
      var r = S; // TODO: will fail at Fp2/etc

      var g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b

      var x = Fp.pow(n, Q1div2); // first guess at the square root

      var b = Fp.pow(n, Q); // first guess at the fudge factor

      while (!Fp.eql(b, Fp.ONE)) {
        if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
        // Find m such b^(2^m)==1

        var m = 1;

        for (var t2 = Fp.sqr(b); m < r; m++) {
          if (Fp.eql(t2, Fp.ONE)) break;
          t2 = Fp.sqr(t2); // t2 *= t2
        } // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow


        var ge = Fp.pow(g, _1n$3 << BigInt(r - m - 1)); // ge = 2^(r-m-1)

        g = Fp.sqr(ge); // g = ge * ge

        x = Fp.mul(x, ge); // x *= ge

        b = Fp.mul(b, g); // b *= g

        r = m;
      }

      return x;
    };
  }

  function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
      // Not all roots possible!
      // const ORDER =
      //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
      // const NUM = 72057594037927816n;
      var p1div4 = (P + _1n$3) / _4n;
      return function sqrt3mod4(Fp, n) {
        var root = Fp.pow(n, p1div4); // Throw if root**2 != n

        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)


    if (P % _8n$1 === _5n) {
      var c1 = (P - _5n) / _8n$1;
      return function sqrt5mod8(Fp, n) {
        var n2 = Fp.mul(n, _2n$1);
        var v = Fp.pow(n2, c1);
        var nv = Fp.mul(n, v);
        var i = Fp.mul(Fp.mul(nv, _2n$1), v);
        var root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
        if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');
        return root;
      };
    } // P ≡ 9 (mod 16)


    return tonelliShanks(P);
  } // Little-endian check for first LE bit (last BE bit);


  var isNegativeLE = function isNegativeLE(num, modulo) {
    return (mod(num, modulo) & _1n$3) === _1n$3;
  };

  modular.isNegativeLE = isNegativeLE; // prettier-ignore

  var FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];

  function validateField(field) {
    var initial = {
      ORDER: 'bigint',
      MASK: 'bigint',
      BYTES: 'isSafeInteger',
      BITS: 'isSafeInteger'
    };
    var opts = FIELD_FIELDS.reduce(function (map, val) {
      map[val] = 'function';
      return map;
    }, initial);
    return (0, utils_js_1$4.validateObject)(field, opts);
  } // Generic field functions

  /**
   * Same as `pow` but for Fp: non-constant-time.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   */


  function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n$3) throw new Error('Expected power > 0');
    if (power === _0n$3) return f.ONE;
    if (power === _1n$3) return num;
    var p = f.ONE;
    var d = num;

    while (power > _0n$3) {
      if (power & _1n$3) p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n$3;
    }

    return p;
  }
  /**
   * Efficiently invert an array of Field elements.
   * `inv(0)` will return `undefined` here: make sure to throw an error.
   */


  function FpInvertBatch(f, nums) {
    var tmp = new Array(nums.length); // Walk from first to last, multiply them by each other MOD p

    var lastMultiplied = nums.reduce(function (acc, num, i) {
      if (f.is0(num)) return acc;
      tmp[i] = acc;
      return f.mul(acc, num);
    }, f.ONE); // Invert last element

    var inverted = f.inv(lastMultiplied); // Walk from last to first, multiply them by inverted each other MOD p

    nums.reduceRight(function (acc, num, i) {
      if (f.is0(num)) return acc;
      tmp[i] = f.mul(acc, tmp[i]);
      return f.mul(acc, num);
    }, inverted);
    return tmp;
  }

  function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));
  }

  function FpLegendre(order) {
    // (a | p) ≡ 1    if a is a square (mod p), quadratic residue
    // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    var legendreConst = (order - _1n$3) / _2n$1; // Integer arithmetic

    return function (f, x) {
      return f.pow(x, legendreConst);
    };
  } // This function returns True whenever the value x is a square in the field F.


  function FpIsSquare(f) {
    var legendre = FpLegendre(f.ORDER);
    return function (x) {
      var p = legendre(f, x);
      return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
  } // CURVE.n lengths


  function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    var _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;

    var nByteLength = Math.ceil(_nBitLength / 8);
    return {
      nBitLength: _nBitLength,
      nByteLength: nByteLength
    };
  }
  /**
   * Initializes a finite field over prime. **Non-primes are not supported.**
   * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
   * Major performance optimizations:
   * * a) denormalized operations like mulN instead of mul
   * * b) same object shape: never add or remove keys
   * * c) Object.freeze
   * NOTE: operations don't check 'isValid' for all elements for performance reasons,
   * it is caller responsibility to check this.
   * This is low-level code, please make sure you know what you doing.
   * @param ORDER prime positive bigint
   * @param bitLen how many bits the field consumes
   * @param isLE (def: false) if encoding / decoding should be in little-endian
   * @param redef optional faster redefinitions of sqrt and other methods
   */


  function Field(ORDER, bitLen) {
    var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var redef = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    if (ORDER <= _0n$3) throw new Error("Expected Field ORDER > 0, got ".concat(ORDER));

    var _nLength = nLength(ORDER, bitLen),
        BITS = _nLength.nBitLength,
        BYTES = _nLength.nByteLength;

    if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');
    var sqrtP = FpSqrt(ORDER);
    var f = Object.freeze({
      ORDER: ORDER,
      BITS: BITS,
      BYTES: BYTES,
      MASK: (0, utils_js_1$4.bitMask)(BITS),
      ZERO: _0n$3,
      ONE: _1n$3,
      create: function create(num) {
        return mod(num, ORDER);
      },
      isValid: function isValid(num) {
        if (typeof num !== 'bigint') throw new Error("Invalid field element: expected bigint, got ".concat(_typeof(num)));
        return _0n$3 <= num && num < ORDER; // 0 is valid element, but it's not invertible
      },
      is0: function is0(num) {
        return num === _0n$3;
      },
      isOdd: function isOdd(num) {
        return (num & _1n$3) === _1n$3;
      },
      neg: function neg(num) {
        return mod(-num, ORDER);
      },
      eql: function eql(lhs, rhs) {
        return lhs === rhs;
      },
      sqr: function sqr(num) {
        return mod(num * num, ORDER);
      },
      add: function add(lhs, rhs) {
        return mod(lhs + rhs, ORDER);
      },
      sub: function sub(lhs, rhs) {
        return mod(lhs - rhs, ORDER);
      },
      mul: function mul(lhs, rhs) {
        return mod(lhs * rhs, ORDER);
      },
      pow: function pow(num, power) {
        return FpPow(f, num, power);
      },
      div: function div(lhs, rhs) {
        return mod(lhs * invert(rhs, ORDER), ORDER);
      },
      // Same as above, but doesn't normalize
      sqrN: function sqrN(num) {
        return num * num;
      },
      addN: function addN(lhs, rhs) {
        return lhs + rhs;
      },
      subN: function subN(lhs, rhs) {
        return lhs - rhs;
      },
      mulN: function mulN(lhs, rhs) {
        return lhs * rhs;
      },
      inv: function inv(num) {
        return invert(num, ORDER);
      },
      sqrt: redef.sqrt || function (n) {
        return sqrtP(f, n);
      },
      invertBatch: function invertBatch(lst) {
        return FpInvertBatch(f, lst);
      },
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: function cmov(a, b, c) {
        return c ? b : a;
      },
      toBytes: function toBytes(num) {
        return isLE ? (0, utils_js_1$4.numberToBytesLE)(num, BYTES) : (0, utils_js_1$4.numberToBytesBE)(num, BYTES);
      },
      fromBytes: function fromBytes(bytes) {
        if (bytes.length !== BYTES) throw new Error("Fp.fromBytes: expected ".concat(BYTES, ", got ").concat(bytes.length));
        return isLE ? (0, utils_js_1$4.bytesToNumberLE)(bytes) : (0, utils_js_1$4.bytesToNumberBE)(bytes);
      }
    });
    return Object.freeze(f);
  }

  function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd) throw new Error("Field doesn't have isOdd");
    var root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
  }

  function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd) throw new Error("Field doesn't have isOdd");
    var root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
  }
  /**
   * "Constant-time" private key generation utility.
   * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
   * Which makes it slightly more biased, less secure.
   * @deprecated use mapKeyToField instead
   */


  function hashToPrivateScalar(hash, groupOrder) {
    var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    hash = (0, utils_js_1$4.ensureBytes)('privateHash', hash);
    var hashLen = hash.length;
    var minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error("hashToPrivateScalar: expected ".concat(minLen, "-1024 bytes of input, got ").concat(hashLen));
    var num = isLE ? (0, utils_js_1$4.bytesToNumberLE)(hash) : (0, utils_js_1$4.bytesToNumberBE)(hash);
    return mod(num, groupOrder - _1n$3) + _1n$3;
  }
  /**
   * Returns total number of bytes consumed by the field element.
   * For example, 32 bytes for usual 256-bit weierstrass curve.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of field
   */


  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');
    var bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  /**
   * Returns minimal amount of bytes that can be safely reduced
   * by field order.
   * Should be 2^-128 for 128-bit curve such as P256.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of target hash
   */


  function getMinHashLength(fieldOrder) {
    var length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  /**
   * "Constant-time" private key generation utility.
   * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
   * and convert them into private scalar, with the modulo bias being negligible.
   * Needs at least 48 bytes of input for 32-byte private key.
   * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
   * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
   * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
   * @param hash hash output from SHA3 or a similar function
   * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
   * @param isLE interpret hash bytes as LE num
   * @returns valid private scalar
   */


  function mapHashToField(key, fieldOrder) {
    var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var len = key.length;
    var fieldLen = getFieldBytesLength(fieldOrder);
    var minLen = getMinHashLength(fieldOrder); // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.

    if (len < 16 || len < minLen || len > 1024) throw new Error("expected ".concat(minLen, "-1024 bytes of input, got ").concat(len));
    var num = isLE ? (0, utils_js_1$4.bytesToNumberBE)(key) : (0, utils_js_1$4.bytesToNumberLE)(key); // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0

    var reduced = mod(num, fieldOrder - _1n$3) + _1n$3;

    return isLE ? (0, utils_js_1$4.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1$4.numberToBytesBE)(reduced, fieldLen);
  }

  Object.defineProperty(curve, "__esModule", {
    value: true
  });
  curve.wNAF = wNAF;
  curve.pippenger = pippenger;
  curve.validateBasic = validateBasic;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Abelian group utilities

  var modular_js_1$3 = modular;
  var utils_js_1$3 = utils;

  var _0n$2 = BigInt(0);

  var _1n$2 = BigInt(1); // Since points in different groups cannot be equal (different object constructor),
  // we can have single place to store precomputes


  var pointPrecomputes = new WeakMap();
  var pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)
  // Elliptic curve multiplication of Point by scalar. Fragile.
  // Scalars should always be less than curve order: this should be checked inside of a curve itself.
  // Creates precomputation tables for fast multiplication:
  // - private scalar is split by fixed size windows of W bits
  // - every window point is collected from window's table & added to accumulator
  // - since windows are different, same point inside tables won't be accessed more than once per calc
  // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
  // - +1 window is neccessary for wNAF
  // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
  // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
  // windows to be in different memory locations

  function wNAF(c, bits) {
    var constTimeNegate = function constTimeNegate(condition, item) {
      var neg = item.negate();
      return condition ? neg : item;
    };

    var validateW = function validateW(W) {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error("Wrong window size=".concat(W, ", should be [1..").concat(bits, "]"));
    };

    var opts = function opts(W) {
      validateW(W);
      var windows = Math.ceil(bits / W) + 1; // +1, because

      var windowSize = Math.pow(2, W - 1); // -1 because we skip zero

      return {
        windows: windows,
        windowSize: windowSize
      };
    };

    return {
      constTimeNegate: constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder: function unsafeLadder(elm, n) {
        var p = c.ZERO;
        var d = elm;

        while (n > _0n$2) {
          if (n & _1n$2) p = p.add(d);
          d = d["double"]();
          n >>= _1n$2;
        }

        return p;
      },

      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow: function precomputeWindow(elm, W) {
        var _opts = opts(W),
            windows = _opts.windows,
            windowSize = _opts.windowSize;

        var points = [];
        var p = elm;
        var base = p;

        for (var window = 0; window < windows; window++) {
          base = p;
          points.push(base); // =1, because we skip zero

          for (var i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }

          p = base["double"]();
        }

        return points;
      },

      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF: function wNAF(W, precomputes, n) {
        // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
        // But need to carefully remove other checks before wNAF. ORDER == bits here
        var _opts2 = opts(W),
            windows = _opts2.windows,
            windowSize = _opts2.windowSize;

        var p = c.ZERO;
        var f = c.BASE;
        var mask = BigInt(Math.pow(2, W) - 1); // Create mask with W ones: 0b1111 for W=4 etc.

        var maxNumber = Math.pow(2, W);
        var shiftBy = BigInt(W);

        for (var window = 0; window < windows; window++) {
          var offset = window * windowSize; // Extract W bits.

          var wbits = Number(n & mask); // Shift number by W bits.

          n >>= shiftBy; // If the bits are bigger than max size, we'll split those.
          // +224 => 256 - 32

          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n$2;
          } // This code was first written with assumption that 'f' and 'p' will never be infinity point:
          // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
          // there is negate now: it is possible that negated element from low value
          // would be the same as high element, which will create carry into next window.
          // It's not obvious how this can fail, but still worth investigating later.
          // Check if we're onto Zero point.
          // Add random point inside current window to f.


          var offset1 = offset;
          var offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero

          var cond1 = window % 2 !== 0;
          var cond2 = wbits < 0;

          if (wbits === 0) {
            // The most important part for const-time getPublicKey
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        } // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
        // Even if the variable is still unused, there are some checks which will
        // throw an exception, so compiler needs to prove they won't happen, which is hard.
        // At this point there is a way to F be infinity-point even if p is not,
        // which makes it less const-time: around 1 bigint multiply.


        return {
          p: p,
          f: f
        };
      },
      wNAFCached: function wNAFCached(P, n, transform) {
        var W = pointWindowSizes.get(P) || 1; // Calculate precomputes on a first run, reuse them after

        var comp = pointPrecomputes.get(P);

        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) pointPrecomputes.set(P, transform(comp));
        }

        return this.wNAF(W, comp, n);
      },
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      setWindowSize: function setWindowSize(P, W) {
        validateW(W);
        pointWindowSizes.set(P, W);
        pointPrecomputes["delete"](P);
      }
    };
  }
  /**
   * Pippenger algorithm for multi-scalar multiplication (MSM).
   * MSM is basically (Pa + Qb + Rc + ...).
   * 30x faster vs naive addition on L=4096, 10x faster with precomputes.
   * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.
   * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.
   * @param c Curve Point constructor
   * @param field field over CURVE.N - important that it's not over CURVE.P
   * @param points array of L curve points
   * @param scalars array of L scalars (aka private keys / bigints)
   */


  function pippenger(c, field, points, scalars) {
    // If we split scalars by some window (let's say 8 bits), every chunk will only
    // take 256 buckets even if there are 4096 scalars, also re-uses double.
    // TODO:
    // - https://eprint.iacr.org/2024/750.pdf
    // - https://tches.iacr.org/index.php/TCHES/article/view/10287
    // 0 is accepted in scalars
    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length) throw new Error('arrays of points and scalars must have equal length');
    scalars.forEach(function (s, i) {
      if (!field.isValid(s)) throw new Error("wrong scalar at index ".concat(i));
    });
    points.forEach(function (p, i) {
      if (!(p instanceof c)) throw new Error("wrong point at index ".concat(i));
    });
    var wbits = (0, utils_js_1$3.bitLen)(BigInt(points.length));
    var windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits

    var MASK = (1 << windowSize) - 1;
    var buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array

    var lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;
    var sum = c.ZERO;

    for (var i = lastBits; i >= 0; i -= windowSize) {
      buckets.fill(c.ZERO);

      for (var j = 0; j < scalars.length; j++) {
        var scalar = scalars[j];

        var _wbits = Number(scalar >> BigInt(i) & BigInt(MASK));

        buckets[_wbits] = buckets[_wbits].add(points[j]);
      }

      var resI = c.ZERO; // not using this will do small speed-up, but will lose ct
      // Skip first bucket, because it is zero

      for (var _j2 = buckets.length - 1, sumI = c.ZERO; _j2 > 0; _j2--) {
        sumI = sumI.add(buckets[_j2]);
        resI = resI.add(sumI);
      }

      sum = sum.add(resI);
      if (i !== 0) for (var _j4 = 0; _j4 < windowSize; _j4++) sum = sum["double"]();
    }

    return sum;
  }

  function validateBasic(curve) {
    (0, modular_js_1$3.validateField)(curve.Fp);
    (0, utils_js_1$3.validateObject)(curve, {
      n: 'bigint',
      h: 'bigint',
      Gx: 'field',
      Gy: 'field'
    }, {
      nBitLength: 'isSafeInteger',
      nByteLength: 'isSafeInteger'
    }); // Set defaults

    return Object.freeze(_objectSpread2(_objectSpread2(_objectSpread2({}, (0, modular_js_1$3.nLength)(curve.n, curve.nBitLength)), curve), {
      p: curve.Fp.ORDER
    }));
  }

  Object.defineProperty(edwards, "__esModule", {
    value: true
  });
  edwards.twistedEdwards = twistedEdwards;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²

  var curve_js_1 = curve;
  var modular_js_1$2 = modular;
  var ut = utils;
  var utils_js_1$2 = utils; // Be friendly to bad ECMAScript parsers by not using bigint literals
  // prettier-ignore

  var _0n$1 = BigInt(0),
      _1n$1 = BigInt(1),
      _2n = BigInt(2),
      _8n = BigInt(8); // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:


  var VERIFY_DEFAULT = {
    zip215: true
  };

  function validateOpts$1(curve) {
    var opts = (0, curve_js_1.validateBasic)(curve);
    ut.validateObject(curve, {
      hash: 'function',
      a: 'bigint',
      d: 'bigint',
      randomBytes: 'function'
    }, {
      adjustScalarBytes: 'function',
      domain: 'function',
      uvRatio: 'function',
      mapToCurve: 'function'
    }); // Set defaults

    return Object.freeze(_objectSpread2({}, opts));
  }
  /**
   * Creates Twisted Edwards curve with EdDSA signatures.
   * @example
   * import { Field } from '@noble/curves/abstract/modular';
   * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h
   * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })
   */


  function twistedEdwards(curveDef) {
    var CURVE = validateOpts$1(curveDef);
    var Fp = CURVE.Fp,
        CURVE_ORDER = CURVE.n,
        prehash = CURVE.prehash,
        cHash = CURVE.hash,
        randomBytes = CURVE.randomBytes,
        nByteLength = CURVE.nByteLength,
        cofactor = CURVE.h;

    var MASK = _2n << BigInt(nByteLength * 8) - _1n$1;

    var modP = Fp.create; // Function overrides

    var Fn = (0, modular_js_1$2.Field)(CURVE.n, CURVE.nBitLength); // sqrt(u/v)

    var uvRatio = CURVE.uvRatio || function (u, v) {
      try {
        return {
          isValid: true,
          value: Fp.sqrt(u * Fp.inv(v))
        };
      } catch (e) {
        return {
          isValid: false,
          value: _0n$1
        };
      }
    };

    var adjustScalarBytes = CURVE.adjustScalarBytes || function (bytes) {
      return bytes;
    }; // NOOP


    var domain = CURVE.domain || function (data, ctx, phflag) {
      (0, utils_js_1$2.abool)('phflag', phflag);
      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');
      return data;
    }; // NOOP
    // 0 <= n < MASK
    // Coordinates larger than Fp.ORDER are allowed for zip215


    function aCoordinate(title, n) {
      ut.aInRange('coordinate ' + title, n, _0n$1, MASK);
    }

    function assertPoint(other) {
      if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');
    } // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.


    var toAffineMemo = (0, utils_js_1$2.memoized)(function (p, iz) {
      var x = p.ex,
          y = p.ey,
          z = p.ez;
      var is0 = p.is0();
      if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily

      var ax = modP(x * iz);
      var ay = modP(y * iz);
      var zz = modP(z * iz);
      if (is0) return {
        x: _0n$1,
        y: _1n$1
      };
      if (zz !== _1n$1) throw new Error('invZ was invalid');
      return {
        x: ax,
        y: ay
      };
    });
    var assertValidMemo = (0, utils_js_1$2.memoized)(function (p) {
      var a = CURVE.a,
          d = CURVE.d;
      if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?
      // Equation in affine coordinates: ax² + y² = 1 + dx²y²
      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²

      var X = p.ex,
          Y = p.ey,
          Z = p.ez,
          T = p.et;
      var X2 = modP(X * X); // X²

      var Y2 = modP(Y * Y); // Y²

      var Z2 = modP(Z * Z); // Z²

      var Z4 = modP(Z2 * Z2); // Z⁴

      var aX2 = modP(X2 * a); // aX²

      var left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²

      var right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²

      if (left !== right) throw new Error('bad point: equation left != right (1)'); // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T

      var XY = modP(X * Y);
      var ZT = modP(Z * T);
      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');
      return true;
    }); // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates

    var Point = /*#__PURE__*/function () {
      function Point(ex, ey, ez, et) {
        _classCallCheck(this, Point);

        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et;
        aCoordinate('x', ex);
        aCoordinate('y', ey);
        aCoordinate('z', ez);
        aCoordinate('t', et);
        Object.freeze(this);
      }

      _createClass(Point, [{
        key: "x",
        get: function get() {
          return this.toAffine().x;
        }
      }, {
        key: "y",
        get: function get() {
          return this.toAffine().y;
        }
      }, {
        key: "_setWindowSize",
        value: // "Private method", don't use it directly
        function _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        } // Not required for fromHex(), which always creates valid points.
        // Could be useful for fromAffine().

      }, {
        key: "assertValidity",
        value: function assertValidity() {
          assertValidMemo(this);
        } // Compare one point to another.

      }, {
        key: "equals",
        value: function equals(other) {
          assertPoint(other);
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez;
          var X2 = other.ex,
              Y2 = other.ey,
              Z2 = other.ez;
          var X1Z2 = modP(X1 * Z2);
          var X2Z1 = modP(X2 * Z1);
          var Y1Z2 = modP(Y1 * Z2);
          var Y2Z1 = modP(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
      }, {
        key: "is0",
        value: function is0() {
          return this.equals(Point.ZERO);
        }
      }, {
        key: "negate",
        value: function negate() {
          // Flips point sign to a negative one (-x, y in affine coords)
          return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));
        } // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.

      }, {
        key: "double",
        value: function double() {
          var a = CURVE.a;
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez;
          var A = modP(X1 * X1); // A = X12

          var B = modP(Y1 * Y1); // B = Y12

          var C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12

          var D = modP(a * A); // D = a*A

          var x1y1 = X1 + Y1;
          var E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B

          var G = D + B; // G = D+B

          var F = G - C; // F = G-C

          var H = D - B; // H = D-B

          var X3 = modP(E * F); // X3 = E*F

          var Y3 = modP(G * H); // Y3 = G*H

          var T3 = modP(E * H); // T3 = E*H

          var Z3 = modP(F * G); // Z3 = F*G

          return new Point(X3, Y3, Z3, T3);
        } // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.

      }, {
        key: "add",
        value: function add(other) {
          assertPoint(other);
          var a = CURVE.a,
              d = CURVE.d;
          var X1 = this.ex,
              Y1 = this.ey,
              Z1 = this.ez,
              T1 = this.et;
          var X2 = other.ex,
              Y2 = other.ey,
              Z2 = other.ez,
              T2 = other.et; // Faster algo for adding 2 Extended Points when curve's a=-1.
          // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
          // Cost: 8M + 8add + 2*2.
          // Note: It does not check whether the `other` point is valid.

          if (a === BigInt(-1)) {
            var _A = modP((Y1 - X1) * (Y2 + X2));

            var _B = modP((Y1 + X1) * (Y2 - X2));

            var _F = modP(_B - _A);

            if (_F === _0n$1) return this["double"](); // Same point. Tests say it doesn't affect timing

            var _C = modP(Z1 * _2n * T2);

            var _D = modP(T1 * _2n * Z2);

            var _E = _D + _C;

            var _G = _B + _A;

            var _H = _D - _C;

            var _X = modP(_E * _F);

            var _Y = modP(_G * _H);

            var _T = modP(_E * _H);

            var _Z = modP(_F * _G);

            return new Point(_X, _Y, _Z, _T);
          }

          var A = modP(X1 * X2); // A = X1*X2

          var B = modP(Y1 * Y2); // B = Y1*Y2

          var C = modP(T1 * d * T2); // C = T1*d*T2

          var D = modP(Z1 * Z2); // D = Z1*Z2

          var E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B

          var F = D - C; // F = D-C

          var G = D + C; // G = D+C

          var H = modP(B - a * A); // H = B-a*A

          var X3 = modP(E * F); // X3 = E*F

          var Y3 = modP(G * H); // Y3 = G*H

          var T3 = modP(E * H); // T3 = E*H

          var Z3 = modP(F * G); // Z3 = F*G

          return new Point(X3, Y3, Z3, T3);
        }
      }, {
        key: "subtract",
        value: function subtract(other) {
          return this.add(other.negate());
        }
      }, {
        key: "wNAF",
        value: function wNAF(n) {
          return wnaf.wNAFCached(this, n, Point.normalizeZ);
        } // Constant-time multiplication.

      }, {
        key: "multiply",
        value: function multiply(scalar) {
          var n = scalar;
          ut.aInRange('scalar', n, _1n$1, CURVE_ORDER); // 1 <= scalar < L

          var _this$wNAF = this.wNAF(n),
              p = _this$wNAF.p,
              f = _this$wNAF.f;

          return Point.normalizeZ([p, f])[0];
        } // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.

      }, {
        key: "multiplyUnsafe",
        value: function multiplyUnsafe(scalar) {
          var n = scalar;
          ut.aInRange('scalar', n, _0n$1, CURVE_ORDER); // 0 <= scalar < L

          if (n === _0n$1) return I;
          if (this.equals(I) || n === _1n$1) return this;
          if (this.equals(G)) return this.wNAF(n).p;
          return wnaf.unsafeLadder(this, n);
        } // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.

      }, {
        key: "isSmallOrder",
        value: function isSmallOrder() {
          return this.multiplyUnsafe(cofactor).is0();
        } // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.

      }, {
        key: "isTorsionFree",
        value: function isTorsionFree() {
          return wnaf.unsafeLadder(this, CURVE_ORDER).is0();
        } // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.

      }, {
        key: "toAffine",
        value: function toAffine(iz) {
          return toAffineMemo(this, iz);
        }
      }, {
        key: "clearCofactor",
        value: function clearCofactor() {
          var cofactor = CURVE.h;
          if (cofactor === _1n$1) return this;
          return this.multiplyUnsafe(cofactor);
        } // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.

      }, {
        key: "toRawBytes",
        value: function toRawBytes() {
          var _this$toAffine = this.toAffine(),
              x = _this$toAffine.x,
              y = _this$toAffine.y;

          var bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)

          bytes[bytes.length - 1] |= x & _1n$1 ? 0x80 : 0; // when compressing, it's enough to store y

          return bytes; // and use the last byte to encode sign of x
        }
      }, {
        key: "toHex",
        value: function toHex() {
          return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.
        }
      }], [{
        key: "fromAffine",
        value: function fromAffine(p) {
          if (p instanceof Point) throw new Error('extended point not allowed');

          var _ref = p || {},
              x = _ref.x,
              y = _ref.y;

          aCoordinate('x', x);
          aCoordinate('y', y);
          return new Point(x, y, _1n$1, modP(x * y));
        }
      }, {
        key: "normalizeZ",
        value: function normalizeZ(points) {
          var toInv = Fp.invertBatch(points.map(function (p) {
            return p.ez;
          }));
          return points.map(function (p, i) {
            return p.toAffine(toInv[i]);
          }).map(Point.fromAffine);
        } // Multiscalar Multiplication

      }, {
        key: "msm",
        value: function msm(points, scalars) {
          return (0, curve_js_1.pippenger)(Point, Fn, points, scalars);
        }
      }, {
        key: "fromHex",
        value: function fromHex(hex) {
          var zip215 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var d = CURVE.d,
              a = CURVE.a;
          var len = Fp.BYTES;
          hex = (0, utils_js_1$2.ensureBytes)('pointHex', hex, len); // copy hex to a new array

          (0, utils_js_1$2.abool)('zip215', zip215);
          var normed = hex.slice(); // copy again, we'll manipulate it

          var lastByte = hex[len - 1]; // select last byte

          normed[len - 1] = lastByte & ~0x80; // clear last bit

          var y = ut.bytesToNumberLE(normed); // RFC8032 prohibits >= p, but ZIP215 doesn't
          // zip215=true:  0 <= y < MASK (2^256 for ed25519)
          // zip215=false: 0 <= y < P (2^255-19 for ed25519)

          var max = zip215 ? MASK : Fp.ORDER;
          ut.aInRange('pointHex.y', y, _0n$1, max); // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
          // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)

          var y2 = modP(y * y); // denominator is always non-0 mod p.

          var u = modP(y2 - _1n$1); // u = y² - 1

          var v = modP(d * y2 - a); // v = d y² + 1.

          var _uvRatio = uvRatio(u, v),
              isValid = _uvRatio.isValid,
              x = _uvRatio.value; // √(u/v)


          if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');
          var isXOdd = (x & _1n$1) === _1n$1; // There are 2 square roots. Use x_0 bit to select proper

          var isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit

          if (!zip215 && x === _0n$1 && isLastByteOdd) // if x=0 and x_0 = 1, fail
            throw new Error('Point.fromHex: x=0 and x_0=1');
          if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x

          return Point.fromAffine({
            x: x,
            y: y
          });
        }
      }, {
        key: "fromPrivateKey",
        value: function fromPrivateKey(privKey) {
          return getExtendedPublicKey(privKey).point;
        }
      }]);

      return Point;
    }();

    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n$1, modP(CURVE.Gx * CURVE.Gy));
    Point.ZERO = new Point(_0n$1, _1n$1, _1n$1, _0n$1); // 0, 1, 1, 0

    var G = Point.BASE,
        I = Point.ZERO;
    var wnaf = (0, curve_js_1.wNAF)(Point, nByteLength * 8);

    function modN(a) {
      return (0, modular_js_1$2.mod)(a, CURVE_ORDER);
    } // Little-endian SHA512 with modulo n


    function modN_LE(hash) {
      return modN(ut.bytesToNumberLE(hash));
    }
    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */


    function getExtendedPublicKey(key) {
      var len = nByteLength;
      key = (0, utils_js_1$2.ensureBytes)('private key', key, len); // Hash private key with curve's hash function to produce uniformingly random input
      // Check byte lengths: ensure(64, h(ensure(32, key)))

      var hashed = (0, utils_js_1$2.ensureBytes)('hashed private key', cHash(key), 2 * len);
      var head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE

      var prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)

      var scalar = modN_LE(head); // The actual private scalar

      var point = G.multiply(scalar); // Point on Edwards curve aka public key

      var pointBytes = point.toRawBytes(); // Uint8Array representation

      return {
        head: head,
        prefix: prefix,
        scalar: scalar,
        point: point,
        pointBytes: pointBytes
      };
    } // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared


    function getPublicKey(privKey) {
      return getExtendedPublicKey(privKey).pointBytes;
    } // int('LE', SHA512(dom2(F, C) || msgs)) mod N


    function hashDomainToScalar() {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();

      for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        msgs[_key - 1] = arguments[_key];
      }

      var msg = ut.concatBytes.apply(ut, msgs);
      return modN_LE(cHash(domain(msg, (0, utils_js_1$2.ensureBytes)('context', context), !!prehash)));
    }
    /** Signs message with privateKey. RFC8032 5.1.6 */


    function sign(msg, privKey) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      msg = (0, utils_js_1$2.ensureBytes)('message', msg);
      if (prehash) msg = prehash(msg); // for ed25519ph etc.

      var _getExtendedPublicKey = getExtendedPublicKey(privKey),
          prefix = _getExtendedPublicKey.prefix,
          scalar = _getExtendedPublicKey.scalar,
          pointBytes = _getExtendedPublicKey.pointBytes;

      var r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)

      var R = G.multiply(r).toRawBytes(); // R = rG

      var k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)

      var s = modN(r + k * scalar); // S = (r + k * s) mod L

      ut.aInRange('signature.s', s, _0n$1, CURVE_ORDER); // 0 <= s < l

      var res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));
      return (0, utils_js_1$2.ensureBytes)('result', res, nByteLength * 2); // 64-byte signature
    }

    var verifyOpts = VERIFY_DEFAULT;

    function verify(sig, msg, publicKey) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : verifyOpts;
      var context = options.context,
          zip215 = options.zip215;
      var len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.

      sig = (0, utils_js_1$2.ensureBytes)('signature', sig, 2 * len); // An extended group equation is checked.

      msg = (0, utils_js_1$2.ensureBytes)('message', msg);
      if (zip215 !== undefined) (0, utils_js_1$2.abool)('zip215', zip215);
      if (prehash) msg = prehash(msg); // for ed25519ph, etc

      var s = ut.bytesToNumberLE(sig.slice(len, 2 * len)); // zip215: true is good for consensus-critical apps and allows points < 2^256
      // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p

      var A, R, SB;

      try {
        A = Point.fromHex(publicKey, zip215);
        R = Point.fromHex(sig.slice(0, len), zip215);
        SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside
      } catch (error) {
        return false;
      }

      if (!zip215 && A.isSmallOrder()) return false;
      var k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);
      var RkA = R.add(A.multiplyUnsafe(k)); // [8][S]B = [8]R + [8][k]A'

      return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);
    }

    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.


    var utils = {
      getExtendedPublicKey: getExtendedPublicKey,
      // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
      randomPrivateKey: function randomPrivateKey() {
        return randomBytes(Fp.BYTES);
      },

      /**
       * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
       * values. This slows down first getPublicKey() by milliseconds (see Speed section),
       * but allows to speed-up subsequent getPublicKey() calls up to 20x.
       * @param windowSize 2, 4, 8, 16
       */
      precompute: function precompute() {
        var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
        var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;

        point._setWindowSize(windowSize);

        point.multiply(BigInt(3));
        return point;
      }
    };
    return {
      CURVE: CURVE,
      getPublicKey: getPublicKey,
      sign: sign,
      verify: verify,
      ExtendedPoint: Point,
      utils: utils
    };
  }

  var hashToCurve = {};

  Object.defineProperty(hashToCurve, "__esModule", {
    value: true
  });
  hashToCurve.expand_message_xmd = expand_message_xmd;
  hashToCurve.expand_message_xof = expand_message_xof;
  hashToCurve.hash_to_field = hash_to_field;
  hashToCurve.isogenyMap = isogenyMap;
  hashToCurve.createHasher = createHasher;
  var modular_js_1$1 = modular;
  var utils_js_1$1 = utils; // Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.

  var os2ip = utils_js_1$1.bytesToNumberBE; // Integer to Octet Stream (numberToBytesBE)

  function i2osp(value, length) {
    anum(value);
    anum(length);

    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error("bad I2OSP call: value=".concat(value, " length=").concat(length));
    }

    var res = Array.from({
      length: length
    }).fill(0);

    for (var i = length - 1; i >= 0; i--) {
      res[i] = value & 0xff;
      value >>>= 8;
    }

    return new Uint8Array(res);
  }

  function strxor(a, b) {
    var arr = new Uint8Array(a.length);

    for (var i = 0; i < a.length; i++) {
      arr[i] = a[i] ^ b[i];
    }

    return arr;
  }

  function anum(item) {
    if (!Number.isSafeInteger(item)) throw new Error('number expected');
  } // Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1


  function expand_message_xmd(msg, DST, lenInBytes, H) {
    (0, utils_js_1$1.abytes)(msg);
    (0, utils_js_1$1.abytes)(DST);
    anum(lenInBytes); // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3

    if (DST.length > 255) DST = H((0, utils_js_1$1.concatBytes)((0, utils_js_1$1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));
    var b_in_bytes = H.outputLen,
        r_in_bytes = H.blockLen;
    var ell = Math.ceil(lenInBytes / b_in_bytes);
    if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');
    var DST_prime = (0, utils_js_1$1.concatBytes)(DST, i2osp(DST.length, 1));
    var Z_pad = i2osp(0, r_in_bytes);
    var l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str

    var b = new Array(ell);
    var b_0 = H((0, utils_js_1$1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1$1.concatBytes)(b_0, i2osp(1, 1), DST_prime));

    for (var i = 1; i <= ell; i++) {
      var args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
      b[i] = H((utils_js_1$1.concatBytes).apply(void 0, args));
    }

    var pseudo_random_bytes = (utils_js_1$1.concatBytes).apply(void 0, b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  } // Produces a uniformly random byte string using an extendable-output function (XOF) H.
  // 1. The collision resistance of H MUST be at least k bits.
  // 2. H MUST be an XOF that has been proved indifferentiable from
  //    a random oracle under a reasonable cryptographic assumption.
  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2


  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    (0, utils_js_1$1.abytes)(msg);
    (0, utils_js_1$1.abytes)(DST);
    anum(lenInBytes); // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));

    if (DST.length > 255) {
      var dkLen = Math.ceil(2 * k / 8);
      DST = H.create({
        dkLen: dkLen
      }).update((0, utils_js_1$1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();
    }

    if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');
    return H.create({
      dkLen: lenInBytes
    }).update(msg).update(i2osp(lenInBytes, 2)) // 2. DST_prime = DST || I2OSP(len(DST), 1)
    .update(DST).update(i2osp(DST.length, 1)).digest();
  }
  /**
   * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
   * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
   * @param msg a byte string containing the message to hash
   * @param count the number of elements of F to output
   * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
   * @returns [u_0, ..., u_(count - 1)], a list of field elements.
   */


  function hash_to_field(msg, count, options) {
    (0, utils_js_1$1.validateObject)(options, {
      DST: 'stringOrUint8Array',
      p: 'bigint',
      m: 'isSafeInteger',
      k: 'isSafeInteger',
      hash: 'hash'
    });
    var p = options.p,
        k = options.k,
        m = options.m,
        hash = options.hash,
        expand = options.expand,
        _DST = options.DST;
    (0, utils_js_1$1.abytes)(msg);
    anum(count);
    var DST = typeof _DST === 'string' ? (0, utils_js_1$1.utf8ToBytes)(_DST) : _DST;
    var log2p = p.toString(2).length;
    var L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above

    var len_in_bytes = count * m * L;
    var prb; // pseudo_random_bytes

    if (expand === 'xmd') {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
    } else if (expand === 'xof') {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
    } else if (expand === '_internal_pass') {
      // for internal tests only
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }

    var u = new Array(count);

    for (var i = 0; i < count; i++) {
      var e = new Array(m);

      for (var j = 0; j < m; j++) {
        var elm_offset = L * (j + i * m);
        var tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = (0, modular_js_1$1.mod)(os2ip(tv), p);
      }

      u[i] = e;
    }

    return u;
  }

  function isogenyMap(field, map) {
    // Make same order as in spec
    var COEFF = map.map(function (i) {
      return Array.from(i).reverse();
    });
    return function (x, y) {
      var _COEFF$map = COEFF.map(function (val) {
        return val.reduce(function (acc, i) {
          return field.add(field.mul(acc, x), i);
        });
      }),
          _COEFF$map2 = _slicedToArray(_COEFF$map, 4),
          xNum = _COEFF$map2[0],
          xDen = _COEFF$map2[1],
          yNum = _COEFF$map2[2],
          yDen = _COEFF$map2[3];

      x = field.div(xNum, xDen); // xNum / xDen

      y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)

      return {
        x: x,
        y: y
      };
    };
  }

  function createHasher(Point, _mapToCurve, def) {
    if (typeof _mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');
    return {
      // Encodes byte string to elliptic curve.
      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      hashToCurve: function hashToCurve(msg, options) {
        var u = hash_to_field(msg, 2, _objectSpread2(_objectSpread2({}, def), {}, {
          DST: def.DST
        }, options));
        var u0 = Point.fromAffine(_mapToCurve(u[0]));
        var u1 = Point.fromAffine(_mapToCurve(u[1]));
        var P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Encodes byte string to elliptic curve.
      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      encodeToCurve: function encodeToCurve(msg, options) {
        var u = hash_to_field(msg, 1, _objectSpread2(_objectSpread2({}, def), {}, {
          DST: def.encodeDST
        }, options));
        var P = Point.fromAffine(_mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Same as encodeToCurve, but without hash
      mapToCurve: function mapToCurve(scalars) {
        if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');

        var _iterator = _createForOfIteratorHelper(scalars),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var i = _step.value;
            if (typeof i !== 'bigint') throw new Error("mapToCurve: expected array of bigints, got ".concat(i, " in array"));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var P = Point.fromAffine(_mapToCurve(scalars)).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }

  var montgomery$1 = {};

  Object.defineProperty(montgomery$1, "__esModule", {
    value: true
  });
  montgomery$1.montgomery = montgomery;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */

  var modular_js_1 = modular;
  var utils_js_1 = utils;

  var _0n = BigInt(0);

  var _1n = BigInt(1);

  function validateOpts(curve) {
    (0, utils_js_1.validateObject)(curve, {
      a: 'bigint'
    }, {
      montgomeryBits: 'isSafeInteger',
      nByteLength: 'isSafeInteger',
      adjustScalarBytes: 'function',
      domain: 'function',
      powPminus2: 'function',
      Gu: 'bigint'
    }); // Set defaults

    return Object.freeze(_objectSpread2({}, curve));
  } // NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)
  // Uses only one coordinate instead of two


  function montgomery(curveDef) {
    var CURVE = validateOpts(curveDef);
    var P = CURVE.P;

    var modP = function modP(n) {
      return (0, modular_js_1.mod)(n, P);
    };

    var montgomeryBits = CURVE.montgomeryBits;
    var montgomeryBytes = Math.ceil(montgomeryBits / 8);
    var fieldLen = CURVE.nByteLength;

    var adjustScalarBytes = CURVE.adjustScalarBytes || function (bytes) {
      return bytes;
    };

    var powPminus2 = CURVE.powPminus2 || function (x) {
      return (0, modular_js_1.pow)(x, P - BigInt(2), P);
    }; // cswap from RFC7748. But it is not from RFC7748!

    /*
      cswap(swap, x_2, x_3):
           dummy = mask(swap) AND (x_2 XOR x_3)
           x_2 = x_2 XOR dummy
           x_3 = x_3 XOR dummy
           Return (x_2, x_3)
    Where mask(swap) is the all-1 or all-0 word of the same length as x_2
     and x_3, computed, e.g., as mask(swap) = 0 - swap.
    */


    function cswap(swap, x_2, x_3) {
      var dummy = modP(swap * (x_2 - x_3));
      x_2 = modP(x_2 - dummy);
      x_3 = modP(x_3 + dummy);
      return [x_2, x_3];
    } // x25519 from 4
    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519


    var a24 = (CURVE.a - BigInt(2)) / BigInt(4);
    /**
     *
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */

    function montgomeryLadder(u, scalar) {
      (0, utils_js_1.aInRange)('u', u, _0n, P);
      (0, utils_js_1.aInRange)('scalar', scalar, _0n, P); // Section 5: Implementations MUST accept non-canonical values and process them as
      // if they had been reduced modulo the field prime.

      var k = scalar;
      var x_1 = u;
      var x_2 = _1n;
      var z_2 = _0n;
      var x_3 = u;
      var z_3 = _1n;
      var swap = _0n;
      var sw;

      for (var t = BigInt(montgomeryBits - 1); t >= _0n; t--) {
        var k_t = k >> t & _1n;
        swap ^= k_t;
        sw = cswap(swap, x_2, x_3);
        x_2 = sw[0];
        x_3 = sw[1];
        sw = cswap(swap, z_2, z_3);
        z_2 = sw[0];
        z_3 = sw[1];
        swap = k_t;
        var A = x_2 + z_2;
        var AA = modP(A * A);
        var B = x_2 - z_2;
        var BB = modP(B * B);
        var E = AA - BB;
        var C = x_3 + z_3;
        var D = x_3 - z_3;
        var DA = modP(D * A);
        var CB = modP(C * B);
        var dacb = DA + CB;
        var da_cb = DA - CB;
        x_3 = modP(dacb * dacb);
        z_3 = modP(x_1 * modP(da_cb * da_cb));
        x_2 = modP(AA * BB);
        z_2 = modP(E * (AA + modP(a24 * E)));
      } // (x_2, x_3) = cswap(swap, x_2, x_3)


      sw = cswap(swap, x_2, x_3);
      x_2 = sw[0];
      x_3 = sw[1]; // (z_2, z_3) = cswap(swap, z_2, z_3)

      sw = cswap(swap, z_2, z_3);
      z_2 = sw[0];
      z_3 = sw[1]; // z_2^(p - 2)

      var z2 = powPminus2(z_2); // Return x_2 * (z_2^(p - 2))

      return modP(x_2 * z2);
    }

    function encodeUCoordinate(u) {
      return (0, utils_js_1.numberToBytesLE)(modP(u), montgomeryBytes);
    }

    function decodeUCoordinate(uEnc) {
      // Section 5: When receiving such an array, implementations of X25519
      // MUST mask the most significant bit in the final byte.
      var u = (0, utils_js_1.ensureBytes)('u coordinate', uEnc, montgomeryBytes);
      if (fieldLen === 32) u[31] &= 127; // 0b0111_1111

      return (0, utils_js_1.bytesToNumberLE)(u);
    }

    function decodeScalar(n) {
      var bytes = (0, utils_js_1.ensureBytes)('scalar', n);
      var len = bytes.length;
      if (len !== montgomeryBytes && len !== fieldLen) throw new Error("Expected ".concat(montgomeryBytes, " or ").concat(fieldLen, " bytes, got ").concat(len));
      return (0, utils_js_1.bytesToNumberLE)(adjustScalarBytes(bytes));
    }

    function scalarMult(scalar, u) {
      var pointU = decodeUCoordinate(u);

      var _scalar = decodeScalar(scalar);

      var pu = montgomeryLadder(pointU, _scalar); // The result was not contributory
      // https://cr.yp.to/ecdh.html#validate

      if (pu === _0n) throw new Error('Invalid private or public key received');
      return encodeUCoordinate(pu);
    } // Computes public key from private. By doing scalar multiplication of base point.


    var GuBytes = encodeUCoordinate(CURVE.Gu);

    function scalarMultBase(scalar) {
      return scalarMult(scalar, GuBytes);
    }

    return {
      scalarMult: scalarMult,
      scalarMultBase: scalarMultBase,
      getSharedSecret: function getSharedSecret(privateKey, publicKey) {
        return scalarMult(privateKey, publicKey);
      },
      getPublicKey: function getPublicKey(privateKey) {
        return scalarMultBase(privateKey);
      },
      utils: {
        randomPrivateKey: function randomPrivateKey() {
          return CURVE.randomBytes(CURVE.nByteLength);
        }
      },
      GuBytes: GuBytes
    };
  }

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hash_to_ristretto255 = exports.hashToRistretto255 = exports.RistrettoPoint = exports.encodeToCurve = exports.hashToCurve = exports.edwardsToMontgomery = exports.x25519 = exports.ed25519ph = exports.ed25519ctx = exports.ed25519 = exports.ED25519_TORSION_SUBGROUP = void 0;
    exports.edwardsToMontgomeryPub = edwardsToMontgomeryPub;
    exports.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */

    var sha512_1 = sha512;
    var utils_1 = utils$1;
    var edwards_js_1 = edwards;
    var hash_to_curve_js_1 = hashToCurve;
    var modular_js_1 = modular;
    var montgomery_js_1 = montgomery$1;
    var utils_js_1 = utils;
    /**
     * ed25519 Twisted Edwards curve with following addons:
     * - X25519 ECDH
     * - Ristretto cofactor elimination
     * - Elligator hash-to-group / point indistinguishability
     */

    var ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'); // √(-1) aka √(a) aka 2^((p-1)/4)

    var ED25519_SQRT_M1 = /* @__PURE__ */BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752'); // prettier-ignore

    var _0n = BigInt(0),
        _1n = BigInt(1),
        _2n = BigInt(2),
        _3n = BigInt(3); // prettier-ignore


    var _5n = BigInt(5),
        _8n = BigInt(8);

    function ed25519_pow_2_252_3(x) {
      // prettier-ignore
      var _10n = BigInt(10),
          _20n = BigInt(20),
          _40n = BigInt(40),
          _80n = BigInt(80);

      var P = ED25519_P;
      var x2 = x * x % P;
      var b2 = x2 * x % P; // x^3, 11

      var b4 = (0, modular_js_1.pow2)(b2, _2n, P) * b2 % P; // x^15, 1111

      var b5 = (0, modular_js_1.pow2)(b4, _1n, P) * x % P; // x^31

      var b10 = (0, modular_js_1.pow2)(b5, _5n, P) * b5 % P;
      var b20 = (0, modular_js_1.pow2)(b10, _10n, P) * b10 % P;
      var b40 = (0, modular_js_1.pow2)(b20, _20n, P) * b20 % P;
      var b80 = (0, modular_js_1.pow2)(b40, _40n, P) * b40 % P;
      var b160 = (0, modular_js_1.pow2)(b80, _80n, P) * b80 % P;
      var b240 = (0, modular_js_1.pow2)(b160, _80n, P) * b80 % P;
      var b250 = (0, modular_js_1.pow2)(b240, _10n, P) * b10 % P;
      var pow_p_5_8 = (0, modular_js_1.pow2)(b250, _2n, P) * x % P; // ^ To pow to (p+3)/8, multiply it by x.

      return {
        pow_p_5_8: pow_p_5_8,
        b2: b2
      };
    }

    function adjustScalarBytes(bytes) {
      // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
      // set the three least significant bits of the first byte
      bytes[0] &= 248; // 0b1111_1000
      // and the most significant bit of the last to zero,

      bytes[31] &= 127; // 0b0111_1111
      // set the second most significant bit of the last byte to 1

      bytes[31] |= 64; // 0b0100_0000

      return bytes;
    } // sqrt(u/v)


    function uvRatio(u, v) {
      var P = ED25519_P;
      var v3 = (0, modular_js_1.mod)(v * v * v, P); // v³

      var v7 = (0, modular_js_1.mod)(v3 * v3 * v, P); // v⁷
      // (p+3)/8 and (p-5)/8

      var pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
      var x = (0, modular_js_1.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8

      var vx2 = (0, modular_js_1.mod)(v * x * x, P); // vx²

      var root1 = x; // First root candidate

      var root2 = (0, modular_js_1.mod)(x * ED25519_SQRT_M1, P); // Second root candidate

      var useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root

      var useRoot2 = vx2 === (0, modular_js_1.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)

      var noRoot = vx2 === (0, modular_js_1.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)

      if (useRoot1) x = root1;
      if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time

      if ((0, modular_js_1.isNegativeLE)(x, P)) x = (0, modular_js_1.mod)(-x, P);
      return {
        isValid: useRoot1 || useRoot2,
        value: x
      };
    } // Just in case


    exports.ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];

    var Fp = /* @__PURE__ */function () {
      return (0, modular_js_1.Field)(ED25519_P, undefined, true);
    }();

    var ed25519Defaults = /* @__PURE__ */function () {
      return {
        // Param: a
        a: BigInt(-1),
        // Fp.create(-1) is proper; our way still works and is faster
        // d is equal to -121665/121666 over finite field.
        // Negative number is P - number, and division is invert(number, P)
        d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
        // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n
        Fp: Fp,
        // Subgroup order: how many points curve has
        // 2n**252n + 27742317777372353535851937790883648493n;
        n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),
        // Cofactor
        h: _8n,
        // Base point (x, y) aka generator point
        Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
        Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
        hash: sha512_1.sha512,
        randomBytes: utils_1.randomBytes,
        adjustScalarBytes: adjustScalarBytes,
        // dom2
        // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
        // Constant-time, u/√v
        uvRatio: uvRatio
      };
    }();
    /**
     * ed25519 curve with EdDSA signatures.
     */


    exports.ed25519 = function () {
      return (0, edwards_js_1.twistedEdwards)(ed25519Defaults);
    }();

    function ed25519_domain(data, ctx, phflag) {
      if (ctx.length > 255) throw new Error('Context is too big');
      return (0, utils_1.concatBytes)((0, utils_1.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
    }

    exports.ed25519ctx = function () {
      return (0, edwards_js_1.twistedEdwards)(_objectSpread2(_objectSpread2({}, ed25519Defaults), {}, {
        domain: ed25519_domain
      }));
    }();

    exports.ed25519ph = function () {
      return (0, edwards_js_1.twistedEdwards)(Object.assign({}, ed25519Defaults, {
        domain: ed25519_domain,
        prehash: sha512_1.sha512
      }));
    }();

    exports.x25519 = function () {
      return (0, montgomery_js_1.montgomery)({
        P: ED25519_P,
        a: BigInt(486662),
        montgomeryBits: 255,
        // n is 253 bits
        nByteLength: 32,
        Gu: BigInt(9),
        powPminus2: function powPminus2(x) {
          var P = ED25519_P; // x^(p-2) aka x^(2^255-21)

          var _ed25519_pow_2_252_ = ed25519_pow_2_252_3(x),
              pow_p_5_8 = _ed25519_pow_2_252_.pow_p_5_8,
              b2 = _ed25519_pow_2_252_.b2;

          return (0, modular_js_1.mod)((0, modular_js_1.pow2)(pow_p_5_8, _3n, P) * b2, P);
        },
        adjustScalarBytes: adjustScalarBytes,
        randomBytes: utils_1.randomBytes
      });
    }();
    /**
     * Converts ed25519 public key to x25519 public key. Uses formula:
     * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
     * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
     * @example
     *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());
     *   const aPriv = x25519.utils.randomPrivateKey();
     *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))
     */


    function edwardsToMontgomeryPub(edwardsPub) {
      var _exports$ed25519$Exte = exports.ed25519.ExtendedPoint.fromHex(edwardsPub),
          y = _exports$ed25519$Exte.y;

      var _1n = BigInt(1);

      return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));
    }

    exports.edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated

    /**
     * Converts ed25519 secret key to x25519 secret key.
     * @example
     *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());
     *   const aPriv = ed25519.utils.randomPrivateKey();
     *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)
     */

    function edwardsToMontgomeryPriv(edwardsPriv) {
      var hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));
      return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);
    } // Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)
    // NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since
    // SageMath returns different root first and everything falls apart


    var ELL2_C1 = /* @__PURE__ */function () {
      return (Fp.ORDER + _3n) / _8n;
    }(); // 1. c1 = (q + 3) / 8       # Integer arithmetic


    var ELL2_C2 = /* @__PURE__ */function () {
      return Fp.pow(_2n, ELL2_C1);
    }(); // 2. c2 = 2^c1


    var ELL2_C3 = /* @__PURE__ */function () {
      return Fp.sqrt(Fp.neg(Fp.ONE));
    }(); // 3. c3 = sqrt(-1)
    // prettier-ignore


    function map_to_curve_elligator2_curve25519(u) {
      var ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic

      var ELL2_J = BigInt(486662);
      var tv1 = Fp.sqr(u); //  1.  tv1 = u^2

      tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1

      var xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not

      var x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)

      var tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2

      var gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3

      var gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd

      gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd

      gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2

      gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2

      var tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2

      tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4

      tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3

      tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3

      tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7

      var y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)

      y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)

      var y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3

      tv2 = Fp.sqr(y11); //  19. tv2 = y11^2

      tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd

      var e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1

      var y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt

      var x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd

      var y21 = Fp.mul(y11, u); //  24. y21 = y11 * u

      y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2

      var y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3

      var gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)

      tv2 = Fp.sqr(y21); //  28. tv2 = y21^2

      tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd

      var e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2

      var y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt

      tv2 = Fp.sqr(y1); //  32. tv2 = y1^2

      tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd

      var e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1

      var xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2

      var y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2

      var e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y

      y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)

      return {
        xMn: xn,
        xMd: xd,
        yMn: y,
        yMd: _1n
      }; //  39. return (xn, xd, y, 1)
    }

    var ELL2_C1_EDWARDS = /* @__PURE__ */function () {
      return (0, modular_js_1.FpSqrtEven)(Fp, Fp.neg(BigInt(486664)));
    }(); // sgn0(c1) MUST equal 0


    function map_to_curve_elligator2_edwards25519(u) {
      var _map_to_curve_elligat = map_to_curve_elligator2_curve25519(u),
          xMn = _map_to_curve_elligat.xMn,
          xMd = _map_to_curve_elligat.xMd,
          yMn = _map_to_curve_elligat.yMn,
          yMd = _map_to_curve_elligat.yMd; //  1.  (xMn, xMd, yMn, yMd) =
      // map_to_curve_elligator2_curve25519(u)


      var xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd

      xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1

      var xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM

      var yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd

      var yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)

      var tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd

      var e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0

      xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)

      xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)

      yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)

      yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)

      var inv = Fp.invertBatch([xd, yd]); // batch division

      return {
        x: Fp.mul(xn, inv[0]),
        y: Fp.mul(yn, inv[1])
      }; //  13. return (xn, xd, yn, yd)
    }

    var htf = /* @__PURE__ */function () {
      return (0, hash_to_curve_js_1.createHasher)(exports.ed25519.ExtendedPoint, function (scalars) {
        return map_to_curve_elligator2_edwards25519(scalars[0]);
      }, {
        DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',
        encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',
        p: Fp.ORDER,
        m: 1,
        k: 128,
        expand: 'xmd',
        hash: sha512_1.sha512
      });
    }();

    exports.hashToCurve = function () {
      return htf.hashToCurve;
    }();

    exports.encodeToCurve = function () {
      return htf.encodeToCurve;
    }();

    function assertRstPoint(other) {
      if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');
    } // √(-1) aka √(a) aka 2^((p-1)/4)


    var SQRT_M1 = ED25519_SQRT_M1; // √(ad - 1)

    var SQRT_AD_MINUS_ONE = /* @__PURE__ */BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235'); // 1 / √(a-d)

    var INVSQRT_A_MINUS_D = /* @__PURE__ */BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578'); // 1-d²

    var ONE_MINUS_D_SQ = /* @__PURE__ */BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838'); // (d-1)²

    var D_MINUS_ONE_SQ = /* @__PURE__ */BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952'); // Calculates 1/√(number)

    var invertSqrt = function invertSqrt(number) {
      return uvRatio(_1n, number);
    };

    var MAX_255B = /* @__PURE__ */BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');

    var bytes255ToNumberLE = function bytes255ToNumberLE(bytes) {
      return exports.ed25519.CURVE.Fp.create((0, utils_js_1.bytesToNumberLE)(bytes) & MAX_255B);
    }; // Computes Elligator map for Ristretto
    // https://ristretto.group/formulas/elligator.html


    function calcElligatorRistrettoMap(r0) {
      var d = exports.ed25519.CURVE.d;
      var P = exports.ed25519.CURVE.Fp.ORDER;
      var mod = exports.ed25519.CURVE.Fp.create;
      var r = mod(SQRT_M1 * r0 * r0); // 1

      var Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2

      var c = BigInt(-1); // 3

      var D = mod((c - d * r) * mod(r + d)); // 4

      var _uvRatio = uvRatio(Ns, D),
          Ns_D_is_sq = _uvRatio.isValid,
          s = _uvRatio.value; // 5


      var s_ = mod(s * r0); // 6

      if (!(0, modular_js_1.isNegativeLE)(s_, P)) s_ = mod(-s_);
      if (!Ns_D_is_sq) s = s_; // 7

      if (!Ns_D_is_sq) c = r; // 8

      var Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9

      var s2 = s * s;
      var W0 = mod((s + s) * D); // 10

      var W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11

      var W2 = mod(_1n - s2); // 12

      var W3 = mod(_1n + s2); // 13

      return new exports.ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));
    }
    /**
     * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be
     * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.
     * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,
     * but it should work in its own namespace: do not combine those two.
     * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448
     */


    var RistPoint = /*#__PURE__*/function () {
      // Private property to discourage combining ExtendedPoint + RistrettoPoint
      // Always use Ristretto encoding/decoding instead.
      function RistPoint(ep) {
        _classCallCheck(this, RistPoint);

        this.ep = ep;
      }

      _createClass(RistPoint, [{
        key: "toRawBytes",
        value:
        /**
         * Encodes ristretto point to Uint8Array.
         * https://ristretto.group/formulas/encoding.html
         */
        function toRawBytes() {
          var _this$ep = this.ep,
              x = _this$ep.ex,
              y = _this$ep.ey,
              z = _this$ep.ez,
              t = _this$ep.et;
          var P = exports.ed25519.CURVE.Fp.ORDER;
          var mod = exports.ed25519.CURVE.Fp.create;
          var u1 = mod(mod(z + y) * mod(z - y)); // 1

          var u2 = mod(x * y); // 2
          // Square root always exists

          var u2sq = mod(u2 * u2);

          var _invertSqrt = invertSqrt(mod(u1 * u2sq)),
              invsqrt = _invertSqrt.value; // 3


          var D1 = mod(invsqrt * u1); // 4

          var D2 = mod(invsqrt * u2); // 5

          var zInv = mod(D1 * D2 * t); // 6

          var D; // 7

          if ((0, modular_js_1.isNegativeLE)(t * zInv, P)) {
            var _x = mod(y * SQRT_M1);

            var _y = mod(x * SQRT_M1);

            x = _x;
            y = _y;
            D = mod(D1 * INVSQRT_A_MINUS_D);
          } else {
            D = D2; // 8
          }

          if ((0, modular_js_1.isNegativeLE)(x * zInv, P)) y = mod(-y); // 9

          var s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))

          if ((0, modular_js_1.isNegativeLE)(s, P)) s = mod(-s);
          return (0, utils_js_1.numberToBytesLE)(s, 32); // 11
        }
      }, {
        key: "toHex",
        value: function toHex() {
          return (0, utils_js_1.bytesToHex)(this.toRawBytes());
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.toHex();
        } // Compare one point to another.

      }, {
        key: "equals",
        value: function equals(other) {
          assertRstPoint(other);
          var _this$ep2 = this.ep,
              X1 = _this$ep2.ex,
              Y1 = _this$ep2.ey;
          var _other$ep = other.ep,
              X2 = _other$ep.ex,
              Y2 = _other$ep.ey;
          var mod = exports.ed25519.CURVE.Fp.create; // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)

          var one = mod(X1 * Y2) === mod(Y1 * X2);
          var two = mod(Y1 * Y2) === mod(X1 * X2);
          return one || two;
        }
      }, {
        key: "add",
        value: function add(other) {
          assertRstPoint(other);
          return new RistPoint(this.ep.add(other.ep));
        }
      }, {
        key: "subtract",
        value: function subtract(other) {
          assertRstPoint(other);
          return new RistPoint(this.ep.subtract(other.ep));
        }
      }, {
        key: "multiply",
        value: function multiply(scalar) {
          return new RistPoint(this.ep.multiply(scalar));
        }
      }, {
        key: "multiplyUnsafe",
        value: function multiplyUnsafe(scalar) {
          return new RistPoint(this.ep.multiplyUnsafe(scalar));
        }
      }, {
        key: "double",
        value: function double() {
          return new RistPoint(this.ep["double"]());
        }
      }, {
        key: "negate",
        value: function negate() {
          return new RistPoint(this.ep.negate());
        }
      }], [{
        key: "fromAffine",
        value: function fromAffine(ap) {
          return new RistPoint(exports.ed25519.ExtendedPoint.fromAffine(ap));
        }
        /**
         * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
         * The hash-to-group operation applies Elligator twice and adds the results.
         * **Note:** this is one-way map, there is no conversion from point to hash.
         * https://ristretto.group/formulas/elligator.html
         * @param hex 64-byte output of a hash function
         */

      }, {
        key: "hashToCurve",
        value: function hashToCurve(hex) {
          hex = (0, utils_js_1.ensureBytes)('ristrettoHash', hex, 64);
          var r1 = bytes255ToNumberLE(hex.slice(0, 32));
          var R1 = calcElligatorRistrettoMap(r1);
          var r2 = bytes255ToNumberLE(hex.slice(32, 64));
          var R2 = calcElligatorRistrettoMap(r2);
          return new RistPoint(R1.add(R2));
        }
        /**
         * Converts ristretto-encoded string to ristretto point.
         * https://ristretto.group/formulas/decoding.html
         * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
         */

      }, {
        key: "fromHex",
        value: function fromHex(hex) {
          hex = (0, utils_js_1.ensureBytes)('ristrettoHex', hex, 32);
          var _exports$ed25519$CURV = exports.ed25519.CURVE,
              a = _exports$ed25519$CURV.a,
              d = _exports$ed25519$CURV.d;
          var P = exports.ed25519.CURVE.Fp.ORDER;
          var mod = exports.ed25519.CURVE.Fp.create;
          var emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';
          var s = bytes255ToNumberLE(hex); // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.
          // 3. Check that s is non-negative, or else abort

          if (!(0, utils_js_1.equalBytes)((0, utils_js_1.numberToBytesLE)(s, 32), hex) || (0, modular_js_1.isNegativeLE)(s, P)) throw new Error(emsg);
          var s2 = mod(s * s);
          var u1 = mod(_1n + a * s2); // 4 (a is -1)

          var u2 = mod(_1n - a * s2); // 5

          var u1_2 = mod(u1 * u1);
          var u2_2 = mod(u2 * u2);
          var v = mod(a * d * u1_2 - u2_2); // 6

          var _invertSqrt2 = invertSqrt(mod(v * u2_2)),
              isValid = _invertSqrt2.isValid,
              I = _invertSqrt2.value; // 7


          var Dx = mod(I * u2); // 8

          var Dy = mod(I * Dx * v); // 9

          var x = mod((s + s) * Dx); // 10

          if ((0, modular_js_1.isNegativeLE)(x, P)) x = mod(-x); // 10

          var y = mod(u1 * Dy); // 11

          var t = mod(x * y); // 12

          if (!isValid || (0, modular_js_1.isNegativeLE)(t, P) || y === _0n) throw new Error(emsg);
          return new RistPoint(new exports.ed25519.ExtendedPoint(x, y, _1n, t));
        }
      }]);

      return RistPoint;
    }();

    exports.RistrettoPoint = function () {
      if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(exports.ed25519.ExtendedPoint.BASE);
      if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(exports.ed25519.ExtendedPoint.ZERO);
      return RistPoint;
    }(); // Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B


    var hashToRistretto255 = function hashToRistretto255(msg, options) {
      var d = options.DST;
      var DST = typeof d === 'string' ? (0, utils_1.utf8ToBytes)(d) : d;
      var uniform_bytes = (0, hash_to_curve_js_1.expand_message_xmd)(msg, DST, 64, sha512_1.sha512);
      var P = RistPoint.hashToCurve(uniform_bytes);
      return P;
    };

    exports.hashToRistretto255 = hashToRistretto255;
    exports.hash_to_ristretto255 = exports.hashToRistretto255; // legacy
  })(ed25519);

  var util = {};

  Object.defineProperty(util, "__esModule", {
    value: true
  });
  util.bytesEqual = util.arraysEqual = void 0;
  /**
   * @internal
   *
   * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).
   *
   * @param a An array.
   * @param b Another array.
   *
   * @return `true` if the arrays have the same length and elements, `false` otherwise.
   *
   * @group Internal
   */

  function arraysEqual(a, b) {
    if (a === b) return true;
    var length = a.length;
    if (length !== b.length) return false;

    for (var i = 0; i < length; i++) {
      if (a[i] !== b[i]) return false;
    }

    return true;
  }

  util.arraysEqual = arraysEqual;
  /**
   * @internal
   *
   * Efficiently compare byte arrays, using {@link arraysEqual}.
   *
   * @param a A byte array.
   * @param b Another byte array.
   *
   * @return `true` if the byte arrays have the same length and bytes, `false` otherwise.
   *
   * @group Internal
   */

  function bytesEqual(a, b) {
    return arraysEqual(a, b);
  }

  util.bytesEqual = bytesEqual;

  Object.defineProperty(signMessage, "__esModule", {
    value: true
  });
  signMessage.verifySignMessage = signMessage.verifyMessageSignature = void 0;
  var ed25519_1 = ed25519;
  var util_js_1$1 = util;
  /**
   * TODO: docs
   */

  function verifyMessageSignature(_ref) {
    var message = _ref.message,
        signedMessage = _ref.signedMessage,
        signature = _ref.signature,
        publicKey = _ref.publicKey;
    // TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md
    return (0, util_js_1$1.bytesEqual)(message, signedMessage) && ed25519_1.ed25519.verify(signature, signedMessage, publicKey);
  }

  signMessage.verifyMessageSignature = verifyMessageSignature;
  /**
   * TODO: docs
   */

  function verifySignMessage(input, output) {
    var message = input.message,
        publicKey = input.account.publicKey;
    var signedMessage = output.signedMessage,
        signature = output.signature;
    return verifyMessageSignature({
      message: message,
      signedMessage: signedMessage,
      signature: signature,
      publicKey: publicKey
    });
  }

  signMessage.verifySignMessage = verifySignMessage;

  Object.defineProperty(signIn, "__esModule", {
    value: true
  });
  signIn.createSignInMessageText = signIn.createSignInMessage = signIn.parseSignInMessageText = signIn.parseSignInMessage = signIn.deriveSignInMessageText = signIn.deriveSignInMessage = signIn.verifySignIn = void 0;
  var signMessage_js_1 = signMessage;
  var util_js_1 = util;
  /**
   * TODO: docs
   */

  function verifySignIn(input, output) {
    var signedMessage = output.signedMessage,
        signature = output.signature,
        publicKey = output.account.publicKey;
    var message = deriveSignInMessage(input, output);
    return !!message && (0, signMessage_js_1.verifyMessageSignature)({
      message: message,
      signedMessage: signedMessage,
      signature: signature,
      publicKey: publicKey
    });
  }

  signIn.verifySignIn = verifySignIn;
  /**
   * TODO: docs
   */

  function deriveSignInMessage(input, output) {
    var text = deriveSignInMessageText(input, output);
    if (!text) return null;
    return new TextEncoder().encode(text);
  }

  signIn.deriveSignInMessage = deriveSignInMessage;
  /**
   * TODO: docs
   */

  function deriveSignInMessageText(input, output) {
    var parsed = parseSignInMessage(output.signedMessage);
    if (!parsed) return null;
    if (input.domain && input.domain !== parsed.domain) return null;
    if (input.address && input.address !== parsed.address) return null;
    if (input.statement !== parsed.statement) return null;
    if (input.uri !== parsed.uri) return null;
    if (input.version !== parsed.version) return null;
    if (input.chainId !== parsed.chainId) return null;
    if (input.nonce !== parsed.nonce) return null;
    if (input.issuedAt !== parsed.issuedAt) return null;
    if (input.expirationTime !== parsed.expirationTime) return null;
    if (input.notBefore !== parsed.notBefore) return null;
    if (input.requestId !== parsed.requestId) return null;

    if (input.resources) {
      if (!parsed.resources) return null;
      if (!(0, util_js_1.arraysEqual)(input.resources, parsed.resources)) return null;
    } else if (parsed.resources) return null;

    return createSignInMessageText(parsed);
  }

  signIn.deriveSignInMessageText = deriveSignInMessageText;
  /**
   * TODO: docs
   */

  function parseSignInMessage(message) {
    var text = new TextDecoder().decode(message);
    return parseSignInMessageText(text);
  }

  signIn.parseSignInMessage = parseSignInMessage; // TODO: implement https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md

  var DOMAIN = '(?<domain>[^\\n]+?) wants you to sign in with your Solana account:\\n';
  var ADDRESS = '(?<address>[^\\n]+)(?:\\n|$)';
  var STATEMENT = '(?:\\n(?<statement>[\\S\\s]*?)(?:\\n|$))??';
  var URI = '(?:\\nURI: (?<uri>[^\\n]+))?';
  var VERSION = '(?:\\nVersion: (?<version>[^\\n]+))?';
  var CHAIN_ID = '(?:\\nChain ID: (?<chainId>[^\\n]+))?';
  var NONCE = '(?:\\nNonce: (?<nonce>[^\\n]+))?';
  var ISSUED_AT = '(?:\\nIssued At: (?<issuedAt>[^\\n]+))?';
  var EXPIRATION_TIME = '(?:\\nExpiration Time: (?<expirationTime>[^\\n]+))?';
  var NOT_BEFORE = '(?:\\nNot Before: (?<notBefore>[^\\n]+))?';
  var REQUEST_ID = '(?:\\nRequest ID: (?<requestId>[^\\n]+))?';
  var RESOURCES = '(?:\\nResources:(?<resources>(?:\\n- [^\\n]+)*))?';
  var FIELDS = "".concat(URI).concat(VERSION).concat(CHAIN_ID).concat(NONCE).concat(ISSUED_AT).concat(EXPIRATION_TIME).concat(NOT_BEFORE).concat(REQUEST_ID).concat(RESOURCES);
  var MESSAGE = new RegExp("^".concat(DOMAIN).concat(ADDRESS).concat(STATEMENT).concat(FIELDS, "\\n*$"));
  /**
   * TODO: docs
   */

  function parseSignInMessageText(text) {
    var _a;

    var match = MESSAGE.exec(text);
    if (!match) return null;
    var groups = match.groups;
    if (!groups) return null;
    return {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      domain: groups.domain,
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      address: groups.address,
      statement: groups.statement,
      uri: groups.uri,
      version: groups.version,
      nonce: groups.nonce,
      chainId: groups.chainId,
      issuedAt: groups.issuedAt,
      expirationTime: groups.expirationTime,
      notBefore: groups.notBefore,
      requestId: groups.requestId,
      resources: (_a = groups.resources) === null || _a === void 0 ? void 0 : _a.split('\n- ').slice(1)
    };
  }

  signIn.parseSignInMessageText = parseSignInMessageText;
  /**
   * TODO: docs
   */

  function createSignInMessage(input) {
    var text = createSignInMessageText(input);
    return new TextEncoder().encode(text);
  }

  signIn.createSignInMessage = createSignInMessage;
  /**
   * TODO: docs
   */

  function createSignInMessageText(input) {
    // ${domain} wants you to sign in with your Solana account:
    // ${address}
    //
    // ${statement}
    //
    // URI: ${uri}
    // Version: ${version}
    // Chain ID: ${chain}
    // Nonce: ${nonce}
    // Issued At: ${issued-at}
    // Expiration Time: ${expiration-time}
    // Not Before: ${not-before}
    // Request ID: ${request-id}
    // Resources:
    // - ${resources[0]}
    // - ${resources[1]}
    // ...
    // - ${resources[n]}
    var message = "".concat(input.domain, " wants you to sign in with your Solana account:\n");
    message += "".concat(input.address);

    if (input.statement) {
      message += "\n\n".concat(input.statement);
    }

    var fields = [];

    if (input.uri) {
      fields.push("URI: ".concat(input.uri));
    }

    if (input.version) {
      fields.push("Version: ".concat(input.version));
    }

    if (input.chainId) {
      fields.push("Chain ID: ".concat(input.chainId));
    }

    if (input.nonce) {
      fields.push("Nonce: ".concat(input.nonce));
    }

    if (input.issuedAt) {
      fields.push("Issued At: ".concat(input.issuedAt));
    }

    if (input.expirationTime) {
      fields.push("Expiration Time: ".concat(input.expirationTime));
    }

    if (input.notBefore) {
      fields.push("Not Before: ".concat(input.notBefore));
    }

    if (input.requestId) {
      fields.push("Request ID: ".concat(input.requestId));
    }

    if (input.resources) {
      fields.push("Resources:");

      var _iterator = _createForOfIteratorHelper(input.resources),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var resource = _step.value;
          fields.push("- ".concat(resource));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    if (fields.length) {
      message += "\n\n".concat(fields.join('\n'));
    }

    return message;
  }

  signIn.createSignInMessageText = createSignInMessageText;

  (function (exports) {

    var __createBinding = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);

      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }

      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });

    var __exportStar = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    __exportStar(commitment, exports);

    __exportStar(endpoint, exports);

    __exportStar(signIn, exports);

    __exportStar(signMessage, exports);
  })(cjs$1);

  Object.defineProperty(cjs$2, '__esModule', {
    value: true
  });
  var walletStandardUtil = cjs$1; // Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/

  var SolanaMobileWalletAdapterErrorCode = {
    ERROR_ASSOCIATION_PORT_OUT_OF_RANGE: 'ERROR_ASSOCIATION_PORT_OUT_OF_RANGE',
    ERROR_REFLECTOR_ID_OUT_OF_RANGE: 'ERROR_REFLECTOR_ID_OUT_OF_RANGE',
    ERROR_FORBIDDEN_WALLET_BASE_URL: 'ERROR_FORBIDDEN_WALLET_BASE_URL',
    ERROR_SECURE_CONTEXT_REQUIRED: 'ERROR_SECURE_CONTEXT_REQUIRED',
    ERROR_SESSION_CLOSED: 'ERROR_SESSION_CLOSED',
    ERROR_SESSION_TIMEOUT: 'ERROR_SESSION_TIMEOUT',
    ERROR_WALLET_NOT_FOUND: 'ERROR_WALLET_NOT_FOUND',
    ERROR_INVALID_PROTOCOL_VERSION: 'ERROR_INVALID_PROTOCOL_VERSION'
  };

  var SolanaMobileWalletAdapterError = /*#__PURE__*/function (_Error) {
    _inherits(SolanaMobileWalletAdapterError, _Error);

    var _super = _createSuper(SolanaMobileWalletAdapterError);

    function SolanaMobileWalletAdapterError() {
      var _this;

      _classCallCheck(this, SolanaMobileWalletAdapterError);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var code = args[0],
          message = args[1],
          data = args[2];
      _this = _super.call(this, message);
      _this.code = code;
      _this.data = data;
      _this.name = 'SolanaMobileWalletAdapterError';
      return _this;
    }

    return _createClass(SolanaMobileWalletAdapterError);
  }( /*#__PURE__*/_wrapNativeSuper(Error)); // Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/


  var SolanaMobileWalletAdapterProtocolErrorCode = {
    // Keep these in sync with `mobilewalletadapter/common/ProtocolContract.java`.
    ERROR_AUTHORIZATION_FAILED: -1,
    ERROR_INVALID_PAYLOADS: -2,
    ERROR_NOT_SIGNED: -3,
    ERROR_NOT_SUBMITTED: -4,
    ERROR_TOO_MANY_PAYLOADS: -5,
    ERROR_ATTEST_ORIGIN_ANDROID: -100
  };

  var SolanaMobileWalletAdapterProtocolError = /*#__PURE__*/function (_Error2) {
    _inherits(SolanaMobileWalletAdapterProtocolError, _Error2);

    var _super2 = _createSuper(SolanaMobileWalletAdapterProtocolError);

    function SolanaMobileWalletAdapterProtocolError() {
      var _this2;

      _classCallCheck(this, SolanaMobileWalletAdapterProtocolError);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var jsonRpcMessageId = args[0],
          code = args[1],
          message = args[2],
          data = args[3];
      _this2 = _super2.call(this, message);
      _this2.code = code;
      _this2.data = data;
      _this2.jsonRpcMessageId = jsonRpcMessageId;
      _this2.name = 'SolanaMobileWalletAdapterProtocolError';
      return _this2;
    }

    return _createClass(SolanaMobileWalletAdapterProtocolError);
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */


  function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }

  function createHelloReq(ecdhPublicKey, associationKeypairPrivateKey) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var publicKeyBuffer, signatureBuffer, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return crypto.subtle.exportKey('raw', ecdhPublicKey);

          case 2:
            publicKeyBuffer = _context.sent;
            _context.next = 5;
            return crypto.subtle.sign({
              hash: 'SHA-256',
              name: 'ECDSA'
            }, associationKeypairPrivateKey, publicKeyBuffer);

          case 5:
            signatureBuffer = _context.sent;
            response = new Uint8Array(publicKeyBuffer.byteLength + signatureBuffer.byteLength);
            response.set(new Uint8Array(publicKeyBuffer), 0);
            response.set(new Uint8Array(signatureBuffer), publicKeyBuffer.byteLength);
            return _context.abrupt("return", response);

          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
  }

  function encode(input) {
    return window.btoa(input);
  }

  function createSIWSMessage(payload) {
    return walletStandardUtil.createSignInMessageText(payload);
  }

  function createSIWSMessageBase64(payload) {
    return encode(createSIWSMessage(payload));
  } // optional features


  var SolanaSignTransactions = 'solana:signTransactions';
  var SolanaCloneAuthorization = 'solana:cloneAuthorization';
  var SolanaSignInWithSolana = 'solana:signInWithSolana';
  /**
   * Creates a {@link MobileWallet} proxy that handles backwards compatibility and API to RPC conversion.
   *
   * @param protocolVersion the protocol version in use for this session/request
   * @param protocolRequestHandler callback function that handles sending the RPC request to the wallet endpoint.
   * @returns a {@link MobileWallet} proxy
   */

  function createMobileWalletProxy(protocolVersion, protocolRequestHandler) {
    return new Proxy({}, {
      get: function get(target, p) {
        if (target[p] == null) {
          target[p] = function (inputParams) {
            return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
              var _handleMobileWalletRe, method, params, result;

              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _handleMobileWalletRe = handleMobileWalletRequest(p, inputParams, protocolVersion), method = _handleMobileWalletRe.method, params = _handleMobileWalletRe.params;
                    _context2.next = 3;
                    return protocolRequestHandler(method, params);

                  case 3:
                    result = _context2.sent;

                    if (!(method === 'authorize' && params.sign_in_payload && !result.sign_in_result)) {
                      _context2.next = 8;
                      break;
                    }

                    _context2.next = 7;
                    return signInFallback(params.sign_in_payload, result, protocolRequestHandler);

                  case 7:
                    result['sign_in_result'] = _context2.sent;

                  case 8:
                    return _context2.abrupt("return", handleMobileWalletResponse(p, result, protocolVersion));

                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
          };
        }

        return target[p];
      },
      defineProperty: function defineProperty() {
        return false;
      },
      deleteProperty: function deleteProperty() {
        return false;
      }
    });
  }
  /**
   * Handles all {@link MobileWallet} API requests and determines the correct MWA RPC method and params to call.
   * This handles backwards compatibility, based on the provided @protocolVersion.
   *
   * @param methodName the name of {@link MobileWallet} method that was called
   * @param methodParams the parameters that were passed to the method
   * @param protocolVersion the protocol version in use for this session/request
   * @returns the RPC request method and params that should be sent to the wallet endpoint
   */


  function handleMobileWalletRequest(methodName, methodParams, protocolVersion) {
    var params = methodParams;
    var method = methodName.toString().replace(/[A-Z]/g, function (letter) {
      return "_".concat(letter.toLowerCase());
    }).toLowerCase();

    switch (methodName) {
      case 'authorize':
        {
          var _params2 = params,
              chain = _params2.chain;

          if (protocolVersion === 'legacy') {
            switch (chain) {
              case 'solana:testnet':
                {
                  chain = 'testnet';
                  break;
                }

              case 'solana:devnet':
                {
                  chain = 'devnet';
                  break;
                }

              case 'solana:mainnet':
                {
                  chain = 'mainnet-beta';
                  break;
                }

              default:
                {
                  chain = params.cluster;
                }
            }

            params.cluster = chain;
          } else {
            switch (chain) {
              case 'testnet':
              case 'devnet':
                {
                  chain = "solana:".concat(chain);
                  break;
                }

              case 'mainnet-beta':
                {
                  chain = 'solana:mainnet';
                  break;
                }
            }

            params.chain = chain;
          }
        }

      case 'reauthorize':
        {
          var _params4 = params,
              auth_token = _params4.auth_token,
              identity = _params4.identity;

          if (auth_token) {
            switch (protocolVersion) {
              case 'legacy':
                {
                  method = 'reauthorize';
                  params = {
                    auth_token: auth_token,
                    identity: identity
                  };
                  break;
                }

              default:
                {
                  method = 'authorize';
                  break;
                }
            }
          }

          break;
        }
    }

    return {
      method: method,
      params: params
    };
  }
  /**
   * Handles all {@link MobileWallet} API responses and modifies the response for backwards compatibility, if needed
   *
   * @param method the {@link MobileWallet} method that was called
   * @param response the original response that was returned by the method call
   * @param protocolVersion the protocol version in use for this session/request
   * @returns the possibly modified response
   */


  function handleMobileWalletResponse(method, response, protocolVersion) {
    switch (method) {
      case 'getCapabilities':
        {
          var capabilities = response;

          switch (protocolVersion) {
            case 'legacy':
              {
                var features = [SolanaSignTransactions];

                if (capabilities.supports_clone_authorization === true) {
                  features.push(SolanaCloneAuthorization);
                }

                return Object.assign(Object.assign({}, capabilities), {
                  features: features
                });
              }

            case 'v1':
              {
                return Object.assign(Object.assign({}, capabilities), {
                  supports_sign_and_send_transactions: true,
                  supports_clone_authorization: capabilities.features.includes(SolanaCloneAuthorization)
                });
              }
          }
        }
    }

    return response;
  }

  function signInFallback(signInPayload, authorizationResult, protocolRequestHandler) {
    var _a;

    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var domain, address, siwsMessage, signMessageResult, signInResult;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            domain = (_a = signInPayload.domain) !== null && _a !== void 0 ? _a : window.location.host;
            address = authorizationResult.accounts[0].address;
            siwsMessage = createSIWSMessageBase64(Object.assign(Object.assign({}, signInPayload), {
              domain: domain,
              address: address
            }));
            _context3.next = 5;
            return protocolRequestHandler('sign_messages', {
              addresses: [address],
              payloads: [siwsMessage]
            });

          case 5:
            signMessageResult = _context3.sent;
            signInResult = {
              address: address,
              signed_message: siwsMessage,
              signature: signMessageResult.signed_payloads[0].slice(siwsMessage.length)
            };
            return _context3.abrupt("return", signInResult);

          case 8:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
  }

  var SEQUENCE_NUMBER_BYTES = 4;

  function createSequenceNumberVector(sequenceNumber) {
    if (sequenceNumber >= 4294967296) {
      throw new Error('Outbound sequence number overflow. The maximum sequence number is 32-bytes.');
    }

    var byteArray = new ArrayBuffer(SEQUENCE_NUMBER_BYTES);
    var view = new DataView(byteArray);
    view.setUint32(0, sequenceNumber,
    /* littleEndian */
    false);
    return new Uint8Array(byteArray);
  }

  var INITIALIZATION_VECTOR_BYTES = 12;
  var ENCODED_PUBLIC_KEY_LENGTH_BYTES = 65;

  function encryptMessage(plaintext, sequenceNumber, sharedSecret) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var sequenceNumberVector, initializationVector, ciphertext, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            sequenceNumberVector = createSequenceNumberVector(sequenceNumber);
            initializationVector = new Uint8Array(INITIALIZATION_VECTOR_BYTES);
            crypto.getRandomValues(initializationVector);
            _context4.next = 5;
            return crypto.subtle.encrypt(getAlgorithmParams(sequenceNumberVector, initializationVector), sharedSecret, new TextEncoder().encode(plaintext));

          case 5:
            ciphertext = _context4.sent;
            response = new Uint8Array(sequenceNumberVector.byteLength + initializationVector.byteLength + ciphertext.byteLength);
            response.set(new Uint8Array(sequenceNumberVector), 0);
            response.set(new Uint8Array(initializationVector), sequenceNumberVector.byteLength);
            response.set(new Uint8Array(ciphertext), sequenceNumberVector.byteLength + initializationVector.byteLength);
            return _context4.abrupt("return", response);

          case 11:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
  }

  function decryptMessage(message, sharedSecret) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var sequenceNumberVector, initializationVector, ciphertext, plaintextBuffer, plaintext;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            sequenceNumberVector = message.slice(0, SEQUENCE_NUMBER_BYTES);
            initializationVector = message.slice(SEQUENCE_NUMBER_BYTES, SEQUENCE_NUMBER_BYTES + INITIALIZATION_VECTOR_BYTES);
            ciphertext = message.slice(SEQUENCE_NUMBER_BYTES + INITIALIZATION_VECTOR_BYTES);
            _context5.next = 5;
            return crypto.subtle.decrypt(getAlgorithmParams(sequenceNumberVector, initializationVector), sharedSecret, ciphertext);

          case 5:
            plaintextBuffer = _context5.sent;
            plaintext = getUtf8Decoder().decode(plaintextBuffer);
            return _context5.abrupt("return", plaintext);

          case 8:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
  }

  function getAlgorithmParams(sequenceNumber, initializationVector) {
    return {
      additionalData: sequenceNumber,
      iv: initializationVector,
      name: 'AES-GCM',
      tagLength: 128 // 16 byte tag => 128 bits

    };
  }

  var _utf8Decoder;

  function getUtf8Decoder() {
    if (_utf8Decoder === undefined) {
      _utf8Decoder = new TextDecoder('utf-8');
    }

    return _utf8Decoder;
  }

  function generateAssociationKeypair() {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return crypto.subtle.generateKey({
              name: 'ECDSA',
              namedCurve: 'P-256'
            }, false
            /* extractable */
            , ['sign']
            /* keyUsages */
            );

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }));
  }

  function generateECDHKeypair() {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return crypto.subtle.generateKey({
              name: 'ECDH',
              namedCurve: 'P-256'
            }, false
            /* extractable */
            , ['deriveKey', 'deriveBits']
            /* keyUsages */
            );

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }));
  }

  function encryptJsonRpcMessage(jsonRpcMessage, sharedSecret) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var plaintext, sequenceNumber;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            plaintext = JSON.stringify(jsonRpcMessage);
            sequenceNumber = jsonRpcMessage.id;
            return _context8.abrupt("return", encryptMessage(plaintext, sequenceNumber, sharedSecret));

          case 3:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
  }

  function decryptJsonRpcMessage(message, sharedSecret) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var plaintext, jsonRpcMessage;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return decryptMessage(message, sharedSecret);

          case 2:
            plaintext = _context9.sent;
            jsonRpcMessage = JSON.parse(plaintext);

            if (!Object.hasOwnProperty.call(jsonRpcMessage, 'error')) {
              _context9.next = 6;
              break;
            }

            throw new SolanaMobileWalletAdapterProtocolError(jsonRpcMessage.id, jsonRpcMessage.error.code, jsonRpcMessage.error.message);

          case 6:
            return _context9.abrupt("return", jsonRpcMessage);

          case 7:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
  }

  function parseHelloRsp(payloadBuffer, // The X9.62-encoded wallet endpoint ephemeral ECDH public keypoint.
  associationPublicKey, ecdhPrivateKey) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var _yield$Promise$all, _yield$Promise$all2, associationPublicKeyBuffer, walletPublicKey, sharedSecret, ecdhSecretKey, aesKeyMaterialVal;

      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return Promise.all([crypto.subtle.exportKey('raw', associationPublicKey), crypto.subtle.importKey('raw', payloadBuffer.slice(0, ENCODED_PUBLIC_KEY_LENGTH_BYTES), {
              name: 'ECDH',
              namedCurve: 'P-256'
            }, false
            /* extractable */
            , []
            /* keyUsages */
            )]);

          case 2:
            _yield$Promise$all = _context10.sent;
            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
            associationPublicKeyBuffer = _yield$Promise$all2[0];
            walletPublicKey = _yield$Promise$all2[1];
            _context10.next = 8;
            return crypto.subtle.deriveBits({
              name: 'ECDH',
              "public": walletPublicKey
            }, ecdhPrivateKey, 256);

          case 8:
            sharedSecret = _context10.sent;
            _context10.next = 11;
            return crypto.subtle.importKey('raw', sharedSecret, 'HKDF', false
            /* extractable */
            , ['deriveKey']
            /* keyUsages */
            );

          case 11:
            ecdhSecretKey = _context10.sent;
            _context10.next = 14;
            return crypto.subtle.deriveKey({
              name: 'HKDF',
              hash: 'SHA-256',
              salt: new Uint8Array(associationPublicKeyBuffer),
              info: new Uint8Array()
            }, ecdhSecretKey, {
              name: 'AES-GCM',
              length: 128
            }, false
            /* extractable */
            , ['encrypt', 'decrypt']);

          case 14:
            aesKeyMaterialVal = _context10.sent;
            return _context10.abrupt("return", aesKeyMaterialVal);

          case 16:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    }));
  }

  function parseSessionProps(message, sharedSecret) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      var plaintext, jsonProperties, protocolVersion;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return decryptMessage(message, sharedSecret);

          case 2:
            plaintext = _context11.sent;
            jsonProperties = JSON.parse(plaintext);
            protocolVersion = 'legacy';

            if (!Object.hasOwnProperty.call(jsonProperties, 'v')) {
              _context11.next = 14;
              break;
            }

            _context11.t0 = jsonProperties.v;
            _context11.next = _context11.t0 === 1 ? 9 : _context11.t0 === '1' ? 9 : _context11.t0 === 'v1' ? 9 : _context11.t0 === 'legacy' ? 11 : 13;
            break;

          case 9:
            protocolVersion = 'v1';
            return _context11.abrupt("break", 14);

          case 11:
            protocolVersion = 'legacy';
            return _context11.abrupt("break", 14);

          case 13:
            throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_INVALID_PROTOCOL_VERSION, "Unknown/unsupported protocol version: ".concat(jsonProperties.v));

          case 14:
            return _context11.abrupt("return", {
              protocol_version: protocolVersion
            });

          case 15:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    }));
  }

  function getRandomAssociationPort() {
    return assertAssociationPort(49152 + Math.floor(Math.random() * (65535 - 49152 + 1)));
  }

  function assertAssociationPort(port) {
    if (port < 49152 || port > 65535) {
      throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_ASSOCIATION_PORT_OUT_OF_RANGE, "Association port number must be between 49152 and 65535. ".concat(port, " given."), {
        port: port
      });
    }

    return port;
  } // https://stackoverflow.com/a/9458996/802047


  function arrayBufferToBase64String(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;

    for (var ii = 0; ii < len; ii++) {
      binary += String.fromCharCode(bytes[ii]);
    }

    return window.btoa(binary);
  }

  function getStringWithURLUnsafeCharactersReplaced(unsafeBase64EncodedString) {
    return unsafeBase64EncodedString.replace(/[/+=]/g, function (m) {
      return {
        '/': '_',
        '+': '-',
        '=': '.'
      }[m];
    });
  }

  function getRandomReflectorId() {
    return assertReflectorId(getRandomInt(0, 9007199254740991)); // 0 < id < 2^53 - 1
  }

  function getRandomInt(min, max) {
    var randomBuffer = new Uint32Array(1);
    window.crypto.getRandomValues(randomBuffer);
    var randomNumber = randomBuffer[0] / (0xffffffff + 1);
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(randomNumber * (max - min + 1)) + min;
  }

  function assertReflectorId(id) {
    if (id < 0 || id > 9007199254740991) {
      // 0 < id < 2^53 - 1
      throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_REFLECTOR_ID_OUT_OF_RANGE, "Association port number must be between 49152 and 65535. ".concat(id, " given."), {
        id: id
      });
    }

    return id;
  }

  var INTENT_NAME = 'solana-wallet';

  function getPathParts(pathString) {
    return pathString // Strip leading and trailing slashes
    .replace(/(^\/+|\/+$)/g, '') // Return an array of directories
    .split('/');
  }

  function getIntentURL(methodPathname, intentUrlBase) {
    var baseUrl = null;

    if (intentUrlBase) {
      try {
        baseUrl = new URL(intentUrlBase);
      } catch (_a) {} // eslint-disable-line no-empty


      if ((baseUrl === null || baseUrl === void 0 ? void 0 : baseUrl.protocol) !== 'https:') {
        throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, 'Base URLs supplied by wallets must be valid `https` URLs');
      }
    }

    baseUrl || (baseUrl = new URL("".concat(INTENT_NAME, ":/")));
    var pathname = methodPathname.startsWith('/') ? // Method is an absolute path. Replace it wholesale.
    methodPathname : // Method is a relative path. Merge it with the existing one.
    [].concat(_toConsumableArray(getPathParts(baseUrl.pathname)), _toConsumableArray(getPathParts(methodPathname))).join('/');
    return new URL(pathname, baseUrl);
  }

  function getAssociateAndroidIntentURL(associationPublicKey, putativePort, associationURLBase) {
    var protocolVersions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ['v1'];
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      var associationPort, exportedKey, encodedKey, url;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            associationPort = assertAssociationPort(putativePort);
            _context12.next = 3;
            return crypto.subtle.exportKey('raw', associationPublicKey);

          case 3:
            exportedKey = _context12.sent;
            encodedKey = arrayBufferToBase64String(exportedKey);
            url = getIntentURL('v1/associate/local', associationURLBase);
            url.searchParams.set('association', getStringWithURLUnsafeCharactersReplaced(encodedKey));
            url.searchParams.set('port', "".concat(associationPort));
            protocolVersions.forEach(function (version) {
              url.searchParams.set('v', version);
            });
            return _context12.abrupt("return", url);

          case 10:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    }));
  }

  function getRemoteAssociateAndroidIntentURL(associationPublicKey, hostAuthority, putativeId, associationURLBase) {
    var protocolVersions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ['v1'];
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var reflectorId, exportedKey, encodedKey, url;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            reflectorId = assertReflectorId(putativeId);
            _context13.next = 3;
            return crypto.subtle.exportKey('raw', associationPublicKey);

          case 3:
            exportedKey = _context13.sent;
            encodedKey = arrayBufferToBase64String(exportedKey);
            url = getIntentURL('v1/associate/remote', associationURLBase);
            url.searchParams.set('association', getStringWithURLUnsafeCharactersReplaced(encodedKey));
            url.searchParams.set('reflector', "".concat(hostAuthority));
            url.searchParams.set('id', "".concat(reflectorId));
            protocolVersions.forEach(function (version) {
              url.searchParams.set('v', version);
            });
            return _context13.abrupt("return", url);

          case 11:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    }));
  } // Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/


  var Browser = {
    Firefox: 0,
    Other: 1
  };

  function getBrowser() {
    return navigator.userAgent.indexOf('Firefox/') !== -1 ? Browser.Firefox : Browser.Other;
  }

  function getDetectionPromise() {
    // Chrome and others silently fail if a custom protocol is not supported.
    // For these, we wait to see if the browser is navigated away from in
    // a reasonable amount of time (ie. the native wallet opened).
    return new Promise(function (resolve, reject) {
      function cleanup() {
        clearTimeout(timeoutId);
        window.removeEventListener('blur', handleBlur);
      }

      function handleBlur() {
        cleanup();
        resolve();
      }

      window.addEventListener('blur', handleBlur);
      var timeoutId = setTimeout(function () {
        cleanup();
        reject();
      }, 2000);
    });
  }

  var _frame = null;

  function launchUrlThroughHiddenFrame(url) {
    if (_frame == null) {
      _frame = document.createElement('iframe');
      _frame.style.display = 'none';
      document.body.appendChild(_frame);
    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


    _frame.contentWindow.location.href = url.toString();
  }

  function launchAssociation(associationUrl) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var browser, detectionPromise;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            if (!(associationUrl.protocol === 'https:')) {
              _context14.next = 4;
              break;
            }

            // The association URL is an Android 'App Link' or iOS 'Universal Link'.
            // These are regular web URLs that are designed to launch an app if it
            // is installed or load the actual target webpage if not.
            window.location.assign(associationUrl);
            _context14.next = 22;
            break;

          case 4:
            _context14.prev = 4;
            browser = getBrowser();
            _context14.t0 = browser;
            _context14.next = _context14.t0 === Browser.Firefox ? 9 : _context14.t0 === Browser.Other ? 11 : 16;
            break;

          case 9:
            // If a custom protocol is not supported in Firefox, it throws.
            launchUrlThroughHiddenFrame(associationUrl); // If we reached this line, it's supported.

            return _context14.abrupt("break", 17);

          case 11:
            detectionPromise = getDetectionPromise();
            window.location.assign(associationUrl);
            _context14.next = 15;
            return detectionPromise;

          case 15:
            return _context14.abrupt("break", 17);

          case 16:

          case 17:
            _context14.next = 22;
            break;

          case 19:
            _context14.prev = 19;
            _context14.t1 = _context14["catch"](4);
            throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_WALLET_NOT_FOUND, 'Found no installed wallet that supports the mobile wallet protocol.');

          case 22:
          case "end":
            return _context14.stop();
        }
      }, _callee14, null, [[4, 19]]);
    }));
  }

  function startSession(associationPublicKey, associationURLBase) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      var randomAssociationPort, associationUrl;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            randomAssociationPort = getRandomAssociationPort();
            _context15.next = 3;
            return getAssociateAndroidIntentURL(associationPublicKey, randomAssociationPort, associationURLBase);

          case 3:
            associationUrl = _context15.sent;
            _context15.next = 6;
            return launchAssociation(associationUrl);

          case 6:
            return _context15.abrupt("return", randomAssociationPort);

          case 7:
          case "end":
            return _context15.stop();
        }
      }, _callee15);
    }));
  }

  function getRemoteSessionUrl(associationPublicKey, hostAuthority, associationURLBase) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
      var randomReflectorId, associationUrl;
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            randomReflectorId = getRandomReflectorId();
            _context16.next = 3;
            return getRemoteAssociateAndroidIntentURL(associationPublicKey, hostAuthority, randomReflectorId, associationURLBase);

          case 3:
            associationUrl = _context16.sent;
            return _context16.abrupt("return", {
              associationUrl: associationUrl,
              reflectorId: randomReflectorId
            });

          case 5:
          case "end":
            return _context16.stop();
        }
      }, _callee16);
    }));
  }

  var WEBSOCKET_CONNECTION_CONFIG = {
    /**
     * 300 milliseconds is a generally accepted threshold for what someone
     * would consider an acceptable response time for a user interface
     * after having performed a low-attention tapping task. We set the initial
     * interval at which we wait for the wallet to set up the websocket at
     * half this, as per the Nyquist frequency, with a progressive backoff
     * sequence from there. The total wait time is 30s, which allows for the
     * user to be presented with a disambiguation dialog, select a wallet, and
     * for the wallet app to subsequently start.
     */
    retryDelayScheduleMs: [150, 150, 200, 500, 500, 750, 750, 1000],
    timeoutMs: 30000
  };
  var WEBSOCKET_PROTOCOL = 'com.solana.mobilewalletadapter.v1';

  function assertSecureContext() {
    if (typeof window === 'undefined' || window.isSecureContext !== true) {
      throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SECURE_CONTEXT_REQUIRED, 'The mobile wallet adapter protocol must be used in a secure context (`https`).');
    }
  }

  function assertSecureEndpointSpecificURI(walletUriBase) {
    var url;

    try {
      url = new URL(walletUriBase);
    } catch (_a) {
      throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, 'Invalid base URL supplied by wallet');
    }

    if (url.protocol !== 'https:') {
      throw new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_FORBIDDEN_WALLET_BASE_URL, 'Base URLs supplied by wallets must be valid `https` URLs');
    }
  }

  function getSequenceNumberFromByteArray(byteArray) {
    var view = new DataView(byteArray);
    return view.getUint32(0,
    /* littleEndian */
    false);
  }

  function transact$2(callback, config) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
      var _this3 = this;

      var associationKeypair, sessionPort, websocketURL, connectionStartTime, getNextRetryDelayMs, nextJsonRpcMessageId, lastKnownInboundSequenceNumber, state;
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            assertSecureContext();
            _context22.next = 3;
            return generateAssociationKeypair();

          case 3:
            associationKeypair = _context22.sent;
            _context22.next = 6;
            return startSession(associationKeypair.publicKey, config === null || config === void 0 ? void 0 : config.baseUri);

          case 6:
            sessionPort = _context22.sent;
            websocketURL = "ws://localhost:".concat(sessionPort, "/solana-wallet");

            getNextRetryDelayMs = function () {
              var schedule = _toConsumableArray(WEBSOCKET_CONNECTION_CONFIG.retryDelayScheduleMs);

              return function () {
                return schedule.length > 1 ? schedule.shift() : schedule[0];
              };
            }();

            nextJsonRpcMessageId = 1;
            lastKnownInboundSequenceNumber = 0;
            state = {
              __type: 'disconnected'
            };
            return _context22.abrupt("return", new Promise(function (resolve, reject) {
              var socket; // eslint-disable-next-line @typescript-eslint/no-explicit-any

              var jsonRpcResponsePromises = {};

              var handleOpen = function handleOpen() {
                return __awaiter$1(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
                  var _state, associationKeypair, ecdhKeypair;

                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                    while (1) switch (_context17.prev = _context17.next) {
                      case 0:
                        if (!(state.__type !== 'connecting')) {
                          _context17.next = 3;
                          break;
                        }

                        console.warn('Expected adapter state to be `connecting` at the moment the websocket opens. ' + "Got `".concat(state.__type, "`."));
                        return _context17.abrupt("return");

                      case 3:
                        socket.removeEventListener('open', handleOpen); // previous versions of this library and walletlib incorrectly implemented the MWA session 
                        // establishment protocol for local connections. The dapp is supposed to wait for the 
                        // APP_PING message before sending the HELLO_REQ. Instead, the dapp was sending the HELLO_REQ 
                        // immediately upon connection to the websocket server regardless of wether or not an 
                        // APP_PING was sent by the wallet/websocket server. We must continue to support this behavior 
                        // in case the user is using a wallet that has not updated their walletlib implementation. 

                        _state = state, associationKeypair = _state.associationKeypair;
                        _context17.next = 7;
                        return generateECDHKeypair();

                      case 7:
                        ecdhKeypair = _context17.sent;
                        _context17.t0 = socket;
                        _context17.next = 11;
                        return createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey);

                      case 11:
                        _context17.t1 = _context17.sent;

                        _context17.t0.send.call(_context17.t0, _context17.t1);

                        state = {
                          __type: 'hello_req_sent',
                          associationPublicKey: associationKeypair.publicKey,
                          ecdhPrivateKey: ecdhKeypair.privateKey
                        };

                      case 14:
                      case "end":
                        return _context17.stop();
                    }
                  }, _callee17);
                }));
              };

              var handleClose = function handleClose(evt) {
                if (evt.wasClean) {
                  state = {
                    __type: 'disconnected'
                  };
                } else {
                  reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_CLOSED, "The wallet session dropped unexpectedly (".concat(evt.code, ": ").concat(evt.reason, ")."), {
                    closeEvent: evt
                  }));
                }

                disposeSocket();
              };

              var handleError = function handleError(_evt) {
                return __awaiter$1(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
                  return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                    while (1) switch (_context18.prev = _context18.next) {
                      case 0:
                        disposeSocket();

                        if (!(Date.now() - connectionStartTime >= WEBSOCKET_CONNECTION_CONFIG.timeoutMs)) {
                          _context18.next = 5;
                          break;
                        }

                        reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_TIMEOUT, "Failed to connect to the wallet websocket at ".concat(websocketURL, ".")));
                        _context18.next = 8;
                        break;

                      case 5:
                        _context18.next = 7;
                        return new Promise(function (resolve) {
                          var retryDelayMs = getNextRetryDelayMs();
                          retryWaitTimeoutId = window.setTimeout(resolve, retryDelayMs);
                        });

                      case 7:
                        attemptSocketConnection();

                      case 8:
                      case "end":
                        return _context18.stop();
                    }
                  }, _callee18);
                }));
              };

              var handleMessage = function handleMessage(evt) {
                return __awaiter$1(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
                  var _this4 = this;

                  var responseBuffer, ecdhKeypair, sequenceNumberVector, sequenceNumber, jsonRpcMessage, responsePromise, _responsePromise, _ecdhKeypair, sharedSecret, sessionPropertiesBuffer, sessionProperties, wallet;

                  return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                    while (1) switch (_context21.prev = _context21.next) {
                      case 0:
                        _context21.next = 2;
                        return evt.data.arrayBuffer();

                      case 2:
                        responseBuffer = _context21.sent;
                        _context21.t0 = state.__type;
                        _context21.next = _context21.t0 === 'connecting' ? 6 : _context21.t0 === 'connected' ? 18 : _context21.t0 === 'hello_req_sent' ? 42 : 83;
                        break;

                      case 6:
                        if (!(responseBuffer.byteLength !== 0)) {
                          _context21.next = 8;
                          break;
                        }

                        throw new Error('Encountered unexpected message while connecting');

                      case 8:
                        _context21.next = 10;
                        return generateECDHKeypair();

                      case 10:
                        ecdhKeypair = _context21.sent;
                        _context21.t1 = socket;
                        _context21.next = 14;
                        return createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey);

                      case 14:
                        _context21.t2 = _context21.sent;

                        _context21.t1.send.call(_context21.t1, _context21.t2);

                        state = {
                          __type: 'hello_req_sent',
                          associationPublicKey: associationKeypair.publicKey,
                          ecdhPrivateKey: ecdhKeypair.privateKey
                        };
                        return _context21.abrupt("break", 83);

                      case 18:
                        _context21.prev = 18;
                        sequenceNumberVector = responseBuffer.slice(0, SEQUENCE_NUMBER_BYTES);
                        sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);

                        if (!(sequenceNumber !== lastKnownInboundSequenceNumber + 1)) {
                          _context21.next = 23;
                          break;
                        }

                        throw new Error('Encrypted message has invalid sequence number');

                      case 23:
                        lastKnownInboundSequenceNumber = sequenceNumber;
                        _context21.next = 26;
                        return decryptJsonRpcMessage(responseBuffer, state.sharedSecret);

                      case 26:
                        jsonRpcMessage = _context21.sent;
                        responsePromise = jsonRpcResponsePromises[jsonRpcMessage.id];
                        delete jsonRpcResponsePromises[jsonRpcMessage.id];
                        responsePromise.resolve(jsonRpcMessage.result);
                        _context21.next = 41;
                        break;

                      case 32:
                        _context21.prev = 32;
                        _context21.t3 = _context21["catch"](18);

                        if (!(_context21.t3 instanceof SolanaMobileWalletAdapterProtocolError)) {
                          _context21.next = 40;
                          break;
                        }

                        _responsePromise = jsonRpcResponsePromises[_context21.t3.jsonRpcMessageId];
                        delete jsonRpcResponsePromises[_context21.t3.jsonRpcMessageId];

                        _responsePromise.reject(_context21.t3);

                        _context21.next = 41;
                        break;

                      case 40:
                        throw _context21.t3;

                      case 41:
                        return _context21.abrupt("break", 83);

                      case 42:
                        if (!(responseBuffer.byteLength === 0)) {
                          _context21.next = 53;
                          break;
                        }

                        _context21.next = 45;
                        return generateECDHKeypair();

                      case 45:
                        _ecdhKeypair = _context21.sent;
                        _context21.t4 = socket;
                        _context21.next = 49;
                        return createHelloReq(_ecdhKeypair.publicKey, associationKeypair.privateKey);

                      case 49:
                        _context21.t5 = _context21.sent;

                        _context21.t4.send.call(_context21.t4, _context21.t5);

                        state = {
                          __type: 'hello_req_sent',
                          associationPublicKey: associationKeypair.publicKey,
                          ecdhPrivateKey: _ecdhKeypair.privateKey
                        };
                        return _context21.abrupt("break", 83);

                      case 53:
                        _context21.next = 55;
                        return parseHelloRsp(responseBuffer, state.associationPublicKey, state.ecdhPrivateKey);

                      case 55:
                        sharedSecret = _context21.sent;
                        sessionPropertiesBuffer = responseBuffer.slice(ENCODED_PUBLIC_KEY_LENGTH_BYTES);

                        if (!(sessionPropertiesBuffer.byteLength !== 0)) {
                          _context21.next = 63;
                          break;
                        }

                        _context21.next = 60;
                        return function () {
                          return __awaiter$1(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
                            var sequenceNumberVector, sequenceNumber;
                            return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                              while (1) switch (_context19.prev = _context19.next) {
                                case 0:
                                  sequenceNumberVector = sessionPropertiesBuffer.slice(0, SEQUENCE_NUMBER_BYTES);
                                  sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);

                                  if (!(sequenceNumber !== lastKnownInboundSequenceNumber + 1)) {
                                    _context19.next = 4;
                                    break;
                                  }

                                  throw new Error('Encrypted message has invalid sequence number');

                                case 4:
                                  lastKnownInboundSequenceNumber = sequenceNumber;
                                  return _context19.abrupt("return", parseSessionProps(sessionPropertiesBuffer, sharedSecret));

                                case 6:
                                case "end":
                                  return _context19.stop();
                              }
                            }, _callee19);
                          }));
                        }();

                      case 60:
                        _context21.t6 = _context21.sent;
                        _context21.next = 64;
                        break;

                      case 63:
                        _context21.t6 = {
                          protocol_version: 'legacy'
                        };

                      case 64:
                        sessionProperties = _context21.t6;
                        state = {
                          __type: 'connected',
                          sharedSecret: sharedSecret,
                          sessionProperties: sessionProperties
                        };
                        wallet = createMobileWalletProxy(sessionProperties.protocol_version, function (method, params) {
                          return __awaiter$1(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
                            var id;
                            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                              while (1) switch (_context20.prev = _context20.next) {
                                case 0:
                                  id = nextJsonRpcMessageId++;
                                  _context20.t0 = socket;
                                  _context20.next = 4;
                                  return encryptJsonRpcMessage({
                                    id: id,
                                    jsonrpc: '2.0',
                                    method: method,
                                    params: params !== null && params !== void 0 ? params : {}
                                  }, sharedSecret);

                                case 4:
                                  _context20.t1 = _context20.sent;

                                  _context20.t0.send.call(_context20.t0, _context20.t1);

                                  return _context20.abrupt("return", new Promise(function (_resolve, reject) {
                                    jsonRpcResponsePromises[id] = {
                                      resolve: function resolve(result) {
                                        switch (method) {
                                          case 'authorize':
                                          case 'reauthorize':
                                            {
                                              var wallet_uri_base = result.wallet_uri_base;

                                              if (wallet_uri_base != null) {
                                                try {
                                                  assertSecureEndpointSpecificURI(wallet_uri_base);
                                                } catch (e) {
                                                  reject(e);
                                                  return;
                                                }
                                              }

                                              break;
                                            }
                                        }

                                        _resolve(result);
                                      },
                                      reject: reject
                                    };
                                  }));

                                case 7:
                                case "end":
                                  return _context20.stop();
                              }
                            }, _callee20);
                          }));
                        });
                        _context21.prev = 67;
                        _context21.t7 = resolve;
                        _context21.next = 71;
                        return callback(wallet);

                      case 71:
                        _context21.t8 = _context21.sent;
                        (0, _context21.t7)(_context21.t8);
                        _context21.next = 78;
                        break;

                      case 75:
                        _context21.prev = 75;
                        _context21.t9 = _context21["catch"](67);
                        reject(_context21.t9);

                      case 78:
                        _context21.prev = 78;
                        disposeSocket();
                        socket.close();
                        return _context21.finish(78);

                      case 82:
                        return _context21.abrupt("break", 83);

                      case 83:
                      case "end":
                        return _context21.stop();
                    }
                  }, _callee21, null, [[18, 32], [67, 75, 78, 82]]);
                }));
              };

              var disposeSocket;
              var retryWaitTimeoutId;

              var attemptSocketConnection = function attemptSocketConnection() {
                if (disposeSocket) {
                  disposeSocket();
                }

                state = {
                  __type: 'connecting',
                  associationKeypair: associationKeypair
                };

                if (connectionStartTime === undefined) {
                  connectionStartTime = Date.now();
                }

                socket = new WebSocket(websocketURL, [WEBSOCKET_PROTOCOL]);
                socket.addEventListener('open', handleOpen);
                socket.addEventListener('close', handleClose);
                socket.addEventListener('error', handleError);
                socket.addEventListener('message', handleMessage);

                disposeSocket = function disposeSocket() {
                  window.clearTimeout(retryWaitTimeoutId);
                  socket.removeEventListener('open', handleOpen);
                  socket.removeEventListener('close', handleClose);
                  socket.removeEventListener('error', handleError);
                  socket.removeEventListener('message', handleMessage);
                };
              };

              attemptSocketConnection();
            }));

          case 13:
          case "end":
            return _context22.stop();
        }
      }, _callee22);
    }));
  }

  function transactRemote$1(callback, config) {
    return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
      var _this5 = this;

      var associationKeypair, _yield$getRemoteSessi, associationUrl, reflectorId, websocketURL, connectionStartTime, getNextRetryDelayMs, nextJsonRpcMessageId, lastKnownInboundSequenceNumber, state;

      return _regeneratorRuntime().wrap(function _callee28$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            assertSecureContext();
            _context28.next = 3;
            return generateAssociationKeypair();

          case 3:
            associationKeypair = _context28.sent;
            _context28.next = 6;
            return getRemoteSessionUrl(associationKeypair.publicKey, config.remoteHostAuthority, config === null || config === void 0 ? void 0 : config.baseUri);

          case 6:
            _yield$getRemoteSessi = _context28.sent;
            associationUrl = _yield$getRemoteSessi.associationUrl;
            reflectorId = _yield$getRemoteSessi.reflectorId;
            websocketURL = "wss://".concat(config === null || config === void 0 ? void 0 : config.remoteHostAuthority, "/reflect?id=").concat(reflectorId);

            getNextRetryDelayMs = function () {
              var schedule = _toConsumableArray(WEBSOCKET_CONNECTION_CONFIG.retryDelayScheduleMs);

              return function () {
                return schedule.length > 1 ? schedule.shift() : schedule[0];
              };
            }();

            nextJsonRpcMessageId = 1;
            lastKnownInboundSequenceNumber = 0;
            state = {
              __type: 'disconnected'
            };
            return _context28.abrupt("return", {
              associationUrl: associationUrl,
              result: new Promise(function (resolve, reject) {
                var socket; // eslint-disable-next-line @typescript-eslint/no-explicit-any

                var jsonRpcResponsePromises = {};

                var handleOpen = function handleOpen() {
                  return __awaiter$1(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
                    return _regeneratorRuntime().wrap(function _callee23$(_context23) {
                      while (1) switch (_context23.prev = _context23.next) {
                        case 0:
                          if (!(state.__type !== 'connecting')) {
                            _context23.next = 3;
                            break;
                          }

                          console.warn('Expected adapter state to be `connecting` at the moment the websocket opens. ' + "Got `".concat(state.__type, "`."));
                          return _context23.abrupt("return");

                        case 3:
                          socket.removeEventListener('open', handleOpen);

                        case 4:
                        case "end":
                          return _context23.stop();
                      }
                    }, _callee23);
                  }));
                };

                var handleClose = function handleClose(evt) {
                  if (evt.wasClean) {
                    state = {
                      __type: 'disconnected'
                    };
                  } else {
                    reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_CLOSED, "The wallet session dropped unexpectedly (".concat(evt.code, ": ").concat(evt.reason, ")."), {
                      closeEvent: evt
                    }));
                  }

                  disposeSocket();
                };

                var handleError = function handleError(_evt) {
                  return __awaiter$1(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
                    return _regeneratorRuntime().wrap(function _callee24$(_context24) {
                      while (1) switch (_context24.prev = _context24.next) {
                        case 0:
                          disposeSocket();

                          if (!(Date.now() - connectionStartTime >= WEBSOCKET_CONNECTION_CONFIG.timeoutMs)) {
                            _context24.next = 5;
                            break;
                          }

                          reject(new SolanaMobileWalletAdapterError(SolanaMobileWalletAdapterErrorCode.ERROR_SESSION_TIMEOUT, "Failed to connect to the wallet websocket at ".concat(websocketURL, ".")));
                          _context24.next = 8;
                          break;

                        case 5:
                          _context24.next = 7;
                          return new Promise(function (resolve) {
                            var retryDelayMs = getNextRetryDelayMs();
                            retryWaitTimeoutId = window.setTimeout(resolve, retryDelayMs);
                          });

                        case 7:
                          attemptSocketConnection();

                        case 8:
                        case "end":
                          return _context24.stop();
                      }
                    }, _callee24);
                  }));
                };

                var handleMessage = function handleMessage(evt) {
                  return __awaiter$1(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
                    var _this6 = this;

                    var responseBuffer, ecdhKeypair, sequenceNumberVector, sequenceNumber, jsonRpcMessage, responsePromise, _responsePromise2, sharedSecret, sessionPropertiesBuffer, sessionProperties, wallet;

                    return _regeneratorRuntime().wrap(function _callee27$(_context27) {
                      while (1) switch (_context27.prev = _context27.next) {
                        case 0:
                          _context27.next = 2;
                          return evt.data.arrayBuffer();

                        case 2:
                          responseBuffer = _context27.sent;
                          _context27.t0 = state.__type;
                          _context27.next = _context27.t0 === 'connecting' ? 6 : _context27.t0 === 'connected' ? 18 : _context27.t0 === 'hello_req_sent' ? 42 : 68;
                          break;

                        case 6:
                          if (!(responseBuffer.byteLength !== 0)) {
                            _context27.next = 8;
                            break;
                          }

                          throw new Error('Encountered unexpected message while connecting');

                        case 8:
                          _context27.next = 10;
                          return generateECDHKeypair();

                        case 10:
                          ecdhKeypair = _context27.sent;
                          _context27.t1 = socket;
                          _context27.next = 14;
                          return createHelloReq(ecdhKeypair.publicKey, associationKeypair.privateKey);

                        case 14:
                          _context27.t2 = _context27.sent;

                          _context27.t1.send.call(_context27.t1, _context27.t2);

                          state = {
                            __type: 'hello_req_sent',
                            associationPublicKey: associationKeypair.publicKey,
                            ecdhPrivateKey: ecdhKeypair.privateKey
                          };
                          return _context27.abrupt("break", 68);

                        case 18:
                          _context27.prev = 18;
                          sequenceNumberVector = responseBuffer.slice(0, SEQUENCE_NUMBER_BYTES);
                          sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);

                          if (!(sequenceNumber !== lastKnownInboundSequenceNumber + 1)) {
                            _context27.next = 23;
                            break;
                          }

                          throw new Error('Encrypted message has invalid sequence number');

                        case 23:
                          lastKnownInboundSequenceNumber = sequenceNumber;
                          _context27.next = 26;
                          return decryptJsonRpcMessage(responseBuffer, state.sharedSecret);

                        case 26:
                          jsonRpcMessage = _context27.sent;
                          responsePromise = jsonRpcResponsePromises[jsonRpcMessage.id];
                          delete jsonRpcResponsePromises[jsonRpcMessage.id];
                          responsePromise.resolve(jsonRpcMessage.result);
                          _context27.next = 41;
                          break;

                        case 32:
                          _context27.prev = 32;
                          _context27.t3 = _context27["catch"](18);

                          if (!(_context27.t3 instanceof SolanaMobileWalletAdapterProtocolError)) {
                            _context27.next = 40;
                            break;
                          }

                          _responsePromise2 = jsonRpcResponsePromises[_context27.t3.jsonRpcMessageId];
                          delete jsonRpcResponsePromises[_context27.t3.jsonRpcMessageId];

                          _responsePromise2.reject(_context27.t3);

                          _context27.next = 41;
                          break;

                        case 40:
                          throw _context27.t3;

                        case 41:
                          return _context27.abrupt("break", 68);

                        case 42:
                          _context27.next = 44;
                          return parseHelloRsp(responseBuffer, state.associationPublicKey, state.ecdhPrivateKey);

                        case 44:
                          sharedSecret = _context27.sent;
                          sessionPropertiesBuffer = responseBuffer.slice(ENCODED_PUBLIC_KEY_LENGTH_BYTES);

                          if (!(sessionPropertiesBuffer.byteLength !== 0)) {
                            _context27.next = 52;
                            break;
                          }

                          _context27.next = 49;
                          return function () {
                            return __awaiter$1(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
                              var sequenceNumberVector, sequenceNumber;
                              return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                                while (1) switch (_context25.prev = _context25.next) {
                                  case 0:
                                    sequenceNumberVector = sessionPropertiesBuffer.slice(0, SEQUENCE_NUMBER_BYTES);
                                    sequenceNumber = getSequenceNumberFromByteArray(sequenceNumberVector);

                                    if (!(sequenceNumber !== lastKnownInboundSequenceNumber + 1)) {
                                      _context25.next = 4;
                                      break;
                                    }

                                    throw new Error('Encrypted message has invalid sequence number');

                                  case 4:
                                    lastKnownInboundSequenceNumber = sequenceNumber;
                                    return _context25.abrupt("return", parseSessionProps(sessionPropertiesBuffer, sharedSecret));

                                  case 6:
                                  case "end":
                                    return _context25.stop();
                                }
                              }, _callee25);
                            }));
                          }();

                        case 49:
                          _context27.t4 = _context27.sent;
                          _context27.next = 53;
                          break;

                        case 52:
                          _context27.t4 = {
                            protocol_version: 'legacy'
                          };

                        case 53:
                          sessionProperties = _context27.t4;
                          state = {
                            __type: 'connected',
                            sharedSecret: sharedSecret,
                            sessionProperties: sessionProperties
                          };
                          wallet = createMobileWalletProxy(sessionProperties.protocol_version, function (method, params) {
                            return __awaiter$1(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
                              var id;
                              return _regeneratorRuntime().wrap(function _callee26$(_context26) {
                                while (1) switch (_context26.prev = _context26.next) {
                                  case 0:
                                    id = nextJsonRpcMessageId++;
                                    _context26.t0 = socket;
                                    _context26.next = 4;
                                    return encryptJsonRpcMessage({
                                      id: id,
                                      jsonrpc: '2.0',
                                      method: method,
                                      params: params !== null && params !== void 0 ? params : {}
                                    }, sharedSecret);

                                  case 4:
                                    _context26.t1 = _context26.sent;

                                    _context26.t0.send.call(_context26.t0, _context26.t1);

                                    return _context26.abrupt("return", new Promise(function (_resolve2, reject) {
                                      jsonRpcResponsePromises[id] = {
                                        resolve: function resolve(result) {
                                          switch (method) {
                                            case 'authorize':
                                            case 'reauthorize':
                                              {
                                                var wallet_uri_base = result.wallet_uri_base;

                                                if (wallet_uri_base != null) {
                                                  try {
                                                    assertSecureEndpointSpecificURI(wallet_uri_base);
                                                  } catch (e) {
                                                    reject(e);
                                                    return;
                                                  }
                                                }

                                                break;
                                              }
                                          }

                                          _resolve2(result);
                                        },
                                        reject: reject
                                      };
                                    }));

                                  case 7:
                                  case "end":
                                    return _context26.stop();
                                }
                              }, _callee26);
                            }));
                          });
                          _context27.prev = 56;
                          _context27.t5 = resolve;
                          _context27.next = 60;
                          return callback(new Proxy(wallet, {
                            get: function get(target, p) {
                              if (p === 'terminateSession') {
                                disposeSocket();
                                socket.close();
                                return;
                              } else return target[p];
                            }
                          }));

                        case 60:
                          _context27.t6 = _context27.sent;
                          (0, _context27.t5)(_context27.t6);
                          _context27.next = 67;
                          break;

                        case 64:
                          _context27.prev = 64;
                          _context27.t7 = _context27["catch"](56);
                          reject(_context27.t7);

                        case 67:
                          return _context27.abrupt("break", 68);

                        case 68:
                        case "end":
                          return _context27.stop();
                      }
                    }, _callee27, null, [[18, 32], [56, 64]]);
                  }));
                };

                var disposeSocket;
                var retryWaitTimeoutId;

                var attemptSocketConnection = function attemptSocketConnection() {
                  if (disposeSocket) {
                    disposeSocket();
                  }

                  state = {
                    __type: 'connecting',
                    associationKeypair: associationKeypair
                  };

                  if (connectionStartTime === undefined) {
                    connectionStartTime = Date.now();
                  }

                  socket = new WebSocket(websocketURL, [WEBSOCKET_PROTOCOL]);
                  socket.addEventListener('open', handleOpen);
                  socket.addEventListener('close', handleClose);
                  socket.addEventListener('error', handleError);
                  socket.addEventListener('message', handleMessage);

                  disposeSocket = function disposeSocket() {
                    window.clearTimeout(retryWaitTimeoutId);
                    socket.removeEventListener('open', handleOpen);
                    socket.removeEventListener('close', handleClose);
                    socket.removeEventListener('error', handleError);
                    socket.removeEventListener('message', handleMessage);
                  };
                };

                attemptSocketConnection();
              })
            });

          case 15:
          case "end":
            return _context28.stop();
        }
      }, _callee28);
    }));
  }

  cjs$2.SolanaCloneAuthorization = SolanaCloneAuthorization;
  cjs$2.SolanaMobileWalletAdapterError = SolanaMobileWalletAdapterError;
  cjs$2.SolanaMobileWalletAdapterErrorCode = SolanaMobileWalletAdapterErrorCode;
  cjs$2.SolanaMobileWalletAdapterProtocolError = SolanaMobileWalletAdapterProtocolError;
  cjs$2.SolanaMobileWalletAdapterProtocolErrorCode = SolanaMobileWalletAdapterProtocolErrorCode;
  cjs$2.SolanaSignInWithSolana = SolanaSignInWithSolana;
  cjs$2.SolanaSignTransactions = SolanaSignTransactions;
  cjs$2.transact = transact$2;
  cjs$2.transactRemote = transactRemote$1;

  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.


  function base(ALPHABET) {
    if (ALPHABET.length >= 255) {
      throw new TypeError('Alphabet too long');
    }

    var BASE_MAP = new Uint8Array(256);

    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }

    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);

      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + ' is ambiguous');
      }

      BASE_MAP[xc] = i;
    }

    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

    function encode(source) {
      if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }

      if (!(source instanceof Uint8Array)) {
        throw new TypeError('Expected Uint8Array');
      }

      if (source.length === 0) {
        return '';
      } // Skip & count leading zeroes.


      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;

      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      } // Allocate enough space in big-endian base58 representation.


      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size); // Process the bytes.

      while (pbegin !== pend) {
        var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

        var i = 0;

        for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        pbegin++;
      } // Skip leading zeroes in base58 result.


      var it2 = size - length;

      while (it2 !== size && b58[it2] === 0) {
        it2++;
      } // Translate the result into a string.


      var str = LEADER.repeat(zeroes);

      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }

      return str;
    }

    function decodeUnsafe(source) {
      if (typeof source !== 'string') {
        throw new TypeError('Expected String');
      }

      if (source.length === 0) {
        return new Uint8Array();
      }

      var psz = 0; // Skip and count leading '1's.

      var zeroes = 0;
      var length = 0;

      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      } // Allocate enough space in big-endian base256 representation.


      var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

      var b256 = new Uint8Array(size); // Process the characters.

      while (source[psz]) {
        // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

        if (carry === 255) {
          return;
        }

        var i = 0;

        for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        psz++;
      } // Skip leading zeroes in b256.


      var it4 = size - length;

      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }

      var vch = new Uint8Array(zeroes + (size - it4));
      var j = zeroes;

      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }

      return vch;
    }

    function decode(string) {
      var buffer = decodeUnsafe(string);

      if (buffer) {
        return buffer;
      }

      throw new Error('Non-base' + BASE + ' character');
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    };
  }

  var src = base;

  var basex = src;
  var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  var bs58$2 = basex(ALPHABET);

  Object.defineProperty(cjs$3, '__esModule', {
    value: true
  });
  var web3_js = require$$1;
  var mobileWalletAdapterProtocol = cjs$2;
  var bs58$1 = bs58$2;

  function _interopDefaultLegacy$1(e) {
    return e && _typeof(e) === 'object' && 'default' in e ? e : {
      'default': e
    };
  }

  var bs58__default = /*#__PURE__*/_interopDefaultLegacy$1(bs58$1);
  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */


  function __rest(s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }

  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }

  function fromUint8Array(byteArray) {
    var _String$fromCharCode;

    return window.btoa((_String$fromCharCode = String.fromCharCode).call.apply(_String$fromCharCode, [null].concat(_toConsumableArray(byteArray))));
  }

  function toUint8Array(base64EncodedByteArray) {
    return new Uint8Array(window.atob(base64EncodedByteArray).split('').map(function (c) {
      return c.charCodeAt(0);
    }));
  }

  function getPayloadFromTransaction(transaction) {
    var serializedTransaction = 'version' in transaction ? transaction.serialize() : transaction.serialize({
      requireAllSignatures: false,
      verifySignatures: false
    });
    var payload = fromUint8Array(serializedTransaction);
    return payload;
  }

  function getTransactionFromWireMessage(byteArray) {
    var numSignatures = byteArray[0];
    var messageOffset = numSignatures * web3_js.SIGNATURE_LENGTH_IN_BYTES + 1;
    var version = web3_js.VersionedMessage.deserializeMessageVersion(byteArray.slice(messageOffset, byteArray.length));

    if (version === 'legacy') {
      return web3_js.Transaction.from(byteArray);
    } else {
      return web3_js.VersionedTransaction.deserialize(byteArray);
    }
  }

  function transact$1(callback, config) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var augmentedCallback;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            augmentedCallback = function augmentedCallback(wallet) {
              var augmentedAPI = new Proxy({}, {
                get: function get(target, p) {
                  if (target[p] == null) {
                    switch (p) {
                      case 'signAndSendTransactions':
                        target[p] = function (_a) {
                          var minContextSlot = _a.minContextSlot,
                              commitment = _a.commitment,
                              skipPreflight = _a.skipPreflight,
                              maxRetries = _a.maxRetries,
                              waitForCommitmentToSendNextTransaction = _a.waitForCommitmentToSendNextTransaction,
                              transactions = _a.transactions,
                              rest = __rest(_a, ["minContextSlot", "commitment", "skipPreflight", "maxRetries", "waitForCommitmentToSendNextTransaction", "transactions"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                            var payloads, options, _yield$wallet$signAnd, base64EncodedSignatures, signatures;

                            return _regeneratorRuntime().wrap(function _callee$(_context) {
                              while (1) switch (_context.prev = _context.next) {
                                case 0:
                                  payloads = transactions.map(getPayloadFromTransaction);
                                  options = {
                                    min_context_slot: minContextSlot,
                                    commitment: commitment,
                                    skip_preflight: skipPreflight,
                                    max_retries: maxRetries,
                                    wait_for_commitment_to_send_next_transaction: waitForCommitmentToSendNextTransaction
                                  };
                                  _context.next = 4;
                                  return wallet.signAndSendTransactions(Object.assign(Object.assign(Object.assign({}, rest), Object.values(options).some(function (element) {
                                    return element != null;
                                  }) ? {
                                    options: options
                                  } : null), {
                                    payloads: payloads
                                  }));

                                case 4:
                                  _yield$wallet$signAnd = _context.sent;
                                  base64EncodedSignatures = _yield$wallet$signAnd.signatures;
                                  signatures = base64EncodedSignatures.map(toUint8Array).map(bs58__default["default"].encode);
                                  return _context.abrupt("return", signatures);

                                case 8:
                                case "end":
                                  return _context.stop();
                              }
                            }, _callee);
                          }));
                        };

                        break;

                      case 'signMessages':
                        target[p] = function (_a) {
                          var payloads = _a.payloads,
                              rest = __rest(_a, ["payloads"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                            var base64EncodedPayloads, _yield$wallet$signMes, base64EncodedSignedMessages, signedMessages;

                            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                              while (1) switch (_context2.prev = _context2.next) {
                                case 0:
                                  base64EncodedPayloads = payloads.map(fromUint8Array);
                                  _context2.next = 3;
                                  return wallet.signMessages(Object.assign(Object.assign({}, rest), {
                                    payloads: base64EncodedPayloads
                                  }));

                                case 3:
                                  _yield$wallet$signMes = _context2.sent;
                                  base64EncodedSignedMessages = _yield$wallet$signMes.signed_payloads;
                                  signedMessages = base64EncodedSignedMessages.map(toUint8Array);
                                  return _context2.abrupt("return", signedMessages);

                                case 7:
                                case "end":
                                  return _context2.stop();
                              }
                            }, _callee2);
                          }));
                        };

                        break;

                      case 'signTransactions':
                        target[p] = function (_a) {
                          var transactions = _a.transactions,
                              rest = __rest(_a, ["transactions"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                            var payloads, _yield$wallet$signTra, base64EncodedCompiledTransactions, compiledTransactions, signedTransactions;

                            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                              while (1) switch (_context3.prev = _context3.next) {
                                case 0:
                                  payloads = transactions.map(getPayloadFromTransaction);
                                  _context3.next = 3;
                                  return wallet.signTransactions(Object.assign(Object.assign({}, rest), {
                                    payloads: payloads
                                  }));

                                case 3:
                                  _yield$wallet$signTra = _context3.sent;
                                  base64EncodedCompiledTransactions = _yield$wallet$signTra.signed_payloads;
                                  compiledTransactions = base64EncodedCompiledTransactions.map(toUint8Array);
                                  signedTransactions = compiledTransactions.map(getTransactionFromWireMessage);
                                  return _context3.abrupt("return", signedTransactions);

                                case 8:
                                case "end":
                                  return _context3.stop();
                              }
                            }, _callee3);
                          }));
                        };

                        break;

                      default:
                        {
                          target[p] = wallet[p];
                          break;
                        }
                    }
                  }

                  return target[p];
                },
                defineProperty: function defineProperty() {
                  return false;
                },
                deleteProperty: function deleteProperty() {
                  return false;
                }
              });
              return callback(augmentedAPI);
            };

            _context4.next = 3;
            return mobileWalletAdapterProtocol.transact(augmentedCallback, config);

          case 3:
            return _context4.abrupt("return", _context4.sent);

          case 4:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
  }

  function transactRemote(callback, config) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var augmentedCallback;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            augmentedCallback = function augmentedCallback(wallet) {
              var augmentedAPI = new Proxy({}, {
                get: function get(target, p) {
                  if (target[p] == null) {
                    switch (p) {
                      case 'signAndSendTransactions':
                        target[p] = function (_a) {
                          var minContextSlot = _a.minContextSlot,
                              commitment = _a.commitment,
                              skipPreflight = _a.skipPreflight,
                              maxRetries = _a.maxRetries,
                              waitForCommitmentToSendNextTransaction = _a.waitForCommitmentToSendNextTransaction,
                              transactions = _a.transactions,
                              rest = __rest(_a, ["minContextSlot", "commitment", "skipPreflight", "maxRetries", "waitForCommitmentToSendNextTransaction", "transactions"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
                            var payloads, options, _yield$wallet$signAnd2, base64EncodedSignatures, signatures;

                            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                              while (1) switch (_context5.prev = _context5.next) {
                                case 0:
                                  payloads = transactions.map(getPayloadFromTransaction);
                                  options = {
                                    min_context_slot: minContextSlot,
                                    commitment: commitment,
                                    skip_preflight: skipPreflight,
                                    max_retries: maxRetries,
                                    wait_for_commitment_to_send_next_transaction: waitForCommitmentToSendNextTransaction
                                  };
                                  _context5.next = 4;
                                  return wallet.signAndSendTransactions(Object.assign(Object.assign(Object.assign({}, rest), Object.values(options).some(function (element) {
                                    return element != null;
                                  }) ? {
                                    options: options
                                  } : null), {
                                    payloads: payloads
                                  }));

                                case 4:
                                  _yield$wallet$signAnd2 = _context5.sent;
                                  base64EncodedSignatures = _yield$wallet$signAnd2.signatures;
                                  signatures = base64EncodedSignatures.map(toUint8Array).map(bs58__default["default"].encode);
                                  return _context5.abrupt("return", signatures);

                                case 8:
                                case "end":
                                  return _context5.stop();
                              }
                            }, _callee5);
                          }));
                        };

                        break;

                      case 'signMessages':
                        target[p] = function (_a) {
                          var payloads = _a.payloads,
                              rest = __rest(_a, ["payloads"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
                            var base64EncodedPayloads, _yield$wallet$signMes2, base64EncodedSignedMessages, signedMessages;

                            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                              while (1) switch (_context6.prev = _context6.next) {
                                case 0:
                                  base64EncodedPayloads = payloads.map(fromUint8Array);
                                  _context6.next = 3;
                                  return wallet.signMessages(Object.assign(Object.assign({}, rest), {
                                    payloads: base64EncodedPayloads
                                  }));

                                case 3:
                                  _yield$wallet$signMes2 = _context6.sent;
                                  base64EncodedSignedMessages = _yield$wallet$signMes2.signed_payloads;
                                  signedMessages = base64EncodedSignedMessages.map(toUint8Array);
                                  return _context6.abrupt("return", signedMessages);

                                case 7:
                                case "end":
                                  return _context6.stop();
                              }
                            }, _callee6);
                          }));
                        };

                        break;

                      case 'signTransactions':
                        target[p] = function (_a) {
                          var transactions = _a.transactions,
                              rest = __rest(_a, ["transactions"]);

                          return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                            var payloads, _yield$wallet$signTra2, base64EncodedCompiledTransactions, compiledTransactions, signedTransactions;

                            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                              while (1) switch (_context7.prev = _context7.next) {
                                case 0:
                                  payloads = transactions.map(getPayloadFromTransaction);
                                  _context7.next = 3;
                                  return wallet.signTransactions(Object.assign(Object.assign({}, rest), {
                                    payloads: payloads
                                  }));

                                case 3:
                                  _yield$wallet$signTra2 = _context7.sent;
                                  base64EncodedCompiledTransactions = _yield$wallet$signTra2.signed_payloads;
                                  compiledTransactions = base64EncodedCompiledTransactions.map(toUint8Array);
                                  signedTransactions = compiledTransactions.map(getTransactionFromWireMessage);
                                  return _context7.abrupt("return", signedTransactions);

                                case 8:
                                case "end":
                                  return _context7.stop();
                              }
                            }, _callee7);
                          }));
                        };

                        break;

                      default:
                        {
                          target[p] = wallet[p];
                          break;
                        }
                    }
                  }

                  return target[p];
                },
                defineProperty: function defineProperty() {
                  return false;
                },
                deleteProperty: function deleteProperty() {
                  return false;
                }
              });
              return callback(augmentedAPI);
            };

            _context8.next = 3;
            return mobileWalletAdapterProtocol.transactRemote(augmentedCallback, config);

          case 3:
            return _context8.abrupt("return", _context8.sent);

          case 4:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
  }

  cjs$3.transact = transact$1;
  cjs$3.transactRemote = transactRemote;

  var Layout$1 = {};

  /**
   * Base class for layout objects.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support the {@link
   * Layout#encode|encode} or {@link Layout#decode|decode} functions.
   *
   * @param {Number} span - Initializer for {@link Layout#span|span}.  The
   * parameter must be an integer; a negative value signifies that the
   * span is {@link Layout#getSpan|value-specific}.
   *
   * @param {string} [property] - Initializer for {@link
   * Layout#property|property}.
   *
   * @abstract
   */


  var Layout = /*#__PURE__*/function () {
    function Layout(span, property) {
      _classCallCheck(this, Layout);

      if (!Number.isInteger(span)) {
        throw new TypeError('span must be an integer');
      }
      /** The span of the layout in bytes.
       *
       * Positive values are generally expected.
       *
       * Zero will only appear in {@link Constant}s and in {@link
       * Sequence}s where the {@link Sequence#count|count} is zero.
       *
       * A negative value indicates that the span is value-specific, and
       * must be obtained using {@link Layout#getSpan|getSpan}. */


      this.span = span;
      /** The property name used when this layout is represented in an
       * Object.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances.  If left undefined the span of the unnamed layout will
       * be treated as padding: it will not be mutated by {@link
       * Layout#encode|encode} nor represented as a property in the
       * decoded Object. */

      this.property = property;
    }
    /** Function to create an Object into which decoded properties will
     * be written.
     *
     * Used only for layouts that {@link Layout#decode|decode} to Object
     * instances, which means:
     * * {@link Structure}
     * * {@link Union}
     * * {@link VariantLayout}
     * * {@link BitStructure}
     *
     * If left undefined the JavaScript representation of these layouts
     * will be Object instances.
     *
     * See {@link bindConstructorLayout}.
     */


    _createClass(Layout, [{
      key: "makeDestinationObject",
      value: function makeDestinationObject() {
        return {};
      }
      /**
       * Decode from a Buffer into an JavaScript value.
       *
       * @param {Buffer} b - the buffer from which encoded data is read.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {(Number|Array|Object)} - the value of the decoded data.
       *
       * @abstract
       */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        throw new Error('Layout is abstract');
      }
      /**
       * Encode a JavaScript value into a Buffer.
       *
       * @param {(Number|Array|Object)} src - the value to be encoded into
       * the buffer.  The type accepted depends on the (sub-)type of {@link
       * Layout}.
       *
       * @param {Buffer} b - the buffer into which encoded data will be
       * written.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {Number} - the number of bytes encoded, including the
       * space skipped for internal padding, but excluding data such as
       * {@link Sequence#count|lengths} when stored {@link
       * ExternalLayout|externally}.  This is the adjustment to `offset`
       * producing the offset where data for the next layout would be
       * written.
       *
       * @abstract
       */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        throw new Error('Layout is abstract');
      }
      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Buffer} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */

    }, {
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 > this.span) {
          throw new RangeError('indeterminate span');
        }

        return this.span;
      }
      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */

    }, {
      key: "replicate",
      value: function replicate(property) {
        var rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }
      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        return undefined;
      }
    }]);

    return Layout;
  }();

  Layout$1.Layout = Layout;
  /* Provide text that carries a name (such as for a function that will
   * be throwing an error) annotated with the property of a given layout
   * (such as one for which the value was unacceptable).
   *
   * @ignore */

  function nameWithProperty(name, lo) {
    if (lo.property) {
      return name + '[' + lo.property + ']';
    }

    return name;
  }

  Layout$1.nameWithProperty = nameWithProperty;
  /**
   * Augment a class so that instances can be encoded/decoded using a
   * given layout.
   *
   * Calling this function couples `Class` with `layout` in several ways:
   *
   * * `Class.layout_` becomes a static member property equal to `layout`;
   * * `layout.boundConstructor_` becomes a static member property equal
   *    to `Class`;
   * * The {@link Layout#makeDestinationObject|makeDestinationObject()}
   *   property of `layout` is set to a function that returns a `new
   *   Class()`;
   * * `Class.decode(b, offset)` becomes a static member function that
   *   delegates to {@link Layout#decode|layout.decode}.  The
   *   synthesized function may be captured and extended.
   * * `Class.prototype.encode(b, offset)` provides an instance member
   *   function that delegates to {@link Layout#encode|layout.encode}
   *   with `src` set to `this`.  The synthesized function may be
   *   captured and extended, but when the extension is invoked `this`
   *   must be explicitly bound to the instance.
   *
   * @param {class} Class - a JavaScript class with a nullary
   * constructor.
   *
   * @param {Layout} layout - the {@link Layout} instance used to encode
   * instances of `Class`.
   */

  function bindConstructorLayout(Class, layout) {
    if ('function' !== typeof Class) {
      throw new TypeError('Class must be constructor');
    }

    if (Class.hasOwnProperty('layout_')) {
      throw new Error('Class is already bound to a layout');
    }

    if (!(layout && layout instanceof Layout)) {
      throw new TypeError('layout must be a Layout');
    }

    if (layout.hasOwnProperty('boundConstructor_')) {
      throw new Error('layout is already bound to a constructor');
    }

    Class.layout_ = layout;
    layout.boundConstructor_ = Class;

    layout.makeDestinationObject = function () {
      return new Class();
    };

    Object.defineProperty(Class.prototype, 'encode', {
      value: function value(b, offset) {
        return layout.encode(this, b, offset);
      },
      writable: true
    });
    Object.defineProperty(Class, 'decode', {
      value: function value(b, offset) {
        return layout.decode(b, offset);
      },
      writable: true
    });
  }

  Layout$1.bindConstructorLayout = bindConstructorLayout;
  /**
   * An object that behaves like a layout but does not consume space
   * within its containing layout.
   *
   * This is primarily used to obtain metadata about a member, such as a
   * {@link OffsetLayout} that can provide data about a {@link
   * Layout#getSpan|value-specific span}.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support {@link
   * ExternalLayout#isCount|isCount} or other {@link Layout} functions.
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @abstract
   * @augments {Layout}
   */

  var ExternalLayout = /*#__PURE__*/function (_Layout) {
    _inherits(ExternalLayout, _Layout);

    var _super = _createSuper(ExternalLayout);

    function ExternalLayout() {
      _classCallCheck(this, ExternalLayout);

      return _super.apply(this, arguments);
    }

    _createClass(ExternalLayout, [{
      key: "isCount",
      value:
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      function isCount() {
        throw new Error('ExternalLayout is abstract');
      }
    }]);

    return ExternalLayout;
  }(Layout);
  /**
   * An {@link ExternalLayout} that determines its {@link
   * Layout#decode|value} based on offset into and length of the buffer
   * on which it is invoked.
   *
   * *Factory*: {@link module:Layout.greedy|greedy}
   *
   * @param {Number} [elementSpan] - initializer for {@link
   * GreedyCount#elementSpan|elementSpan}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {ExternalLayout}
   */


  var GreedyCount = /*#__PURE__*/function (_ExternalLayout) {
    _inherits(GreedyCount, _ExternalLayout);

    var _super2 = _createSuper(GreedyCount);

    function GreedyCount(elementSpan, property) {
      var _this;

      _classCallCheck(this, GreedyCount);

      if (undefined === elementSpan) {
        elementSpan = 1;
      }

      if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {
        throw new TypeError('elementSpan must be a (positive) integer');
      }

      _this = _super2.call(this, -1, property);
      /** The layout for individual elements of the sequence.  The value
       * must be a positive integer.  If not provided, the value will be
       * 1. */

      _this.elementSpan = elementSpan;
      return _this;
    }
    /** @override */


    _createClass(GreedyCount, [{
      key: "isCount",
      value: function isCount() {
        return true;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var rem = b.length - offset;
        return Math.floor(rem / this.elementSpan);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        return 0;
      }
    }]);

    return GreedyCount;
  }(ExternalLayout);
  /**
   * An {@link ExternalLayout} that supports accessing a {@link Layout}
   * at a fixed offset from the start of another Layout.  The offset may
   * be before, within, or after the base layout.
   *
   * *Factory*: {@link module:Layout.offset|offset}
   *
   * @param {Layout} layout - initializer for {@link
   * OffsetLayout#layout|layout}, modulo `property`.
   *
   * @param {Number} [offset] - Initializes {@link
   * OffsetLayout#offset|offset}.  Defaults to zero.
   *
   * @param {string} [property] - Optional new property name for a
   * {@link Layout#replicate| replica} of `layout` to be used as {@link
   * OffsetLayout#layout|layout}.  If not provided the `layout` is used
   * unchanged.
   *
   * @augments {Layout}
   */


  var OffsetLayout = /*#__PURE__*/function (_ExternalLayout2) {
    _inherits(OffsetLayout, _ExternalLayout2);

    var _super3 = _createSuper(OffsetLayout);

    function OffsetLayout(layout, offset, property) {
      var _this2;

      _classCallCheck(this, OffsetLayout);

      if (!(layout instanceof Layout)) {
        throw new TypeError('layout must be a Layout');
      }

      if (undefined === offset) {
        offset = 0;
      } else if (!Number.isInteger(offset)) {
        throw new TypeError('offset must be integer or undefined');
      }

      _this2 = _super3.call(this, layout.span, property || layout.property);
      /** The subordinated layout. */

      _this2.layout = layout;
      /** The location of {@link OffsetLayout#layout} relative to the
       * start of another layout.
       *
       * The value may be positive or negative, but an error will thrown
       * if at the point of use it goes outside the span of the Buffer
       * being accessed.  */

      _this2.offset = offset;
      return _this2;
    }
    /** @override */


    _createClass(OffsetLayout, [{
      key: "isCount",
      value: function isCount() {
        return this.layout instanceof UInt || this.layout instanceof UIntBE;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return this.layout.decode(b, offset + this.offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return this.layout.encode(src, b, offset + this.offset);
      }
    }]);

    return OffsetLayout;
  }(ExternalLayout);
  /**
   * Represent an unsigned integer in little-endian format.
   *
   * *Factory*: {@link module:Layout.u8|u8}, {@link
   *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link
   *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link
   *  module:Layout.u48|u48}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var UInt = /*#__PURE__*/function (_Layout2) {
    _inherits(UInt, _Layout2);

    var _super4 = _createSuper(UInt);

    function UInt(span, property) {
      var _this3;

      _classCallCheck(this, UInt);

      _this3 = _super4.call(this, span, property);

      if (6 < _this3.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this3;
    }
    /** @override */


    _createClass(UInt, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readUIntLE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeUIntLE(src, offset, this.span);
        return this.span;
      }
    }]);

    return UInt;
  }(Layout);
  /**
   * Represent an unsigned integer in big-endian format.
   *
   * *Factory*: {@link module:Layout.u8be|u8be}, {@link
   * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},
   * {@link module:Layout.u32be|u32be}, {@link
   * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var UIntBE = /*#__PURE__*/function (_Layout3) {
    _inherits(UIntBE, _Layout3);

    var _super5 = _createSuper(UIntBE);

    function UIntBE(span, property) {
      var _this4;

      _classCallCheck(this, UIntBE);

      _this4 = _super5.call(this, span, property);

      if (6 < _this4.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this4;
    }
    /** @override */


    _createClass(UIntBE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readUIntBE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeUIntBE(src, offset, this.span);
        return this.span;
      }
    }]);

    return UIntBE;
  }(Layout);
  /**
   * Represent a signed integer in little-endian format.
   *
   * *Factory*: {@link module:Layout.s8|s8}, {@link
   *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link
   *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link
   *  module:Layout.s48|s48}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Int = /*#__PURE__*/function (_Layout4) {
    _inherits(Int, _Layout4);

    var _super6 = _createSuper(Int);

    function Int(span, property) {
      var _this5;

      _classCallCheck(this, Int);

      _this5 = _super6.call(this, span, property);

      if (6 < _this5.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this5;
    }
    /** @override */


    _createClass(Int, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readIntLE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeIntLE(src, offset, this.span);
        return this.span;
      }
    }]);

    return Int;
  }(Layout);
  /**
   * Represent a signed integer in big-endian format.
   *
   * *Factory*: {@link module:Layout.s8be|s8be}, {@link
   * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},
   * {@link module:Layout.s32be|s32be}, {@link
   * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}
   *
   * @param {Number} span - initializer for {@link Layout#span|span}.
   * The parameter can range from 1 through 6.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var IntBE = /*#__PURE__*/function (_Layout5) {
    _inherits(IntBE, _Layout5);

    var _super7 = _createSuper(IntBE);

    function IntBE(span, property) {
      var _this6;

      _classCallCheck(this, IntBE);

      _this6 = _super7.call(this, span, property);

      if (6 < _this6.span) {
        throw new RangeError('span must not exceed 6 bytes');
      }

      return _this6;
    }
    /** @override */


    _createClass(IntBE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readIntBE(offset, this.span);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeIntBE(src, offset, this.span);
        return this.span;
      }
    }]);

    return IntBE;
  }(Layout);

  var V2E32 = Math.pow(2, 32);
  /* True modulus high and low 32-bit words, where low word is always
   * non-negative. */

  function divmodInt64(src) {
    var hi32 = Math.floor(src / V2E32);
    var lo32 = src - hi32 * V2E32;
    return {
      hi32: hi32,
      lo32: lo32
    };
  }
  /* Reconstruct Number from quotient and non-negative remainder */


  function roundedInt64(hi32, lo32) {
    return hi32 * V2E32 + lo32;
  }
  /**
   * Represent an unsigned 64-bit integer in little-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.nu64|nu64}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */


  var NearUInt64 = /*#__PURE__*/function (_Layout6) {
    _inherits(NearUInt64, _Layout6);

    var _super8 = _createSuper(NearUInt64);

    function NearUInt64(property) {
      _classCallCheck(this, NearUInt64);

      return _super8.call(this, 8, property);
    }
    /** @override */


    _createClass(NearUInt64, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var lo32 = b.readUInt32LE(offset);
        var hi32 = b.readUInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeUInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }]);

    return NearUInt64;
  }(Layout);
  /**
   * Represent an unsigned 64-bit integer in big-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.nu64be|nu64be}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */


  var NearUInt64BE = /*#__PURE__*/function (_Layout7) {
    _inherits(NearUInt64BE, _Layout7);

    var _super9 = _createSuper(NearUInt64BE);

    function NearUInt64BE(property) {
      _classCallCheck(this, NearUInt64BE);

      return _super9.call(this, 8, property);
    }
    /** @override */


    _createClass(NearUInt64BE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var hi32 = b.readUInt32BE(offset);
        var lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var split = divmodInt64(src);
        b.writeUInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }]);

    return NearUInt64BE;
  }(Layout);
  /**
   * Represent a signed 64-bit integer in little-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.ns64|ns64}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */


  var NearInt64 = /*#__PURE__*/function (_Layout8) {
    _inherits(NearInt64, _Layout8);

    var _super10 = _createSuper(NearInt64);

    function NearInt64(property) {
      _classCallCheck(this, NearInt64);

      return _super10.call(this, 8, property);
    }
    /** @override */


    _createClass(NearInt64, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var lo32 = b.readUInt32LE(offset);
        var hi32 = b.readInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeInt32LE(split.hi32, offset + 4);
        return 8;
      }
    }]);

    return NearInt64;
  }(Layout);
  /**
   * Represent a signed 64-bit integer in big-endian format when
   * encoded and as a near integral JavaScript Number when decoded.
   *
   * *Factory*: {@link module:Layout.ns64be|ns64be}
   *
   * **NOTE** Values with magnitude greater than 2^52 may not decode to
   * the exact value of the encoded representation.
   *
   * @augments {Layout}
   */


  var NearInt64BE = /*#__PURE__*/function (_Layout9) {
    _inherits(NearInt64BE, _Layout9);

    var _super11 = _createSuper(NearInt64BE);

    function NearInt64BE(property) {
      _classCallCheck(this, NearInt64BE);

      return _super11.call(this, 8, property);
    }
    /** @override */


    _createClass(NearInt64BE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var hi32 = b.readInt32BE(offset);
        var lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var split = divmodInt64(src);
        b.writeInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    }]);

    return NearInt64BE;
  }(Layout);
  /**
   * Represent a 32-bit floating point number in little-endian format.
   *
   * *Factory*: {@link module:Layout.f32|f32}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Float = /*#__PURE__*/function (_Layout10) {
    _inherits(Float, _Layout10);

    var _super12 = _createSuper(Float);

    function Float(property) {
      _classCallCheck(this, Float);

      return _super12.call(this, 4, property);
    }
    /** @override */


    _createClass(Float, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readFloatLE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeFloatLE(src, offset);
        return 4;
      }
    }]);

    return Float;
  }(Layout);
  /**
   * Represent a 32-bit floating point number in big-endian format.
   *
   * *Factory*: {@link module:Layout.f32be|f32be}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var FloatBE = /*#__PURE__*/function (_Layout11) {
    _inherits(FloatBE, _Layout11);

    var _super13 = _createSuper(FloatBE);

    function FloatBE(property) {
      _classCallCheck(this, FloatBE);

      return _super13.call(this, 4, property);
    }
    /** @override */


    _createClass(FloatBE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readFloatBE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeFloatBE(src, offset);
        return 4;
      }
    }]);

    return FloatBE;
  }(Layout);
  /**
   * Represent a 64-bit floating point number in little-endian format.
   *
   * *Factory*: {@link module:Layout.f64|f64}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Double = /*#__PURE__*/function (_Layout12) {
    _inherits(Double, _Layout12);

    var _super14 = _createSuper(Double);

    function Double(property) {
      _classCallCheck(this, Double);

      return _super14.call(this, 8, property);
    }
    /** @override */


    _createClass(Double, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readDoubleLE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeDoubleLE(src, offset);
        return 8;
      }
    }]);

    return Double;
  }(Layout);
  /**
   * Represent a 64-bit floating point number in big-endian format.
   *
   * *Factory*: {@link module:Layout.f64be|f64be}
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var DoubleBE = /*#__PURE__*/function (_Layout13) {
    _inherits(DoubleBE, _Layout13);

    var _super15 = _createSuper(DoubleBE);

    function DoubleBE(property) {
      _classCallCheck(this, DoubleBE);

      return _super15.call(this, 8, property);
    }
    /** @override */


    _createClass(DoubleBE, [{
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        return b.readDoubleBE(offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        b.writeDoubleBE(src, offset);
        return 8;
      }
    }]);

    return DoubleBE;
  }(Layout);
  /**
   * Represent a contiguous sequence of a specific layout as an Array.
   *
   * *Factory*: {@link module:Layout.seq|seq}
   *
   * @param {Layout} elementLayout - initializer for {@link
   * Sequence#elementLayout|elementLayout}.
   *
   * @param {(Number|ExternalLayout)} count - initializer for {@link
   * Sequence#count|count}.  The parameter must be either a positive
   * integer or an instance of {@link ExternalLayout}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Sequence = /*#__PURE__*/function (_Layout14) {
    _inherits(Sequence, _Layout14);

    var _super16 = _createSuper(Sequence);

    function Sequence(elementLayout, count, property) {
      var _this7;

      _classCallCheck(this, Sequence);

      if (!(elementLayout instanceof Layout)) {
        throw new TypeError('elementLayout must be a Layout');
      }

      if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {
        throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');
      }

      var span = -1;

      if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {
        span = count * elementLayout.span;
      }

      _this7 = _super16.call(this, span, property);
      /** The layout for individual elements of the sequence. */

      _this7.elementLayout = elementLayout;
      /** The number of elements in the sequence.
       *
       * This will be either a non-negative integer or an instance of
       * {@link ExternalLayout} for which {@link
       * ExternalLayout#isCount|isCount()} is `true`. */

      _this7.count = count;
      return _this7;
    }
    /** @override */


    _createClass(Sequence, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }

        if (undefined === offset) {
          offset = 0;
        }

        var span = 0;
        var count = this.count;

        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset);
        }

        if (0 < this.elementLayout.span) {
          span = count * this.elementLayout.span;
        } else {
          var idx = 0;

          while (idx < count) {
            span += this.elementLayout.getSpan(b, offset + span);
            ++idx;
          }
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var rv = [];
        var i = 0;
        var count = this.count;

        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset);
        }

        while (i < count) {
          rv.push(this.elementLayout.decode(b, offset));
          offset += this.elementLayout.getSpan(b, offset);
          i += 1;
        }

        return rv;
      }
      /** Implement {@link Layout#encode|encode} for {@link Sequence}.
       *
       * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
       * the unused space in the buffer is left unchanged.  If `src` is
       * longer than {@link Sequence#count|count} the unneeded elements are
       * ignored.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var elo = this.elementLayout;
        var span = src.reduce(function (span, v) {
          return span + elo.encode(v, b, offset + span);
        }, 0);

        if (this.count instanceof ExternalLayout) {
          this.count.encode(src.length, b, offset);
        }

        return span;
      }
    }]);

    return Sequence;
  }(Layout);
  /**
   * Represent a contiguous sequence of arbitrary layout elements as an
   * Object.
   *
   * *Factory*: {@link module:Layout.struct|struct}
   *
   * **NOTE** The {@link Layout#span|span} of the structure is variable
   * if any layout in {@link Structure#fields|fields} has a variable
   * span.  When {@link Layout#encode|encoding} we must have a value for
   * all variable-length fields, or we wouldn't be able to figure out
   * how much space to use for storage.  We can only identify the value
   * for a field when it has a {@link Layout#property|property}.  As
   * such, although a structure may contain both unnamed fields and
   * variable-length fields, it cannot contain an unnamed
   * variable-length field.
   *
   * @param {Layout[]} fields - initializer for {@link
   * Structure#fields|fields}.  An error is raised if this contains a
   * variable-length field for which a {@link Layout#property|property}
   * is not defined.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @param {Boolean} [decodePrefixes] - initializer for {@link
   * Structure#decodePrefixes|property}.
   *
   * @throws {Error} - if `fields` contains an unnamed variable-length
   * layout.
   *
   * @augments {Layout}
   */


  var Structure = /*#__PURE__*/function (_Layout15) {
    _inherits(Structure, _Layout15);

    var _super17 = _createSuper(Structure);

    function Structure(fields, property, decodePrefixes) {
      var _this8;

      _classCallCheck(this, Structure);

      if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {
        return acc && v instanceof Layout;
      }, true))) {
        throw new TypeError('fields must be array of Layout instances');
      }

      if ('boolean' === typeof property && undefined === decodePrefixes) {
        decodePrefixes = property;
        property = undefined;
      }
      /* Verify absence of unnamed variable-length fields. */


      var _iterator = _createForOfIteratorHelper(fields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fd = _step.value;

          if (0 > fd.span && undefined === fd.property) {
            throw new Error('fields cannot contain unnamed variable-length layout');
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var span = -1;

      try {
        span = fields.reduce(function (span, fd) {
          return span + fd.getSpan();
        }, 0);
      } catch (e) {}

      _this8 = _super17.call(this, span, property);
      /** The sequence of {@link Layout} values that comprise the
       * structure.
       *
       * The individual elements need not be the same type, and may be
       * either scalar or aggregate layouts.  If a member layout leaves
       * its {@link Layout#property|property} undefined the
       * corresponding region of the buffer associated with the element
       * will not be mutated.
       *
       * @type {Layout[]} */

      _this8.fields = fields;
      /** Control behavior of {@link Layout#decode|decode()} given short
       * buffers.
       *
       * In some situations a structure many be extended with additional
       * fields over time, with older installations providing only a
       * prefix of the full structure.  If this property is `true`
       * decoding will accept those buffers and leave subsequent fields
       * undefined, as long as the buffer ends at a field boundary.
       * Defaults to `false`. */

      _this8.decodePrefixes = !!decodePrefixes;
      return _this8;
    }
    /** @override */


    _createClass(Structure, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }

        if (undefined === offset) {
          offset = 0;
        }

        var span = 0;

        try {
          span = this.fields.reduce(function (span, fd) {
            var fsp = fd.getSpan(b, offset);
            offset += fsp;
            return span + fsp;
          }, 0);
        } catch (e) {
          throw new RangeError('indeterminate span');
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var dest = this.makeDestinationObject();

        var _iterator2 = _createForOfIteratorHelper(this.fields),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var fd = _step2.value;

            if (undefined !== fd.property) {
              dest[fd.property] = fd.decode(b, offset);
            }

            offset += fd.getSpan(b, offset);

            if (this.decodePrefixes && b.length === offset) {
              break;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var firstOffset = offset;
        var lastOffset = 0;
        var lastWrote = 0;

        var _iterator3 = _createForOfIteratorHelper(this.fields),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var fd = _step3.value;
            var span = fd.span;
            lastWrote = 0 < span ? span : 0;

            if (undefined !== fd.property) {
              var fv = src[fd.property];

              if (undefined !== fv) {
                lastWrote = fd.encode(fv, b, offset);

                if (0 > span) {
                  /* Read the as-encoded span, which is not necessarily the
                   * same as what we wrote. */
                  span = fd.getSpan(b, offset);
                }
              }
            }

            lastOffset = offset;
            offset += span;
          }
          /* Use (lastOffset + lastWrote) instead of offset because the last
           * item may have had a dynamic length and we don't want to include
           * the padding between it and the end of the space reserved for
           * it. */

        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return lastOffset + lastWrote - firstOffset;
      }
      /** @override */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        var dest = this.makeDestinationObject();

        var _iterator4 = _createForOfIteratorHelper(this.fields),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var fd = _step4.value;

            if (undefined !== fd.property && 0 < values.length) {
              dest[fd.property] = values.shift();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return dest;
      }
      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */

    }, {
      key: "layoutFor",
      value: function layoutFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var _iterator5 = _createForOfIteratorHelper(this.fields),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var fd = _step5.value;

            if (fd.property === property) {
              return fd;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */

    }, {
      key: "offsetOf",
      value: function offsetOf(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var offset = 0;

        var _iterator6 = _createForOfIteratorHelper(this.fields),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var fd = _step6.value;

            if (fd.property === property) {
              return offset;
            }

            if (0 > fd.span) {
              offset = -1;
            } else if (0 <= offset) {
              offset += fd.span;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
    }]);

    return Structure;
  }(Layout);
  /**
   * An object that can provide a {@link
   * Union#discriminator|discriminator} API for {@link Union}.
   *
   * **NOTE** This is an abstract base class; you can create instances
   * if it amuses you, but they won't support the {@link
   * UnionDiscriminator#encode|encode} or {@link
   * UnionDiscriminator#decode|decode} functions.
   *
   * @param {string} [property] - Default for {@link
   * UnionDiscriminator#property|property}.
   *
   * @abstract
   */


  var UnionDiscriminator = /*#__PURE__*/function () {
    function UnionDiscriminator(property) {
      _classCallCheck(this, UnionDiscriminator);

      /** The {@link Layout#property|property} to be used when the
       * discriminator is referenced in isolation (generally when {@link
       * Union#decode|Union decode} cannot delegate to a specific
       * variant). */
      this.property = property;
    }
    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
     *
     * The implementation of this method need not reference the buffer if
     * variant information is available through other means. */


    _createClass(UnionDiscriminator, [{
      key: "decode",
      value: function decode() {
        throw new Error('UnionDiscriminator is abstract');
      }
      /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
       *
       * The implementation of this method need not store the value if
       * variant information is maintained through other means. */

    }, {
      key: "encode",
      value: function encode() {
        throw new Error('UnionDiscriminator is abstract');
      }
    }]);

    return UnionDiscriminator;
  }();
  /**
   * An object that can provide a {@link
   * UnionDiscriminator|discriminator API} for {@link Union} using an
   * unsigned integral {@link Layout} instance located either inside or
   * outside the union.
   *
   * @param {ExternalLayout} layout - initializes {@link
   * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link
   * ExternalLayout#isCount|isCount()}.
   *
   * @param {string} [property] - Default for {@link
   * UnionDiscriminator#property|property}, superseding the property
   * from `layout`, but defaulting to `variant` if neither `property`
   * nor layout provide a property name.
   *
   * @augments {UnionDiscriminator}
   */


  var UnionLayoutDiscriminator = /*#__PURE__*/function (_UnionDiscriminator) {
    _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);

    var _super18 = _createSuper(UnionLayoutDiscriminator);

    function UnionLayoutDiscriminator(layout, property) {
      var _this9;

      _classCallCheck(this, UnionLayoutDiscriminator);

      if (!(layout instanceof ExternalLayout && layout.isCount())) {
        throw new TypeError('layout must be an unsigned integer ExternalLayout');
      }

      _this9 = _super18.call(this, property || layout.property || 'variant');
      /** The {@link ExternalLayout} used to access the discriminator
       * value. */

      _this9.layout = layout;
      return _this9;
    }
    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */


    _createClass(UnionLayoutDiscriminator, [{
      key: "decode",
      value: function decode(b, offset) {
        return this.layout.decode(b, offset);
      }
      /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        return this.layout.encode(src, b, offset);
      }
    }]);

    return UnionLayoutDiscriminator;
  }(UnionDiscriminator);
  /**
   * Represent any number of span-compatible layouts.
   *
   * *Factory*: {@link module:Layout.union|union}
   *
   * If the union has a {@link Union#defaultLayout|default layout} that
   * layout must have a non-negative {@link Layout#span|span}.  The span
   * of a fixed-span union includes its {@link
   * Union#discriminator|discriminator} if the variant is a {@link
   * Union#usesPrefixDiscriminator|prefix of the union}, plus the span
   * of its {@link Union#defaultLayout|default layout}.
   *
   * If the union does not have a default layout then the encoded span
   * of the union depends on the encoded span of its variant (which may
   * be fixed or variable).
   *
   * {@link VariantLayout#layout|Variant layout}s are added through
   * {@link Union#addVariant|addVariant}.  If the union has a default
   * layout, the span of the {@link VariantLayout#layout|layout
   * contained by the variant} must not exceed the span of the {@link
   * Union#defaultLayout|default layout} (minus the span of a {@link
   * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The
   * span of the variant will equal the span of the union itself.
   *
   * The variant for a buffer can only be identified from the {@link
   * Union#discriminator|discriminator} {@link
   * UnionDiscriminator#property|property} (in the case of the {@link
   * Union#defaultLayout|default layout}), or by using {@link
   * Union#getVariant|getVariant} and examining the resulting {@link
   * VariantLayout} instance.
   *
   * A variant compatible with a JavaScript object can be identified
   * using {@link Union#getSourceVariant|getSourceVariant}.
   *
   * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to
   * identify the layout used to interpret the union contents.  The
   * parameter must be an instance of {@link UnionDiscriminator}, an
   * {@link ExternalLayout} that satisfies {@link
   * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link
   * UIntBE}).  When a non-external layout element is passed the layout
   * appears at the start of the union.  In all cases the (synthesized)
   * {@link UnionDiscriminator} instance is recorded as {@link
   * Union#discriminator|discriminator}.
   *
   * @param {(Layout|null)} defaultLayout - initializer for {@link
   * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.
   * If `null` there is no default layout: the union has data-dependent
   * length and attempts to decode or encode unrecognized variants will
   * throw an exception.  A {@link Layout} instance must have a
   * non-negative {@link Layout#span|span}, and if it lacks a {@link
   * Layout#property|property} the {@link
   * Union#defaultLayout|defaultLayout} will be a {@link
   * Layout#replicate|replica} with property `content`.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Union = /*#__PURE__*/function (_Layout16) {
    _inherits(Union, _Layout16);

    var _super19 = _createSuper(Union);

    function Union(discr, defaultLayout, property) {
      var _this10;

      _classCallCheck(this, Union);

      var upv = discr instanceof UInt || discr instanceof UIntBE;

      if (upv) {
        discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));
      } else if (discr instanceof ExternalLayout && discr.isCount()) {
        discr = new UnionLayoutDiscriminator(discr);
      } else if (!(discr instanceof UnionDiscriminator)) {
        throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');
      }

      if (undefined === defaultLayout) {
        defaultLayout = null;
      }

      if (!(null === defaultLayout || defaultLayout instanceof Layout)) {
        throw new TypeError('defaultLayout must be null or a Layout');
      }

      if (null !== defaultLayout) {
        if (0 > defaultLayout.span) {
          throw new Error('defaultLayout must have constant span');
        }

        if (undefined === defaultLayout.property) {
          defaultLayout = defaultLayout.replicate('content');
        }
      }
      /* The union span can be estimated only if there's a default
       * layout.  The union spans its default layout, plus any prefix
       * variant layout.  By construction both layouts, if present, have
       * non-negative span. */


      var span = -1;

      if (defaultLayout) {
        span = defaultLayout.span;

        if (0 <= span && upv) {
          span += discr.layout.span;
        }
      }

      _this10 = _super19.call(this, span, property);
      /** The interface for the discriminator value in isolation.
       *
       * This a {@link UnionDiscriminator} either passed to the
       * constructor or synthesized from the `discr` constructor
       * argument.  {@link
       * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be
       * `true` iff the `discr` parameter was a non-offset {@link
       * Layout} instance. */

      _this10.discriminator = discr;
      /** `true` if the {@link Union#discriminator|discriminator} is the
       * first field in the union.
       *
       * If `false` the discriminator is obtained from somewhere
       * else. */

      _this10.usesPrefixDiscriminator = upv;
      /** The layout for non-discriminator content when the value of the
       * discriminator is not recognized.
       *
       * This is the value passed to the constructor.  It is
       * structurally equivalent to the second component of {@link
       * Union#layout|layout} but may have a different property
       * name. */

      _this10.defaultLayout = defaultLayout;
      /** A registry of allowed variants.
       *
       * The keys are unsigned integers which should be compatible with
       * {@link Union.discriminator|discriminator}.  The property value
       * is the corresponding {@link VariantLayout} instances assigned
       * to this union by {@link Union#addVariant|addVariant}.
       *
       * **NOTE** The registry remains mutable so that variants can be
       * {@link Union#addVariant|added} at any time.  Users should not
       * manipulate the content of this property. */

      _this10.registry = {};
      /* Private variable used when invoking getSourceVariant */

      var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));
      /** Function to infer the variant selected by a source object.
       *
       * Defaults to {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may
       * be overridden using {@link
       * Union#configGetSourceVariant|configGetSourceVariant}.
       *
       * @param {Object} src - as with {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
       *
       * @returns {(undefined|VariantLayout)} The default variant
       * (`undefined`) or first registered variant that uses a property
       * available in `src`. */


      _this10.getSourceVariant = function (src) {
        return boundGetSourceVariant(src);
      };
      /** Function to override the implementation of {@link
       * Union#getSourceVariant|getSourceVariant}.
       *
       * Use this if the desired variant cannot be identified using the
       * algorithm of {@link
       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.
       *
       * **NOTE** The provided function will be invoked bound to this
       * Union instance, providing local access to {@link
       * Union#registry|registry}.
       *
       * @param {Function} gsv - a function that follows the API of
       * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */


      _this10.configGetSourceVariant = function (gsv) {
        boundGetSourceVariant = gsv.bind(this);
      };

      return _this10;
    }
    /** @override */


    _createClass(Union, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }

        if (undefined === offset) {
          offset = 0;
        }
        /* Default layouts always have non-negative span, so we don't have
         * one and we have to recognize the variant which will in turn
         * determine the span. */


        var vlo = this.getVariant(b, offset);

        if (!vlo) {
          throw new Error('unable to determine span for unrecognized variant');
        }

        return vlo.getSpan(b, offset);
      }
      /**
       * Method to infer a registered Union variant compatible with `src`.
       *
       * The first satisified rule in the following sequence defines the
       * return value:
       * * If `src` has properties matching the Union discriminator and
       *   the default layout, `undefined` is returned regardless of the
       *   value of the discriminator property (this ensures the default
       *   layout will be used);
       * * If `src` has a property matching the Union discriminator, the
       *   value of the discriminator identifies a registered variant, and
       *   either (a) the variant has no layout, or (b) `src` has the
       *   variant's property, then the variant is returned (because the
       *   source satisfies the constraints of the variant it identifies);
       * * If `src` does not have a property matching the Union
       *   discriminator, but does have a property matching a registered
       *   variant, then the variant is returned (because the source
       *   matches a variant without an explicit conflict);
       * * An error is thrown (because we either can't identify a variant,
       *   or we were explicitly told the variant but can't satisfy it).
       *
       * @param {Object} src - an object presumed to be compatible with
       * the content of the Union.
       *
       * @return {(undefined|VariantLayout)} - as described above.
       *
       * @throws {Error} - if `src` cannot be associated with a default or
       * registered variant.
       */

    }, {
      key: "defaultGetSourceVariant",
      value: function defaultGetSourceVariant(src) {
        if (src.hasOwnProperty(this.discriminator.property)) {
          if (this.defaultLayout && src.hasOwnProperty(this.defaultLayout.property)) {
            return undefined;
          }

          var vlo = this.registry[src[this.discriminator.property]];

          if (vlo && (!vlo.layout || src.hasOwnProperty(vlo.property))) {
            return vlo;
          }
        } else {
          for (var tag in this.registry) {
            var _vlo = this.registry[tag];

            if (src.hasOwnProperty(_vlo.property)) {
              return _vlo;
            }
          }
        }

        throw new Error('unable to infer src variant');
      }
      /** Implement {@link Layout#decode|decode} for {@link Union}.
       *
       * If the variant is {@link Union#addVariant|registered} the return
       * value is an instance of that variant, with no explicit
       * discriminator.  Otherwise the {@link Union#defaultLayout|default
       * layout} is used to decode the content. */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var dest;
        var dlo = this.discriminator;
        var discr = dlo.decode(b, offset);
        var clo = this.registry[discr];

        if (undefined === clo) {
          var contentOffset = 0;
          clo = this.defaultLayout;

          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }

          dest = this.makeDestinationObject();
          dest[dlo.property] = discr;
          dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);
        } else {
          dest = clo.decode(b, offset);
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Union}.
       *
       * This API assumes the `src` object is consistent with the union's
       * {@link Union#defaultLayout|default layout}.  To encode variants
       * use the appropriate variant-specific {@link VariantLayout#encode}
       * method. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var vlo = this.getSourceVariant(src);

        if (undefined === vlo) {
          var dlo = this.discriminator;
          var clo = this.defaultLayout;
          var contentOffset = 0;

          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }

          dlo.encode(src[dlo.property], b, offset);
          return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);
        }

        return vlo.encode(src, b, offset);
      }
      /** Register a new variant structure within a union.  The newly
       * created variant is returned.
       *
       * @param {Number} variant - initializer for {@link
       * VariantLayout#variant|variant}.
       *
       * @param {Layout} layout - initializer for {@link
       * VariantLayout#layout|layout}.
       *
       * @param {String} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {VariantLayout} */

    }, {
      key: "addVariant",
      value: function addVariant(variant, layout, property) {
        var rv = new VariantLayout(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
      }
      /**
       * Get the layout associated with a registered variant.
       *
       * If `vb` does not produce a registered variant the function returns
       * `undefined`.
       *
       * @param {(Number|Buffer)} vb - either the variant number, or a
       * buffer from which the discriminator is to be read.
       *
       * @param {Number} offset - offset into `vb` for the start of the
       * union.  Used only when `vb` is an instance of {Buffer}.
       *
       * @return {({VariantLayout}|undefined)}
       */

    }, {
      key: "getVariant",
      value: function getVariant(vb, offset) {
        var variant = vb;

        if (Buffer$1.isBuffer(vb)) {
          if (undefined === offset) {
            offset = 0;
          }

          variant = this.discriminator.decode(vb, offset);
        }

        return this.registry[variant];
      }
    }]);

    return Union;
  }(Layout);
  /**
   * Represent a specific variant within a containing union.
   *
   * **NOTE** The {@link Layout#span|span} of the variant may include
   * the span of the {@link Union#discriminator|discriminator} used to
   * identify it, but values read and written using the variant strictly
   * conform to the content of {@link VariantLayout#layout|layout}.
   *
   * **NOTE** User code should not invoke this constructor directly.  Use
   * the union {@link Union#addVariant|addVariant} helper method.
   *
   * @param {Union} union - initializer for {@link
   * VariantLayout#union|union}.
   *
   * @param {Number} variant - initializer for {@link
   * VariantLayout#variant|variant}.
   *
   * @param {Layout} [layout] - initializer for {@link
   * VariantLayout#layout|layout}.  If absent the variant carries no
   * data.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.  Unlike many other layouts, variant
   * layouts normally include a property name so they can be identified
   * within their containing {@link Union}.  The property identifier may
   * be absent only if `layout` is is absent.
   *
   * @augments {Layout}
   */


  var VariantLayout = /*#__PURE__*/function (_Layout17) {
    _inherits(VariantLayout, _Layout17);

    var _super20 = _createSuper(VariantLayout);

    function VariantLayout(union, variant, layout, property) {
      var _this11;

      _classCallCheck(this, VariantLayout);

      if (!(union instanceof Union)) {
        throw new TypeError('union must be a Union');
      }

      if (!Number.isInteger(variant) || 0 > variant) {
        throw new TypeError('variant must be a (non-negative) integer');
      }

      if ('string' === typeof layout && undefined === property) {
        property = layout;
        layout = null;
      }

      if (layout) {
        if (!(layout instanceof Layout)) {
          throw new TypeError('layout must be a Layout');
        }

        if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {
          throw new Error('variant span exceeds span of containing union');
        }

        if ('string' !== typeof property) {
          throw new TypeError('variant must have a String property');
        }
      }

      var span = union.span;

      if (0 > union.span) {
        span = layout ? layout.span : 0;

        if (0 <= span && union.usesPrefixDiscriminator) {
          span += union.discriminator.layout.span;
        }
      }

      _this11 = _super20.call(this, span, property);
      /** The {@link Union} to which this variant belongs. */

      _this11.union = union;
      /** The unsigned integral value identifying this variant within
       * the {@link Union#discriminator|discriminator} of the containing
       * union. */

      _this11.variant = variant;
      /** The {@link Layout} to be used when reading/writing the
       * non-discriminator part of the {@link
       * VariantLayout#union|union}.  If `null` the variant carries no
       * data. */

      _this11.layout = layout || null;
      return _this11;
    }
    /** @override */


    _createClass(VariantLayout, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (0 <= this.span) {
          /* Will be equal to the containing union span if that is not
           * variable. */
          return this.span;
        }

        if (undefined === offset) {
          offset = 0;
        }

        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        /* Span is defined solely by the variant (and prefix discriminator) */


        return contentOffset + this.layout.getSpan(b, offset + contentOffset);
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        var dest = this.makeDestinationObject();

        if (undefined === offset) {
          offset = 0;
        }

        if (this !== this.union.getVariant(b, offset)) {
          throw new Error('variant mismatch');
        }

        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }

        if (this.layout) {
          dest[this.property] = this.layout.decode(b, offset + contentOffset);
        } else if (this.property) {
          dest[this.property] = true;
        } else if (this.union.usesPrefixDiscriminator) {
          dest[this.union.discriminator.property] = this.variant;
        }

        return dest;
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var contentOffset = 0;

        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }

        if (this.layout && !src.hasOwnProperty(this.property)) {
          throw new TypeError('variant lacks property ' + this.property);
        }

        this.union.discriminator.encode(this.variant, b, offset);
        var span = contentOffset;

        if (this.layout) {
          this.layout.encode(src[this.property], b, offset + contentOffset);
          span += this.layout.getSpan(b, offset + contentOffset);

          if (0 <= this.union.span && span > this.union.span) {
            throw new Error('encoded variant overruns containing union');
          }
        }

        return span;
      }
      /** Delegate {@link Layout#fromArray|fromArray} to {@link
       * VariantLayout#layout|layout}. */

    }, {
      key: "fromArray",
      value: function fromArray(values) {
        if (this.layout) {
          return this.layout.fromArray(values);
        }
      }
    }]);

    return VariantLayout;
  }(Layout);
  /** JavaScript chose to define bitwise operations as operating on
   * signed 32-bit values in 2's complement form, meaning any integer
   * with bit 31 set is going to look negative.  For right shifts that's
   * not a problem, because `>>>` is a logical shift, but for every
   * other bitwise operator we have to compensate for possible negative
   * results. */


  function fixBitwiseResult(v) {
    if (0 > v) {
      v += 0x100000000;
    }

    return v;
  }
  /**
   * Contain a sequence of bit fields as an unsigned integer.
   *
   * *Factory*: {@link module:Layout.bits|bits}
   *
   * This is a container element; within it there are {@link BitField}
   * instances that provide the extracted properties.  The container
   * simply defines the aggregate representation and its bit ordering.
   * The representation is an object containing properties with numeric
   * or {@link Boolean} values.
   *
   * {@link BitField}s are added with the {@link
   * BitStructure#addField|addField} and {@link
   * BitStructure#addBoolean|addBoolean} methods.

   * @param {Layout} word - initializer for {@link
   * BitStructure#word|word}.  The parameter must be an instance of
   * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.
   *
   * @param {bool} [msb] - `true` if the bit numbering starts at the
   * most significant bit of the containing word; `false` (default) if
   * it starts at the least significant bit of the containing word.  If
   * the parameter at this position is a string and `property` is
   * `undefined` the value of this argument will instead be used as the
   * value of `property`.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var BitStructure = /*#__PURE__*/function (_Layout18) {
    _inherits(BitStructure, _Layout18);

    var _super21 = _createSuper(BitStructure);

    function BitStructure(word, msb, property) {
      var _this12;

      _classCallCheck(this, BitStructure);

      if (!(word instanceof UInt || word instanceof UIntBE)) {
        throw new TypeError('word must be a UInt or UIntBE layout');
      }

      if ('string' === typeof msb && undefined === property) {
        property = msb;
        msb = undefined;
      }

      if (4 < word.span) {
        throw new RangeError('word cannot exceed 32 bits');
      }

      _this12 = _super21.call(this, word.span, property);
      /** The layout used for the packed value.  {@link BitField}
       * instances are packed sequentially depending on {@link
       * BitStructure#msb|msb}. */

      _this12.word = word;
      /** Whether the bit sequences are packed starting at the most
       * significant bit growing down (`true`), or the least significant
       * bit growing up (`false`).
       *
       * **NOTE** Regardless of this value, the least significant bit of
       * any {@link BitField} value is the least significant bit of the
       * corresponding section of the packed value. */

      _this12.msb = !!msb;
      /** The sequence of {@link BitField} layouts that comprise the
       * packed structure.
       *
       * **NOTE** The array remains mutable to allow fields to be {@link
       * BitStructure#addField|added} after construction.  Users should
       * not manipulate the content of this property.*/

      _this12.fields = [];
      /* Storage for the value.  Capture a variable instead of using an
       * instance property because we don't want anything to change the
       * value without going through the mutator. */

      var value = 0;

      _this12._packedSetValue = function (v) {
        value = fixBitwiseResult(v);
        return this;
      };

      _this12._packedGetValue = function () {
        return value;
      };

      return _this12;
    }
    /** @override */


    _createClass(BitStructure, [{
      key: "decode",
      value: function decode(b, offset) {
        var dest = this.makeDestinationObject();

        if (undefined === offset) {
          offset = 0;
        }

        var value = this.word.decode(b, offset);

        this._packedSetValue(value);

        var _iterator7 = _createForOfIteratorHelper(this.fields),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var fd = _step7.value;

            if (undefined !== fd.property) {
              dest[fd.property] = fd.decode(value);
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the packed
       * value is left unmodified.  Unused bits are also left unmodified. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var value = this.word.decode(b, offset);

        this._packedSetValue(value);

        var _iterator8 = _createForOfIteratorHelper(this.fields),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var fd = _step8.value;

            if (undefined !== fd.property) {
              var fv = src[fd.property];

              if (undefined !== fv) {
                fd.encode(fv);
              }
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        return this.word.encode(this._packedGetValue(), b, offset);
      }
      /** Register a new bitfield with a containing bit structure.  The
       * resulting bitfield is returned.
       *
       * @param {Number} bits - initializer for {@link BitField#bits|bits}.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {BitField} */

    }, {
      key: "addField",
      value: function addField(bits, property) {
        var bf = new BitField(this, bits, property);
        this.fields.push(bf);
        return bf;
      }
      /** As with {@link BitStructure#addField|addField} for single-bit
       * fields with `boolean` value representation.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {Boolean} */

    }, {
      key: "addBoolean",
      value: function addBoolean(property) {
        // This is my Boolean, not the Javascript one.
        // eslint-disable-next-line no-new-wrappers
        var bf = new Boolean$1(this, property);
        this.fields.push(bf);
        return bf;
      }
      /**
       * Get access to the bit field for a given property.
       *
       * @param {String} property - the bit field of interest.
       *
       * @return {BitField} - the field associated with `property`, or
       * undefined if there is no such property.
       */

    }, {
      key: "fieldFor",
      value: function fieldFor(property) {
        if ('string' !== typeof property) {
          throw new TypeError('property must be string');
        }

        var _iterator9 = _createForOfIteratorHelper(this.fields),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var fd = _step9.value;

            if (fd.property === property) {
              return fd;
            }
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
    }]);

    return BitStructure;
  }(Layout);
  /**
   * Represent a sequence of bits within a {@link BitStructure}.
   *
   * All bit field values are represented as unsigned integers.
   *
   * **NOTE** User code should not invoke this constructor directly.
   * Use the container {@link BitStructure#addField|addField} helper
   * method.
   *
   * **NOTE** BitField instances are not instances of {@link Layout}
   * since {@link Layout#span|span} measures 8-bit units.
   *
   * @param {BitStructure} container - initializer for {@link
   * BitField#container|container}.
   *
   * @param {Number} bits - initializer for {@link BitField#bits|bits}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   */


  var BitField = /*#__PURE__*/function () {
    function BitField(container, bits, property) {
      _classCallCheck(this, BitField);

      if (!(container instanceof BitStructure)) {
        throw new TypeError('container must be a BitStructure');
      }

      if (!Number.isInteger(bits) || 0 >= bits) {
        throw new TypeError('bits must be positive integer');
      }

      var totalBits = 8 * container.span;
      var usedBits = container.fields.reduce(function (sum, fd) {
        return sum + fd.bits;
      }, 0);

      if (bits + usedBits > totalBits) {
        throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');
      }
      /** The {@link BitStructure} instance to which this bit field
       * belongs. */


      this.container = container;
      /** The span of this value in bits. */

      this.bits = bits;
      /** A mask of {@link BitField#bits|bits} bits isolating value bits
       * that fit within the field.
       *
       * That is, it masks a value that has not yet been shifted into
       * position within its containing packed integer. */

      this.valueMask = (1 << bits) - 1;

      if (32 === bits) {
        // shifted value out of range
        this.valueMask = 0xFFFFFFFF;
      }
      /** The offset of the value within the containing packed unsigned
       * integer.  The least significant bit of the packed value is at
       * offset zero, regardless of bit ordering used. */


      this.start = usedBits;

      if (this.container.msb) {
        this.start = totalBits - usedBits - bits;
      }
      /** A mask of {@link BitField#bits|bits} isolating the field value
       * within the containing packed unsigned integer. */


      this.wordMask = fixBitwiseResult(this.valueMask << this.start);
      /** The property name used when this bitfield is represented in an
       * Object.
       *
       * Intended to be functionally equivalent to {@link
       * Layout#property}.
       *
       * If left undefined the corresponding span of bits will be
       * treated as padding: it will not be mutated by {@link
       * Layout#encode|encode} nor represented as a property in the
       * decoded Object. */

      this.property = property;
    }
    /** Store a value into the corresponding subsequence of the containing
     * bit field. */


    _createClass(BitField, [{
      key: "decode",
      value: function decode() {
        var word = this.container._packedGetValue();

        var wordValue = fixBitwiseResult(word & this.wordMask);
        var value = wordValue >>> this.start;
        return value;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field.
       *
       * **NOTE** This is not a specialization of {@link
       * Layout#encode|Layout.encode} and there is no return value. */

    }, {
      key: "encode",
      value: function encode(value) {
        if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {
          throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);
        }

        var word = this.container._packedGetValue();

        var wordValue = fixBitwiseResult(value << this.start);

        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);
      }
    }]);

    return BitField;
  }();
  /**
   * Represent a single bit within a {@link BitStructure} as a
   * JavaScript boolean.
   *
   * **NOTE** User code should not invoke this constructor directly.
   * Use the container {@link BitStructure#addBoolean|addBoolean} helper
   * method.
   *
   * @param {BitStructure} container - initializer for {@link
   * BitField#container|container}.
   *
   * @param {string} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {BitField}
   */

  /* eslint-disable no-extend-native */


  var Boolean$1 = /*#__PURE__*/function (_BitField) {
    _inherits(Boolean, _BitField);

    var _super22 = _createSuper(Boolean);

    function Boolean(container, property) {
      _classCallCheck(this, Boolean);

      return _super22.call(this, container, 1, property);
    }
    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
     *
     * @returns {boolean} */


    _createClass(Boolean, [{
      key: "decode",
      value: function decode(b, offset) {
        return !!BitField.prototype.decode.call(this, b, offset);
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(value) {
        if ('boolean' === typeof value) {
          // BitField requires integer values
          value = +value;
        }

        return BitField.prototype.encode.call(this, value);
      }
    }]);

    return Boolean;
  }(BitField);
  /* eslint-enable no-extend-native */

  /**
   * Contain a fixed-length block of arbitrary data, represented as a
   * Buffer.
   *
   * *Factory*: {@link module:Layout.blob|blob}
   *
   * @param {(Number|ExternalLayout)} length - initializes {@link
   * Blob#length|length}.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Blob = /*#__PURE__*/function (_Layout19) {
    _inherits(Blob, _Layout19);

    var _super23 = _createSuper(Blob);

    function Blob(length, property) {
      var _this13;

      _classCallCheck(this, Blob);

      if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {
        throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');
      }

      var span = -1;

      if (!(length instanceof ExternalLayout)) {
        span = length;
      }

      _this13 = _super23.call(this, span, property);
      /** The number of bytes in the blob.
       *
       * This may be a non-negative integer, or an instance of {@link
       * ExternalLayout} that satisfies {@link
       * ExternalLayout#isCount|isCount()}. */

      _this13.length = length;
      return _this13;
    }
    /** @override */


    _createClass(Blob, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        var span = this.span;

        if (0 > span) {
          span = this.length.decode(b, offset);
        }

        return span;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset) {
        if (undefined === offset) {
          offset = 0;
        }

        var span = this.span;

        if (0 > span) {
          span = this.length.decode(b, offset);
        }

        return b.slice(offset, offset + span);
      }
      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        var span = this.length;

        if (this.length instanceof ExternalLayout) {
          span = src.length;
        }

        if (!(Buffer$1.isBuffer(src) && span === src.length)) {
          throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Buffer as src');
        }

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }

        b.write(src.toString('hex'), offset, span, 'hex');

        if (this.length instanceof ExternalLayout) {
          this.length.encode(span, b, offset);
        }

        return span;
      }
    }]);

    return Blob;
  }(Layout);
  /**
   * Contain a `NUL`-terminated UTF8 string.
   *
   * *Factory*: {@link module:Layout.cstr|cstr}
   *
   * **NOTE** Any UTF8 string that incorporates a zero-valued byte will
   * not be correctly decoded by this layout.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var CString = /*#__PURE__*/function (_Layout20) {
    _inherits(CString, _Layout20);

    var _super24 = _createSuper(CString);

    function CString(property) {
      _classCallCheck(this, CString);

      return _super24.call(this, -1, property);
    }
    /** @override */


    _createClass(CString, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (!Buffer$1.isBuffer(b)) {
          throw new TypeError('b must be a Buffer');
        }

        if (undefined === offset) {
          offset = 0;
        }

        var idx = offset;

        while (idx < b.length && 0 !== b[idx]) {
          idx += 1;
        }

        return 1 + idx - offset;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset, dest) {
        if (undefined === offset) {
          offset = 0;
        }

        var span = this.getSpan(b, offset);
        return b.slice(offset, offset + span - 1).toString('utf-8');
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */


        if ('string' !== typeof src) {
          src = src.toString();
        }

        var srcb = new Buffer$1(src, 'utf8');
        var span = srcb.length;

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }

        srcb.copy(b, offset);
        b[offset + span] = 0;
        return span + 1;
      }
    }]);

    return CString;
  }(Layout);
  /**
   * Contain a UTF8 string with implicit length.
   *
   * *Factory*: {@link module:Layout.utf8|utf8}
   *
   * **NOTE** Because the length is implicit in the size of the buffer
   * this layout should be used only in isolation, or in a situation
   * where the length can be expressed by operating on a slice of the
   * containing buffer.
   *
   * @param {Number} [maxSpan] - the maximum length allowed for encoded
   * string content.  If not provided there is no bound on the allowed
   * content.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var UTF8 = /*#__PURE__*/function (_Layout21) {
    _inherits(UTF8, _Layout21);

    var _super25 = _createSuper(UTF8);

    function UTF8(maxSpan, property) {
      var _this14;

      _classCallCheck(this, UTF8);

      if ('string' === typeof maxSpan && undefined === property) {
        property = maxSpan;
        maxSpan = undefined;
      }

      if (undefined === maxSpan) {
        maxSpan = -1;
      } else if (!Number.isInteger(maxSpan)) {
        throw new TypeError('maxSpan must be an integer');
      }

      _this14 = _super25.call(this, -1, property);
      /** The maximum span of the layout in bytes.
       *
       * Positive values are generally expected.  Zero is abnormal.
       * Attempts to encode or decode a value that exceeds this length
       * will throw a `RangeError`.
       *
       * A negative value indicates that there is no bound on the length
       * of the content. */

      _this14.maxSpan = maxSpan;
      return _this14;
    }
    /** @override */


    _createClass(UTF8, [{
      key: "getSpan",
      value: function getSpan(b, offset) {
        if (!Buffer$1.isBuffer(b)) {
          throw new TypeError('b must be a Buffer');
        }

        if (undefined === offset) {
          offset = 0;
        }

        return b.length - offset;
      }
      /** @override */

    }, {
      key: "decode",
      value: function decode(b, offset, dest) {
        if (undefined === offset) {
          offset = 0;
        }

        var span = this.getSpan(b, offset);

        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError('text length exceeds maxSpan');
        }

        return b.slice(offset, offset + span).toString('utf-8');
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        if (undefined === offset) {
          offset = 0;
        }
        /* Must force this to a string, lest it be a number and the
         * "utf8-encoding" below actually allocate a buffer of length
         * src */


        if ('string' !== typeof src) {
          src = src.toString();
        }

        var srcb = new Buffer$1(src, 'utf8');
        var span = srcb.length;

        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError('text length exceeds maxSpan');
        }

        if (offset + span > b.length) {
          throw new RangeError('encoding overruns Buffer');
        }

        srcb.copy(b, offset);
        return span;
      }
    }]);

    return UTF8;
  }(Layout);
  /**
   * Contain a constant value.
   *
   * This layout may be used in cases where a JavaScript value can be
   * inferred without an expression in the binary encoding.  An example
   * would be a {@link VariantLayout|variant layout} where the content
   * is implied by the union {@link Union#discriminator|discriminator}.
   *
   * @param {Object|Number|String} value - initializer for {@link
   * Constant#value|value}.  If the value is an object (or array) and
   * the application intends the object to remain unchanged regardless
   * of what is done to values decoded by this layout, the value should
   * be frozen prior passing it to this constructor.
   *
   * @param {String} [property] - initializer for {@link
   * Layout#property|property}.
   *
   * @augments {Layout}
   */


  var Constant = /*#__PURE__*/function (_Layout22) {
    _inherits(Constant, _Layout22);

    var _super26 = _createSuper(Constant);

    function Constant(value, property) {
      var _this15;

      _classCallCheck(this, Constant);

      _this15 = _super26.call(this, 0, property);
      /** The value produced by this constant when the layout is {@link
       * Constant#decode|decoded}.
       *
       * Any JavaScript value including `null` and `undefined` is
       * permitted.
       *
       * **WARNING** If `value` passed in the constructor was not
       * frozen, it is possible for users of decoded values to change
       * the content of the value. */

      _this15.value = value;
      return _this15;
    }
    /** @override */


    _createClass(Constant, [{
      key: "decode",
      value: function decode(b, offset, dest) {
        return this.value;
      }
      /** @override */

    }, {
      key: "encode",
      value: function encode(src, b, offset) {
        /* Constants take no space */
        return 0;
      }
    }]);

    return Constant;
  }(Layout);

  Layout$1.ExternalLayout = ExternalLayout;
  Layout$1.GreedyCount = GreedyCount;
  Layout$1.OffsetLayout = OffsetLayout;
  Layout$1.UInt = UInt;
  Layout$1.UIntBE = UIntBE;
  Layout$1.Int = Int;
  Layout$1.IntBE = IntBE;
  Layout$1.Float = Float;
  Layout$1.FloatBE = FloatBE;
  Layout$1.Double = Double;
  Layout$1.DoubleBE = DoubleBE;
  Layout$1.Sequence = Sequence;
  Layout$1.Structure = Structure;
  Layout$1.UnionDiscriminator = UnionDiscriminator;
  Layout$1.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
  Layout$1.Union = Union;
  Layout$1.VariantLayout = VariantLayout;
  Layout$1.BitStructure = BitStructure;
  Layout$1.BitField = BitField;

  Layout$1.Boolean = Boolean$1;

  Layout$1.Blob = Blob;
  Layout$1.CString = CString;
  Layout$1.UTF8 = UTF8;
  Layout$1.Constant = Constant;
  /** Factory for {@link GreedyCount}. */

  Layout$1.greedy = function (elementSpan, property) {
    return new GreedyCount(elementSpan, property);
  };
  /** Factory for {@link OffsetLayout}. */


  Layout$1.offset = function (layout, offset, property) {
    return new OffsetLayout(layout, offset, property);
  };
  /** Factory for {@link UInt|unsigned int layouts} spanning one
   * byte. */


  Layout$1.u8 = function (property) {
    return new UInt(1, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning two bytes. */


  Layout$1.u16 = function (property) {
    return new UInt(2, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning three bytes. */


  Layout$1.u24 = function (property) {
    return new UInt(3, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning four bytes. */


  Layout$1.u32 = function (property) {
    return new UInt(4, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning five bytes. */


  Layout$1.u40 = function (property) {
    return new UInt(5, property);
  };
  /** Factory for {@link UInt|little-endian unsigned int layouts}
   * spanning six bytes. */


  Layout$1.u48 = function (property) {
    return new UInt(6, property);
  };
  /** Factory for {@link NearUInt64|little-endian unsigned int
   * layouts} interpreted as Numbers. */


  Layout$1.nu64 = function (property) {
    return new NearUInt64(property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning two bytes. */


  Layout$1.u16be = function (property) {
    return new UIntBE(2, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning three bytes. */


  Layout$1.u24be = function (property) {
    return new UIntBE(3, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning four bytes. */


  Layout$1.u32be = function (property) {
    return new UIntBE(4, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning five bytes. */


  Layout$1.u40be = function (property) {
    return new UIntBE(5, property);
  };
  /** Factory for {@link UInt|big-endian unsigned int layouts}
   * spanning six bytes. */


  Layout$1.u48be = function (property) {
    return new UIntBE(6, property);
  };
  /** Factory for {@link NearUInt64BE|big-endian unsigned int
   * layouts} interpreted as Numbers. */


  Layout$1.nu64be = function (property) {
    return new NearUInt64BE(property);
  };
  /** Factory for {@link Int|signed int layouts} spanning one
   * byte. */


  Layout$1.s8 = function (property) {
    return new Int(1, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning two bytes. */


  Layout$1.s16 = function (property) {
    return new Int(2, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning three bytes. */


  Layout$1.s24 = function (property) {
    return new Int(3, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning four bytes. */


  Layout$1.s32 = function (property) {
    return new Int(4, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning five bytes. */


  Layout$1.s40 = function (property) {
    return new Int(5, property);
  };
  /** Factory for {@link Int|little-endian signed int layouts}
   * spanning six bytes. */


  Layout$1.s48 = function (property) {
    return new Int(6, property);
  };
  /** Factory for {@link NearInt64|little-endian signed int layouts}
   * interpreted as Numbers. */


  Layout$1.ns64 = function (property) {
    return new NearInt64(property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning two bytes. */


  Layout$1.s16be = function (property) {
    return new IntBE(2, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning three bytes. */


  Layout$1.s24be = function (property) {
    return new IntBE(3, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning four bytes. */


  Layout$1.s32be = function (property) {
    return new IntBE(4, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning five bytes. */


  Layout$1.s40be = function (property) {
    return new IntBE(5, property);
  };
  /** Factory for {@link Int|big-endian signed int layouts}
   * spanning six bytes. */


  Layout$1.s48be = function (property) {
    return new IntBE(6, property);
  };
  /** Factory for {@link NearInt64BE|big-endian signed int layouts}
   * interpreted as Numbers. */


  Layout$1.ns64be = function (property) {
    return new NearInt64BE(property);
  };
  /** Factory for {@link Float|little-endian 32-bit floating point} values. */


  Layout$1.f32 = function (property) {
    return new Float(property);
  };
  /** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */


  Layout$1.f32be = function (property) {
    return new FloatBE(property);
  };
  /** Factory for {@link Double|little-endian 64-bit floating point} values. */


  Layout$1.f64 = function (property) {
    return new Double(property);
  };
  /** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */


  Layout$1.f64be = function (property) {
    return new DoubleBE(property);
  };
  /** Factory for {@link Structure} values. */


  Layout$1.struct = function (fields, property, decodePrefixes) {
    return new Structure(fields, property, decodePrefixes);
  };
  /** Factory for {@link BitStructure} values. */


  Layout$1.bits = function (word, msb, property) {
    return new BitStructure(word, msb, property);
  };
  /** Factory for {@link Sequence} values. */


  Layout$1.seq = function (elementLayout, count, property) {
    return new Sequence(elementLayout, count, property);
  };
  /** Factory for {@link Union} values. */


  Layout$1.union = function (discr, defaultLayout, property) {
    return new Union(discr, defaultLayout, property);
  };
  /** Factory for {@link UnionLayoutDiscriminator} values. */


  Layout$1.unionLayoutDiscriminator = function (layout, property) {
    return new UnionLayoutDiscriminator(layout, property);
  };
  /** Factory for {@link Blob} values. */


  Layout$1.blob = function (length, property) {
    return new Blob(length, property);
  };
  /** Factory for {@link CString} values. */


  Layout$1.cstr = function (property) {
    return new CString(property);
  };
  /** Factory for {@link UTF8} values. */


  Layout$1.utf8 = function (maxSpan, property) {
    return new UTF8(maxSpan, property);
  };
  /** Factory for {@link Constant} values. */


  Layout$1["const"] = function (value, property) {
    return new Constant(value, property);
  };

  var lib = {};

  var bn = {exports: {}};

  (function (module) {
    (function (module, exports) {

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      } // Could use `inherits` module, but don't want to move from single file
      // architecture yet.


      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      } // BN


      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0; // Reduction context

        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }

      if (_typeof(module) === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;

      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$1$1.Buffer;
        }
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (_typeof(number) === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }

        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;

        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);

            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }

        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return; // Reverse the bytes

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');

        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;

        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;

            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }

        return this._strip();
      };

      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index); // '0' - '9'

        if (c >= 48 && c <= 57) {
          return c - 48; // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55; // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);

        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }

        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        } // 24-bits chunks


        var off = 0;
        var j = 0;
        var w;

        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;

          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;

            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);

        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul; // 'a'

          if (c >= 49) {
            b = c - 49 + 0xa; // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa; // '0' - '9'
          } else {
            b = c;
          }

          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }

        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1; // Find length of limb in base

        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }

        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;

        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);

          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);

        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }

        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }

        return this;
      }; // Remove leading `0` from `this`


      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }

        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }

        return this;
      }; // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility


      if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
        try {
          BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }
      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */


      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;

        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;

          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;
            off += 2;

            if (off >= 26) {
              off -= 26;
              i--;
            }

            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }

          if (carry !== 0) {
            out = carry.toString(16) + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;

          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }

          if (this.isZero()) {
            out = '0' + out;
          }

          while (out.length % padding !== 0) {
            out = '0' + out;
          }

          if (this.negative !== 0) {
            out = '-' + out;
          }

          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];

        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }

        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }

        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 0xff;

          if (position < res.length) {
            res[position++] = word >> 8 & 0xff;
          }

          if (position < res.length) {
            res[position++] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 0xff;

          if (position >= 0) {
            res[position--] = word >> 8 & 0xff;
          }

          if (position >= 0) {
            res[position--] = word >> 16 & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 0xff;
            }

            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;

          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }

          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }

          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }

          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }

          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;

        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }

        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }

        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }

        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }

        if ((t & 0x1) === 0) {
          r++;
        }

        return r;
      }; // Return number of used bits in a BN


      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];

        var hi = this._countBits(w);

        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 0x01;
        }

        return w;
      } // Number of trailing zero bits


      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;

        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);

          r += b;
          if (b !== 26) break;
        }

        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }

        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }

        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      }; // Return negative clone of `this`


      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      }; // Or `num` with `this` in-place


      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      }; // Or `num` with `this`


      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      }; // And `num` with `this` in-place


      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;

        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;
        return this._strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      }; // And `num` with `this`


      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      }; // Xor `num` with `this` in-place


      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;
        return this._strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      }; // Xor `num` with `this`


      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      }; // Not ``this`` with ``width`` bitwidth


      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26; // Extend the buffer with leading zeroes

        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        } // Handle complete words


        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        } // Handle the residue


        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        } // And remove leading zeroes


        return this._strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      }; // Set `bit` of `this`


      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      }; // Add `num` to `this` in-place


      BN.prototype.iadd = function iadd(num) {
        var r; // negative + positive

        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign(); // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        } // a.length > b.length


        var a, b;

        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;

        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++; // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      }; // Add `num` to `this`


      BN.prototype.add = function add(num) {
        var res;

        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      }; // Subtract `num` from `this` in-place


      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign(); // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        } // At this point both numbers are positive


        var cmp = this.cmp(num); // Optimization - zeroify

        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        } // a > b


        var a, b;

        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;

        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        } // Copy rest of the words


        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      }; // Subtract `num` from `this`


      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }

          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }

        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      } // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).


      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */

        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */

        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */

        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */

        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */

        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */

        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */

        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */

        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */

        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */

        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */

        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */

        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */

        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */

        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */

        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */

        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */

        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */

        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */

        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;

        if (c !== 0) {
          o[19] = c;
          out.length++;
        }

        return out;
      }; // Polyfill comb


      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;

        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);

          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }

          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }

        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;

        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      }; // Cooley-Tukey algorithm for FFT


      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      }; // Multiply employing FFT


      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      }; // In-place Multiplication


      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000); // Carry

        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      }; // `this` * `this`


      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      }; // `this` * `this` in-place


      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      }; // Math.pow(`this`, `num`)


      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1); // Skip leading zeroes

        var res = this;

        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }

        return res;
      }; // Shift-left in-place


      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      }; // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits


      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;

        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h); // Extended mode, copy masked part

        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }

          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;

          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;

        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        } // Push carried bits as a mask


        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      }; // Shift-left


      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      }; // Shift-right


      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      }; // Test if n bit is set


      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) return false; // Check bit and return

        var w = this.words[s];
        return !!(w & q);
      }; // Return only lowers bits of number (in-place)


      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }

        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      }; // Return only lowers bits of number


      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      }; // Add plain number `num` to `this`


      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num); // Possible sign change

        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        } // Add without checks


        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num; // Carry

        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;

          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }

        this.length = Math.max(this.length, i + 1);
        return this;
      }; // Subtract plain number `num` from `this`


      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;

        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }

        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip(); // Subtraction overflow

        assert(carry === -1);
        carry = 0;

        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }

        this.negative = 1;
        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num; // Normalize

        var bhi = b.words[b.length - 1] | 0;

        var bhiBits = this._countBits(bhi);

        shift = 26 - bhiBits;

        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        } // Initialize quotient


        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);

          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);

        if (diff.negative === 0) {
          a = diff;

          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)

          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);

          while (a.negative !== 0) {
            qj--;
            a.negative = 0;

            a._ishlnsubmul(b, 1, j);

            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }

          if (q) {
            q.words[j] = qj;
          }
        }

        if (q) {
          q._strip();
        }

        a._strip(); // Denormalize


        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested


      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;

        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();

            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        } // Both numbers are positive at this point
        // Strip both numbers to approximate shift value


        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        } // Very short reduction


        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      }; // Find `this` / `num`


      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      }; // Find `this` % `num`


      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      }; // Find Round(`this` / `num`)


      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num); // Fast case - exact division

        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half); // Round down

        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      }; // WARNING: DEPRECATED


      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      }; // In-place division by number


      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        this._strip();

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        } // A * x + B * y = x


        var A = new BN(1);
        var B = new BN(0); // C * x + D * y = y

        var C = new BN(0);
        var D = new BN(1);
        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            x.iushrn(i);

            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            y.iushrn(j);

            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      }; // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed


      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

          if (i > 0) {
            a.iushrn(i);

            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

          if (j > 0) {
            b.iushrn(j);

            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;

        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0; // Remove common factor of two

        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }

          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);

          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      }; // Invert number in the field F(num)


      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      }; // And first word and num


      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      }; // Increment at the bit position in-line


      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r; // Fast case: bit is much higher than all existing words

        if (this.length <= s) {
          this._expand(s + 1);

          this.words[s] |= q;
          return this;
        } // Add bit and propagate, if needed


        var carry = q;

        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;

        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }

        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`


      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      }; // Unsigned comparison


      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;

        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;

          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }

          break;
        }

        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      }; //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //


      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');

        this.red._verify2(this, num);

        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');

        this.red._verify1(this);

        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');

        this.red._verify1(this);

        return this.red.isqr(this);
      }; // Square root over p


      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');

        this.red._verify1(this);

        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');

        this.red._verify1(this);

        return this.red.invm(this);
      }; // Return negative clone of `this` % `red modulo`


      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');

        this.red._verify1(this);

        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');

        this.red._verify1(this);

        return this.red.pow(this, num);
      }; // Prime numbers with efficient reduction


      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      }; // Pseudo-Mersenne prime

      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }

      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);

        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }

        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        } // Shift by 9 limbs


        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }

        prev >>>= 22;
        input.words[i - 10] = prev;

        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

        var lo = 0;

        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        } // Fast length reduction


        if (num.words[num.length - 1] === 0) {
          num.length--;

          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }

        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }

      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }

      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }

      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;

        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }

        if (carry !== 0) {
          num.words[num.length++] = carry;
        }

        return num;
      }; // Exported mostly for testing purposes, use plain name instead


      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;

        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }

        primes[name] = prime;
        return prime;
      }; //
      // Base reduction engine
      //


      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);

          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);

        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }

        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);

        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }

        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);

        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);

        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);

        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1); // Fast case

        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)


        var q = this.m.subn(1);
        var s = 0;

        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }

        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg(); // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.

        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;

        while (t.cmp(one) !== 0) {
          var tmp = t;

          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }

          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);

        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;

        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;

        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];

          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;

            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }

          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      }; //
      // Montgomery method engine
      //


      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();

        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }

      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
  })(bn);

  (function (exports) {

    var __importDefault = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.map = exports.array = exports.rustEnum = exports.str = exports.vecU8 = exports.tagged = exports.vec = exports.bool = exports.option = exports.publicKey = exports.i128 = exports.u128 = exports.i64 = exports.u64 = exports.struct = exports.f64 = exports.f32 = exports.i32 = exports.u32 = exports.i16 = exports.u16 = exports.i8 = exports.u8 = void 0;
    var buffer_layout_1 = Layout$1;
    var web3_js_1 = require$$1;

    var bn_js_1 = __importDefault(bn.exports);

    var buffer_layout_2 = Layout$1;
    Object.defineProperty(exports, "u8", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.u8;
      }
    });
    Object.defineProperty(exports, "i8", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.s8;
      }
    });
    Object.defineProperty(exports, "u16", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.u16;
      }
    });
    Object.defineProperty(exports, "i16", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.s16;
      }
    });
    Object.defineProperty(exports, "u32", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.u32;
      }
    });
    Object.defineProperty(exports, "i32", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.s32;
      }
    });
    Object.defineProperty(exports, "f32", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.f32;
      }
    });
    Object.defineProperty(exports, "f64", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.f64;
      }
    });
    Object.defineProperty(exports, "struct", {
      enumerable: true,
      get: function get() {
        return buffer_layout_2.struct;
      }
    });

    var BNLayout = /*#__PURE__*/function (_buffer_layout_1$Layo) {
      _inherits(BNLayout, _buffer_layout_1$Layo);

      var _super = _createSuper(BNLayout);

      function BNLayout(span, signed, property) {
        var _this;

        _classCallCheck(this, BNLayout);

        _this = _super.call(this, span, property);
        _this.blob = buffer_layout_1.blob(span);
        _this.signed = signed;
        return _this;
      }

      _createClass(BNLayout, [{
        key: "decode",
        value: function decode(b) {
          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var num = new bn_js_1["default"](this.blob.decode(b, offset), 10, 'le');

          if (this.signed) {
            return num.fromTwos(this.span * 8).clone();
          }

          return num;
        }
      }, {
        key: "encode",
        value: function encode(src, b) {
          var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (this.signed) {
            src = src.toTwos(this.span * 8);
          }

          return this.blob.encode(src.toArrayLike(Buffer$1, 'le', this.span), b, offset);
        }
      }]);

      return BNLayout;
    }(buffer_layout_1.Layout);

    function u64(property) {
      return new BNLayout(8, false, property);
    }

    exports.u64 = u64;

    function i64(property) {
      return new BNLayout(8, true, property);
    }

    exports.i64 = i64;

    function u128(property) {
      return new BNLayout(16, false, property);
    }

    exports.u128 = u128;

    function i128(property) {
      return new BNLayout(16, true, property);
    }

    exports.i128 = i128;

    var WrappedLayout = /*#__PURE__*/function (_buffer_layout_1$Layo2) {
      _inherits(WrappedLayout, _buffer_layout_1$Layo2);

      var _super2 = _createSuper(WrappedLayout);

      function WrappedLayout(layout, decoder, encoder, property) {
        var _this2;

        _classCallCheck(this, WrappedLayout);

        _this2 = _super2.call(this, layout.span, property);
        _this2.layout = layout;
        _this2.decoder = decoder;
        _this2.encoder = encoder;
        return _this2;
      }

      _createClass(WrappedLayout, [{
        key: "decode",
        value: function decode(b, offset) {
          return this.decoder(this.layout.decode(b, offset));
        }
      }, {
        key: "encode",
        value: function encode(src, b, offset) {
          return this.layout.encode(this.encoder(src), b, offset);
        }
      }, {
        key: "getSpan",
        value: function getSpan(b, offset) {
          return this.layout.getSpan(b, offset);
        }
      }]);

      return WrappedLayout;
    }(buffer_layout_1.Layout);

    function publicKey(property) {
      return new WrappedLayout(buffer_layout_1.blob(32), function (b) {
        return new web3_js_1.PublicKey(b);
      }, function (key) {
        return key.toBuffer();
      }, property);
    }

    exports.publicKey = publicKey;

    var OptionLayout = /*#__PURE__*/function (_buffer_layout_1$Layo3) {
      _inherits(OptionLayout, _buffer_layout_1$Layo3);

      var _super3 = _createSuper(OptionLayout);

      function OptionLayout(layout, property) {
        var _this3;

        _classCallCheck(this, OptionLayout);

        _this3 = _super3.call(this, -1, property);
        _this3.layout = layout;
        _this3.discriminator = buffer_layout_1.u8();
        return _this3;
      }

      _createClass(OptionLayout, [{
        key: "encode",
        value: function encode(src, b) {
          var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (src === null || src === undefined) {
            return this.discriminator.encode(0, b, offset);
          }

          this.discriminator.encode(1, b, offset);
          return this.layout.encode(src, b, offset + 1) + 1;
        }
      }, {
        key: "decode",
        value: function decode(b) {
          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var discriminator = this.discriminator.decode(b, offset);

          if (discriminator === 0) {
            return null;
          } else if (discriminator === 1) {
            return this.layout.decode(b, offset + 1);
          }

          throw new Error('Invalid option ' + this.property);
        }
      }, {
        key: "getSpan",
        value: function getSpan(b) {
          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var discriminator = this.discriminator.decode(b, offset);

          if (discriminator === 0) {
            return 1;
          } else if (discriminator === 1) {
            return this.layout.getSpan(b, offset + 1) + 1;
          }

          throw new Error('Invalid option ' + this.property);
        }
      }]);

      return OptionLayout;
    }(buffer_layout_1.Layout);

    function option(layout, property) {
      return new OptionLayout(layout, property);
    }

    exports.option = option;

    function bool(property) {
      return new WrappedLayout(buffer_layout_1.u8(), decodeBool, encodeBool, property);
    }

    exports.bool = bool;

    function decodeBool(value) {
      if (value === 0) {
        return false;
      } else if (value === 1) {
        return true;
      }

      throw new Error('Invalid bool: ' + value);
    }

    function encodeBool(value) {
      return value ? 1 : 0;
    }

    function vec(elementLayout, property) {
      var length = buffer_layout_1.u32('length');
      var layout = buffer_layout_1.struct([length, buffer_layout_1.seq(elementLayout, buffer_layout_1.offset(length, -length.span), 'values')]);
      return new WrappedLayout(layout, function (_ref) {
        var values = _ref.values;
        return values;
      }, function (values) {
        return {
          values: values
        };
      }, property);
    }

    exports.vec = vec;

    function tagged(tag, layout, property) {
      var wrappedLayout = buffer_layout_1.struct([u64('tag'), layout.replicate('data')]);

      function decodeTag(_ref2) {
        var receivedTag = _ref2.tag,
            data = _ref2.data;

        if (!receivedTag.eq(tag)) {
          throw new Error('Invalid tag, expected: ' + tag.toString('hex') + ', got: ' + receivedTag.toString('hex'));
        }

        return data;
      }

      return new WrappedLayout(wrappedLayout, decodeTag, function (data) {
        return {
          tag: tag,
          data: data
        };
      }, property);
    }

    exports.tagged = tagged;

    function vecU8(property) {
      var length = buffer_layout_1.u32('length');
      var layout = buffer_layout_1.struct([length, buffer_layout_1.blob(buffer_layout_1.offset(length, -length.span), 'data')]);
      return new WrappedLayout(layout, function (_ref3) {
        var data = _ref3.data;
        return data;
      }, function (data) {
        return {
          data: data
        };
      }, property);
    }

    exports.vecU8 = vecU8;

    function str(property) {
      return new WrappedLayout(vecU8(), function (data) {
        return data.toString('utf-8');
      }, function (s) {
        return Buffer$1.from(s, 'utf-8');
      }, property);
    }

    exports.str = str;

    function rustEnum(variants, property, discriminant) {
      var unionLayout = buffer_layout_1.union(discriminant !== null && discriminant !== void 0 ? discriminant : buffer_layout_1.u8(), property);
      variants.forEach(function (variant, index) {
        return unionLayout.addVariant(index, variant, variant.property);
      });
      return unionLayout;
    }

    exports.rustEnum = rustEnum;

    function array(elementLayout, length, property) {
      var layout = buffer_layout_1.struct([buffer_layout_1.seq(elementLayout, length, 'values')]);
      return new WrappedLayout(layout, function (_ref4) {
        var values = _ref4.values;
        return values;
      }, function (values) {
        return {
          values: values
        };
      }, property);
    }

    exports.array = array;

    var MapEntryLayout = /*#__PURE__*/function (_buffer_layout_1$Layo4) {
      _inherits(MapEntryLayout, _buffer_layout_1$Layo4);

      var _super4 = _createSuper(MapEntryLayout);

      function MapEntryLayout(keyLayout, valueLayout, property) {
        var _this4;

        _classCallCheck(this, MapEntryLayout);

        _this4 = _super4.call(this, keyLayout.span + valueLayout.span, property);
        _this4.keyLayout = keyLayout;
        _this4.valueLayout = valueLayout;
        return _this4;
      }

      _createClass(MapEntryLayout, [{
        key: "decode",
        value: function decode(b, offset) {
          offset = offset || 0;
          var key = this.keyLayout.decode(b, offset);
          var value = this.valueLayout.decode(b, offset + this.keyLayout.getSpan(b, offset));
          return [key, value];
        }
      }, {
        key: "encode",
        value: function encode(src, b, offset) {
          offset = offset || 0;
          var keyBytes = this.keyLayout.encode(src[0], b, offset);
          var valueBytes = this.valueLayout.encode(src[1], b, offset + keyBytes);
          return keyBytes + valueBytes;
        }
      }, {
        key: "getSpan",
        value: function getSpan(b, offset) {
          return this.keyLayout.getSpan(b, offset) + this.valueLayout.getSpan(b, offset);
        }
      }]);

      return MapEntryLayout;
    }(buffer_layout_1.Layout);

    function map(keyLayout, valueLayout, property) {
      var length = buffer_layout_1.u32('length');
      var layout = buffer_layout_1.struct([length, buffer_layout_1.seq(new MapEntryLayout(keyLayout, valueLayout), buffer_layout_1.offset(length, -length.span), 'values')]);
      return new WrappedLayout(layout, function (_ref5) {
        var values = _ref5.values;
        return new Map(values);
      }, function (values) {
        return {
          values: Array.from(values.entries())
        };
      }, property);
    }

    exports.map = map;
  })(lib);

  cjs$3.Web3MobileWallet;
  cjs$3.transact;
  var Buffer = require$$1$1.Buffer;
  var BN = bn$1.exports;
  var ACCOUNT_LAYOUT = lib.struct([lib.publicKey('mint'), lib.publicKey('owner'), lib.u64('amount'), lib.u32('delegateOption'), lib.publicKey('delegate'), lib.u8('state'), lib.u32('isNativeOption'), lib.u64('isNative'), lib.u64('delegatedAmount'), lib.u32('closeAuthorityOption'), lib.publicKey('closeAuthority')]);

  lib.array;
  var bool$1 = lib.bool;
  lib.i128;
  lib.i16;
  lib.i32;
  var i64 = lib.i64;
  lib.i8;
  lib.map;
  var option = lib.option;
  var publicKey$1 = lib.publicKey;
  var rustEnum = lib.rustEnum;
  var str = lib.str;
  var struct$1 = lib.struct;
  lib.tagged;
  var u128 = lib.u128;
  var u16$1 = lib.u16;
  var u32$2 = lib.u32;
  var u64$3 = lib.u64;
  var u8$1 = lib.u8;
  var vec = lib.vec;
  lib.vecU8;

  var routers$2 = {
    solana: {
      address: 'DePayRG7ZySPWzeK9Kvq7aPeif7sdbBZNh6DHcvNj7F7',
      ammProgram: 'whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc',
      alt: 'EYGgx5fYCZtLN2pvnR4Bhn5KpMffKwyHCms4VhjSvF2K',
      api: {
        createPaymentsAccount: {
          anchorDiscriminator: new BN("8445995362644372894"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
          ])
        },
        createEscrowSolAccount: {
          anchorDiscriminator: new BN("2482112285991870004"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
          ])
        },
        createEscrowTokenAccount: {
          anchorDiscriminator: new BN("16156440424245087"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
          ])
        },
        routeSol: {
          anchorDiscriminator: new BN("6497164560834983274"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        },
        routeToken: {
          anchorDiscriminator: new BN("13483873682232752277"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        },
        routeOrcaSwap: {
          anchorDiscriminator: new BN("9797248061404332986"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("amountIn"),
            u128("sqrtPriceLimit"),
            bool$1("amountSpecifiedIsInput"),
            bool$1("aToB"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        },
        routeOrcaSwapSolOut: {
          anchorDiscriminator: new BN("13662217913752830165"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("amountIn"),
            u128("sqrtPriceLimit"),
            bool$1("amountSpecifiedIsInput"),
            bool$1("aToB"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        },
        routeOrcaTwoHopSwap: {
          anchorDiscriminator: new BN("15695720599845325801"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("amountIn"),
            bool$1("amountSpecifiedIsInput"),
            bool$1("aToBOne"),
            bool$1("aToBTwo"),
            u128("sqrtPriceLimitOne"),
            u128("sqrtPriceLimitTwo"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        },
        routeOrcaTwoHopSwapSolOut: {
          anchorDiscriminator: new BN("15074061855608091530"),
          layout: struct$1([
            u64$3("anchorDiscriminator"),
            u64$3("nonce"),
            u64$3("amountIn"),
            bool$1("amountSpecifiedIsInput"),
            bool$1("aToBOne"),
            bool$1("aToBTwo"),
            u128("sqrtPriceLimitOne"),
            u128("sqrtPriceLimitTwo"),
            u64$3("paymentAmount"),
            u64$3("feeAmount"),
            i64("deadline"),
          ])
        }
      }
    },
  };

  let _window$1;

  let getWindow$1 = () => {
    if(_window$1) { return _window$1 }
    if (typeof global == 'object') {
      _window$1 = global;
    } else {
      _window$1 = window;
    }
    return _window$1
  };

  const getConfiguration$1 = () =>{
    if(getWindow$1()._Web3ClientConfiguration === undefined) {
      getWindow$1()._Web3ClientConfiguration = {};
    }
    return getWindow$1()._Web3ClientConfiguration
  };

  function _optionalChain$5$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const BATCH_INTERVAL$1 = 10;
  const CHUNK_SIZE$1 = 50;
  const MAX_RETRY$1 = 5;

  class StaticJsonRpcBatchProvider$1 extends ethers.ethers.providers.JsonRpcProvider {

    constructor(url, network, endpoints, failover) {
      super(url);
      this._network = network;
      this._endpoint = url;
      this._endpoints = endpoints;
      this._failover = failover;
      this._pendingBatch = [];
    }

    handleError(error, attempt, chunk) {
      if(attempt < MAX_RETRY$1 && error) {
        const index = this._endpoints.indexOf(this._endpoint)+1;
        this._failover();
        this._endpoint = index >= this._endpoints.length ? this._endpoints[0] : this._endpoints[index];
        this.requestChunk(chunk, this._endpoint, attempt+1);
      } else {
        chunk.forEach((inflightRequest) => {
          inflightRequest.reject(error);
        });
      }
    }

    detectNetwork() {
      return Promise.resolve(Blockchains__default["default"].findByName(this._network).id)
    }

    batchRequest(batch, attempt) {
      return new Promise((resolve, reject) => {
        
        if (batch.length === 0) resolve([]); // Do nothing if requests is empty

        fetch(
          this._endpoint,
          {
            method: 'POST',
            body: JSON.stringify(batch),
            headers: { 'Content-Type': 'application/json' },
            signal: _optionalChain$5$1([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(10000) : undefined  // 10-second timeout
          }
        ).then((response)=>{
          if(response.ok) {
            response.json().then((parsedJson)=>{
              if(parsedJson.find((entry)=>{
                return _optionalChain$5$1([entry, 'optionalAccess', _2 => _2.error]) && [-32062,-32016].includes(_optionalChain$5$1([entry, 'optionalAccess', _3 => _3.error, 'optionalAccess', _4 => _4.code]))
              })) {
                if(attempt < MAX_RETRY$1) {
                  reject('Error in batch found!');
                } else {
                  resolve(parsedJson);
                }
              } else {
                resolve(parsedJson);
              }
            }).catch(reject);
          } else {
            reject(`${response.status} ${response.text}`);
          }
        }).catch(reject);
      })
    }

    requestChunk(chunk, endpoint, attempt) {

      const batch = chunk.map((inflight) => inflight.request);

      try {
        return this.batchRequest(batch, attempt)
          .then((result) => {
            // For each result, feed it to the correct Promise, depending
            // on whether it was a success or error
            chunk.forEach((inflightRequest, index) => {
              const payload = result[index];
              if (_optionalChain$5$1([payload, 'optionalAccess', _5 => _5.error])) {
                const error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest.reject(error);
              } else if(_optionalChain$5$1([payload, 'optionalAccess', _6 => _6.result])) {
                inflightRequest.resolve(payload.result);
              } else {
                inflightRequest.reject();
              }
            });
          }).catch((error) => this.handleError(error, attempt, chunk))
      } catch (error){ this.handleError(error, attempt, chunk); }
    }
      
    send(method, params) {

      const request = {
        method: method,
        params: params,
        id: (this._nextId++),
        jsonrpc: "2.0"
      };

      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }

      const inflightRequest = { request, resolve: null, reject: null };

      const promise = new Promise((resolve, reject) => {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });

      this._pendingBatch.push(inflightRequest);

      if (!this._pendingBatchAggregator) {
        // Schedule batch for next event loop + short duration
        this._pendingBatchAggregator = setTimeout(() => {
          // Get the current batch and clear it, so new requests
          // go into the next batch
          const batch = this._pendingBatch;
          this._pendingBatch = [];
          this._pendingBatchAggregator = null;
          // Prepare Chunks of CHUNK_SIZE
          const chunks = [];
          for (let i = 0; i < Math.ceil(batch.length / CHUNK_SIZE$1); i++) {
            chunks[i] = batch.slice(i*CHUNK_SIZE$1, (i+1)*CHUNK_SIZE$1);
          }
          chunks.forEach((chunk)=>{
            // Get the request as an array of requests
            chunk.map((inflight) => inflight.request);
            return this.requestChunk(chunk, this._endpoint, 1)
          });
        }, getConfiguration$1().batchInterval || BATCH_INTERVAL$1);
      }

      return promise
    }

  }

  function _optionalChain$4$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const getAllProviders$1 = ()=> {
    if(getWindow$1()._Web3ClientProviders == undefined) {
      getWindow$1()._Web3ClientProviders = {};
    }
    return getWindow$1()._Web3ClientProviders
  };

  const setProvider$2 = (blockchain, provider)=> {
    if(provider == undefined) { return }
    if(getAllProviders$1()[blockchain] === undefined) { getAllProviders$1()[blockchain] = []; }
    const index = getAllProviders$1()[blockchain].indexOf(provider);
    if(index > -1) {
      getAllProviders$1()[blockchain].splice(index, 1);
    }
    getAllProviders$1()[blockchain].unshift(provider);
  };

  const setProviderEndpoints$2 = async (blockchain, endpoints, detectFastest = true)=> {
    
    getAllProviders$1()[blockchain] = endpoints.map((endpoint, index)=>
      new StaticJsonRpcBatchProvider$1(endpoint, blockchain, endpoints, ()=>{
        if(getAllProviders$1()[blockchain].length === 1) {
          setProviderEndpoints$2(blockchain, endpoints, detectFastest);
        } else {
          getAllProviders$1()[blockchain].splice(index, 1);
        }
      })
    );
    
    let provider;
    let window = getWindow$1();

    if(
      window.fetch == undefined ||
      (typeof process != 'undefined' && process['env'] && process['env']['NODE_ENV'] == 'test') ||
      (typeof window.cy != 'undefined') ||
      detectFastest === false
    ) {
      provider = getAllProviders$1()[blockchain][0];
    } else {
      
      let responseTimes = await Promise.all(endpoints.map((endpoint)=>{
        return new Promise(async (resolve)=>{
          let timeout = 900;
          let before = new Date().getTime();
          setTimeout(()=>resolve(timeout), timeout);
          let response;
          try {
            response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              referrer: "",
              referrerPolicy: "no-referrer",
              body: JSON.stringify({ method: 'net_version', id: 1, jsonrpc: '2.0' }),
              signal: _optionalChain$4$1([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(10000) : undefined  // 10-second timeout
            });
          } catch (e) {}
          if(!_optionalChain$4$1([response, 'optionalAccess', _2 => _2.ok])) { return resolve(999) }
          let after = new Date().getTime();
          resolve(after-before);
        })
      }));

      const fastestResponse = Math.min(...responseTimes);
      const fastestIndex = responseTimes.indexOf(fastestResponse);
      provider = getAllProviders$1()[blockchain][fastestIndex];
    }
    
    setProvider$2(blockchain, provider);
  };

  const getProvider$2 = async (blockchain)=> {

    let providers = getAllProviders$1();
    if(providers && providers[blockchain]){ return providers[blockchain][0] }
    
    let window = getWindow$1();
    if(window._Web3ClientGetProviderPromise && window._Web3ClientGetProviderPromise[blockchain]) { return await window._Web3ClientGetProviderPromise[blockchain] }

    if(!window._Web3ClientGetProviderPromise){ window._Web3ClientGetProviderPromise = {}; }
    window._Web3ClientGetProviderPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$2(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow$1()._Web3ClientProviders[blockchain][0]);
    });

    return await window._Web3ClientGetProviderPromise[blockchain]
  };

  const getProviders$2 = async(blockchain)=>{

    let providers = getAllProviders$1();
    if(providers && providers[blockchain]){ return providers[blockchain] }
    
    let window = getWindow$1();
    if(window._Web3ClientGetProvidersPromise && window._Web3ClientGetProvidersPromise[blockchain]) { return await window._Web3ClientGetProvidersPromise[blockchain] }

    if(!window._Web3ClientGetProvidersPromise){ window._Web3ClientGetProvidersPromise = {}; }
    window._Web3ClientGetProvidersPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$2(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow$1()._Web3ClientProviders[blockchain]);
    });

    return await window._Web3ClientGetProvidersPromise[blockchain]
  };

  var EVM$1 = {
    getProvider: getProvider$2,
    getProviders: getProviders$2,
    setProviderEndpoints: setProviderEndpoints$2,
    setProvider: setProvider$2,
  };

  function _optionalChain$3$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const BATCH_INTERVAL$2 = 10;
  const CHUNK_SIZE$2 = 50;
  const MAX_RETRY$2 = 10;

  class StaticJsonRpcSequentialProvider extends Connection {

    constructor(url, network, endpoints, failover) {
      super(url);
      this._provider = new Connection(url);
      this._network = network;
      this._endpoint = url;
      this._endpoints = endpoints;
      this._failover = failover;
      this._pendingBatch = [];
      this._rpcRequest = this._rpcRequestReplacement.bind(this);
    }

    handleError(error, attempt, chunk) {
      if(attempt < MAX_RETRY$2) {
        const index = this._endpoints.indexOf(this._endpoint)+1;
        this._endpoint = index >= this._endpoints.length ? this._endpoints[0] : this._endpoints[index];
        this._provider = new Connection(this._endpoint);
        this.requestChunk(chunk, attempt+1);
      } else {
        chunk.forEach((inflightRequest) => {
          inflightRequest.reject(error);
        });
      }
    }

    batchRequest(requests, attempt) {
      return new Promise((resolve, reject) => {
        if (requests.length === 0) resolve([]); // Do nothing if requests is empty

        const batch = requests.map(params => {
          return this._rpcClient.request(params.methodName, params.args)
        });

        fetch(
          this._endpoint,
          {
            method: 'POST',
            body: JSON.stringify(batch),
            headers: { 'Content-Type': 'application/json' },
            signal: _optionalChain$3$2([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(60000) : undefined  // 60-second timeout
          }
        ).then((response)=>{
          if(response.ok) {
            response.json().then((parsedJson)=>{
              if(parsedJson.find((entry)=>_optionalChain$3$2([entry, 'optionalAccess', _2 => _2.error]))) {
                if(attempt < MAX_RETRY$2) {
                  reject('Error in batch found!');
                } else {
                  resolve(parsedJson);
                }
              } else {
                resolve(parsedJson);
              }
            }).catch(reject);
          } else {
            reject(`${response.status} ${response.text}`);
          }
        }).catch(reject);
      })
    }

    requestChunk(chunk, attempt) {

      const batch = chunk.map((inflight) => inflight.request);

      try {
        return this.batchRequest(batch, attempt)
          .then((result) => {
            chunk.forEach((inflightRequest, index) => {
              const payload = result[index];
              if (_optionalChain$3$2([payload, 'optionalAccess', _3 => _3.error])) {
                const error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest.reject(error);
              } else if(payload) {
                inflightRequest.resolve(payload);
              } else {
                inflightRequest.reject();
              }
            });
          }).catch((error)=>this.handleError(error, attempt, chunk))
      } catch (error){ return this.handleError(error, attempt, chunk) }
    }
      
    _rpcRequestReplacement(methodName, args) {

      const request = { methodName, args };

      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }

      const inflightRequest = { request, resolve: null, reject: null };

      const promise = new Promise((resolve, reject) => {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });

      this._pendingBatch.push(inflightRequest);

      if (!this._pendingBatchAggregator) {
        // Schedule batch for next event loop + short duration
        this._pendingBatchAggregator = setTimeout(() => {
          // Get the current batch and clear it, so new requests
          // go into the next batch
          const batch = this._pendingBatch;
          this._pendingBatch = [];
          this._pendingBatchAggregator = null;
          // Prepare Chunks of CHUNK_SIZE
          const chunks = [];
          for (let i = 0; i < Math.ceil(batch.length / CHUNK_SIZE$2); i++) {
            chunks[i] = batch.slice(i*CHUNK_SIZE$2, (i+1)*CHUNK_SIZE$2);
          }
          chunks.forEach((chunk)=>{
            // Get the request as an array of requests
            chunk.map((inflight) => inflight.request);
            return this.requestChunk(chunk, 1)
          });
        }, getConfiguration$1().batchInterval || BATCH_INTERVAL$2);
      }

      return promise
    }
  }

  function _optionalChain$2$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const getAllProviders$2 = ()=> {
    if(getWindow$1()._Web3ClientProviders == undefined) {
      getWindow$1()._Web3ClientProviders = {};
    }
    return getWindow$1()._Web3ClientProviders
  };

  const setProvider$1$1 = (blockchain, provider)=> {
    if(provider == undefined) { return }
    if(getAllProviders$2()[blockchain] === undefined) { getAllProviders$2()[blockchain] = []; }
    const index = getAllProviders$2()[blockchain].indexOf(provider);
    if(index > -1) {
      getAllProviders$2()[blockchain].splice(index, 1);
    }
    getAllProviders$2()[blockchain].unshift(provider);
  };

  const setProviderEndpoints$1$1 = async (blockchain, endpoints, detectFastest = true)=> {
    
    getAllProviders$2()[blockchain] = endpoints.map((endpoint, index)=>
      new StaticJsonRpcSequentialProvider(endpoint, blockchain, endpoints, ()=>{
        if(getAllProviders$2()[blockchain].length === 1) {
          setProviderEndpoints$1$1(blockchain, endpoints, detectFastest);
        } else {
          getAllProviders$2()[blockchain].splice(index, 1);
        }
      })
    );

    let provider;
    let window = getWindow$1();

    if(
      window.fetch == undefined ||
      (typeof process != 'undefined' && process['env'] && process['env']['NODE_ENV'] == 'test') ||
      (typeof window.cy != 'undefined') ||
      detectFastest === false
    ) {
      provider = getAllProviders$2()[blockchain][0];
    } else {
      
      let responseTimes = await Promise.all(endpoints.map((endpoint)=>{
        return new Promise(async (resolve)=>{
          let timeout = 900;
          let before = new Date().getTime();
          setTimeout(()=>resolve(timeout), timeout);
          let response;
          try {
            response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              referrer: "",
              referrerPolicy: "no-referrer",
              body: JSON.stringify({ method: 'getIdentity', id: 1, jsonrpc: '2.0' }),
              signal: _optionalChain$2$2([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(60000) : undefined  // 60-second timeout
            });
          } catch (e) {}
          if(!_optionalChain$2$2([response, 'optionalAccess', _2 => _2.ok])) { return resolve(999) }
          let after = new Date().getTime();
          resolve(after-before);
        })
      }));

      const fastestResponse = Math.min(...responseTimes);
      const fastestIndex = responseTimes.indexOf(fastestResponse);
      provider = getAllProviders$2()[blockchain][fastestIndex];
    }
    
    setProvider$1$1(blockchain, provider);
  };

  const getProvider$1$1 = async (blockchain)=> {

    let providers = getAllProviders$2();
    if(providers && providers[blockchain]){ return providers[blockchain][0] }
    
    let window = getWindow$1();
    if(window._Web3ClientGetProviderPromise && window._Web3ClientGetProviderPromise[blockchain]) { return await window._Web3ClientGetProviderPromise[blockchain] }

    if(!window._Web3ClientGetProviderPromise){ window._Web3ClientGetProviderPromise = {}; }
    window._Web3ClientGetProviderPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$1$1(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow$1()._Web3ClientProviders[blockchain][0]);
    });

    return await window._Web3ClientGetProviderPromise[blockchain]
  };

  const getProviders$1$1 = async(blockchain)=>{

    let providers = getAllProviders$2();
    if(providers && providers[blockchain]){ return providers[blockchain] }
    
    let window = getWindow$1();
    if(window._Web3ClientGetProvidersPromise && window._Web3ClientGetProvidersPromise[blockchain]) { return await window._Web3ClientGetProvidersPromise[blockchain] }

    if(!window._Web3ClientGetProvidersPromise){ window._Web3ClientGetProvidersPromise = {}; }
    window._Web3ClientGetProvidersPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$1$1(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow$1()._Web3ClientProviders[blockchain]);
    });

    return await window._Web3ClientGetProvidersPromise[blockchain]
  };

  var Solana = {
    getProvider: getProvider$1$1,
    getProviders: getProviders$1$1,
    setProviderEndpoints: setProviderEndpoints$1$1,
    setProvider: setProvider$1$1,
  };

  let supported$3 = ['ethereum', 'bsc', 'polygon', 'solana', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$3.evm = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$3.svm = ['solana'];

  function _optionalChain$1$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  let getCacheStore$1 = () => {
    if (getWindow$1()._Web3ClientCacheStore == undefined) {
      getWindow$1()._Web3ClientCacheStore = {};
    }
    return getWindow$1()._Web3ClientCacheStore
  };

  let getPromiseStore$1 = () => {
    if (getWindow$1()._Web3ClientPromiseStore == undefined) {
      getWindow$1()._Web3ClientPromiseStore = {};
    }
    return getWindow$1()._Web3ClientPromiseStore
  };

  let set$1 = function ({ key, value, expires }) {
    getCacheStore$1()[key] = {
      expiresAt: Date.now() + expires,
      value,
    };
  };

  let get$1 = function ({ key, expires }) {
    let cachedEntry = getCacheStore$1()[key];
    if (_optionalChain$1$3([cachedEntry, 'optionalAccess', _ => _.expiresAt]) > Date.now()) {
      return cachedEntry.value
    }
  };

  let getPromise$1 = function({ key }) {
    return getPromiseStore$1()[key]
  };

  let setPromise$1 = function({ key, promise }) {
    getPromiseStore$1()[key] = promise;
    return promise
  };

  let deletePromise$1 = function({ key }) {
    getPromiseStore$1()[key] = undefined; 
  };

  let cache$1 = function ({ call, key, expires = 0 }) {
    return new Promise((resolve, reject)=>{
      let value;
      key = JSON.stringify(key);
      
      // get existing promise (of a previous pending request asking for the exact same thing)
      let existingPromise = getPromise$1({ key });
      if(existingPromise) { 
        return existingPromise
          .then(resolve)
          .catch(reject)
      }

      setPromise$1({ key, promise: new Promise((resolveQueue, rejectQueue)=>{
        if (expires === 0) {
          return call()
            .then((value)=>{
              resolve(value);
              resolveQueue(value);
            })
            .catch((error)=>{
              reject(error);
              rejectQueue(error);
            })
        }
        
        // get cached value
        value = get$1({ key, expires });
        if (value) {
          resolve(value);
          resolveQueue(value);
          return value
        }

        // set new cache value
        call()
          .then((value)=>{
            if (value) {
              set$1({ key, value, expires });
            }
            resolve(value);
            resolveQueue(value);
          })
          .catch((error)=>{
            reject(error);
            rejectQueue(error);
          });
        })
      }).then(()=>{
        deletePromise$1({ key });
      }).catch(()=>{
        deletePromise$1({ key });
      });
    })
  };

  const getProvider = async (blockchain)=>{

    if(supported$3.evm.includes(blockchain)) {


      return await EVM$1.getProvider(blockchain)


    } else if(supported$3.svm.includes(blockchain)) {


      return await Solana.getProvider(blockchain)


    } else {
      throw 'Unknown blockchain: ' + blockchain
    }
  };

  let paramsToContractArgs$1 = ({ contract, method, params }) => {
    let fragment = contract.interface.fragments.find((fragment) => {
      return fragment.name == method
    });

    return fragment.inputs.map((input, index) => {
      if (Array.isArray(params)) {
        return params[index]
      } else {
        return params[input.name]
      }
    })
  };

  const contractCall$1 = ({ address, api, method, params, provider, block }) => {
    const contract = new ethers.ethers.Contract(address, api, provider);
    const args = paramsToContractArgs$1({ contract, method, params });
    const fragment = contract.interface.fragments.find((fragment)=>fragment.name === method);
    if(contract[method] === undefined) {
      method = `${method}(${fragment.inputs.map((input)=>input.type).join(',')})`;
    }
    if(fragment && fragment.stateMutability === 'nonpayable') {
      return contract.callStatic[method](...args, { blockTag: block })
    } else {
      return contract[method](...args, { blockTag: block })
    }
  };

  const balance$1 = ({ address, provider }) => {
    return provider.getBalance(address)
  };

  const transactionCount$1 = ({ address, provider }) => {
    return provider.getTransactionCount(address)
  };

  const singleRequest$1 = ({ blockchain, address, api, method, params, block, provider }) =>{
    if (api) {
      return contractCall$1({ address, api, method, params, provider, block })
    } else if (method === 'latestBlockNumber') {
      return provider.getBlockNumber()
    } else if (method === 'balance') {
      return balance$1({ address, provider })
    } else if (method === 'transactionCount') {
      return transactionCount$1({ address, provider })
    }
  };

  var requestEVM$1 = async ({ blockchain, address, api, method, params, block, timeout, strategy }) => {

    strategy = strategy ? strategy : (getConfiguration$1().strategy || 'failover');
    timeout = timeout ? timeout : (getConfiguration$1().timeout || undefined);

    if(strategy === 'fastest') {

      const providers = await EVM$1.getProviders(blockchain);
      
      let allRequestsFailed = [];

      const allRequestsInParallel = providers.map((provider)=>{
        return new Promise((resolve)=>{
          allRequestsFailed.push(
            singleRequest$1({ blockchain, address, api, method, params, block, provider }).then(resolve)
          );
        })
      });
      
      const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout || 10000));

      allRequestsFailed = Promise.all(allRequestsFailed.map((request)=>{
        return new Promise((resolve)=>{ request.catch(resolve); })
      })).then(()=>{ return });

      return Promise.race([...allRequestsInParallel, timeoutPromise, allRequestsFailed])

    } else { // failover

      const provider = await EVM$1.getProvider(blockchain);
      const request = singleRequest$1({ blockchain, address, api, method, params, block, provider });
      
      if(timeout) {
        timeout = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout));
        return Promise.race([request, timeout])
      } else {
        return request
      }
    }
  };

  const accountInfo = async ({ address, api, method, params, provider, block }) => {
    const info = await provider.getAccountInfo(new PublicKey(address));
    if(!info || !info.data) { return }
    return api.decode(info.data)
  };

  const balance$2 = ({ address, provider }) => {
    return provider.getBalance(new PublicKey(address))
  };

  const singleRequest$2 = async({ blockchain, address, api, method, params, block, provider, providers })=> {

    try {

      if(method == undefined || method === 'getAccountInfo') {
        if(api == undefined) {
          api = ACCOUNT_LAYOUT; 
        }
        return await accountInfo({ address, api, method, params, provider, block })
      } else if(method === 'getProgramAccounts') {
        return await provider.getProgramAccounts(new PublicKey(address), params).then((accounts)=>{
          if(api){
            return accounts.map((account)=>{
              account.data = api.decode(account.account.data);
              return account
            })
          } else {
            return accounts
          }
        })
      } else if(method === 'getTokenAccountBalance') {
        return await provider.getTokenAccountBalance(new PublicKey(address))
      } else if (method === 'latestBlockNumber') {
        return await provider.getSlot(params ? params : undefined)
      } else if (method === 'balance') {
        return await balance$2({ address, provider })
      }

    } catch (error){
      if(providers && error && [
        'Failed to fetch', 'limit reached', '504', '503', '502', '500', '429', '426', '422', '413', '409', '408', '406', '405', '404', '403', '402', '401', '400'
      ].some((errorType)=>error.toString().match(errorType))) {
        let nextProvider = providers[providers.indexOf(provider)+1] || providers[0];
        return singleRequest$2({ blockchain, address, api, method, params, block, provider: nextProvider, providers })
      } else {
        throw error
      }
    }
  };

  var requestSolana = async ({ blockchain, address, api, method, params, block, timeout, strategy }) => {

    strategy = strategy ? strategy : (getConfiguration$1().strategy || 'failover');
    timeout = timeout ? timeout : (getConfiguration$1().timeout || undefined);

    const providers = await Solana.getProviders(blockchain);

    if(strategy === 'fastest') {

      let allRequestsFailed = [];

      const allRequestsInParallel = providers.map((provider)=>{
        return new Promise((resolve)=>{
          allRequestsFailed.push(
            singleRequest$2({ blockchain, address, api, method, params, block, provider }).then(resolve)
          );
        })
      });
      
      const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout || 60000)); // 60s default timeout

      allRequestsFailed = Promise.all(allRequestsFailed.map((request)=>{
        return new Promise((resolve)=>{ request.catch(resolve); })
      })).then(()=>{ return });

      return Promise.race([...allRequestsInParallel, timeoutPromise, allRequestsFailed])

    } else { // failover

      const provider = await Solana.getProvider(blockchain);
      const request = singleRequest$2({ blockchain, address, api, method, params, block, provider, providers });

      if(timeout) {
        timeout = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout));
        return Promise.race([request, timeout])
      } else {
        return request
      }
    }
  };

  var parseUrl$1 = (url) => {
    if (typeof url == 'object') {
      return url
    }
    let deconstructed = url.match(/(?<blockchain>\w+):\/\/(?<part1>[\w\d]+)(\/(?<part2>[\w\d]+)*)?/);

    if(deconstructed.groups.part2 == undefined) {
      if(deconstructed.groups.part1.match(/\d/)) {
        return {
          blockchain: deconstructed.groups.blockchain,
          address: deconstructed.groups.part1
        }
      } else {
        return {
          blockchain: deconstructed.groups.blockchain,
          method: deconstructed.groups.part1
        }
      }
    } else {
      return {
        blockchain: deconstructed.groups.blockchain,
        address: deconstructed.groups.part1,
        method: deconstructed.groups.part2
      }
    }
  };

  const request$1 = async function (url, options) {
    
    const { blockchain, address, method } = parseUrl$1(url);
    const { api, params, cache: cache$1$1, block, timeout, strategy, cacheKey } = (typeof(url) == 'object' ? url : options) || {};

    return await cache$1({
      expires: cache$1$1 || 0,
      key: cacheKey || [blockchain, address, method, params, block],
      call: async()=>{
        if(supported$3.evm.includes(blockchain)) {


          return await requestEVM$1({ blockchain, address, api, method, params, block, strategy, timeout })


        } else if(supported$3.svm.includes(blockchain)) {


          return await requestSolana({ blockchain, address, api, method, params, block, strategy, timeout })


        } else {
          throw 'Unknown blockchain: ' + blockchain
        }  
      }
    })
  };

  var allowanceOnEVM = ({ blockchain, address, api, owner, spender })=>{
    return request$1(
      {
        blockchain,
        address,
        api,
        method: 'allowance',
        params: [owner, spender],
        // no cache for allowance!
      },
    )
  };

  var balanceOnEVM = async ({ blockchain, address, account, api, id })=>{
    if (address == Blockchains__default["default"][blockchain].currency.address) {
      return await request$1(
        {
          blockchain: blockchain,
          address: account,
          method: 'balance',
        },
      )
    } else {
      return await request$1(
        {
          blockchain: blockchain,
          address: address,
          method: 'balanceOf',
          api,
          params: id ? [account, id] : [account],
        },
      )
    }
  };

  var decimalsOnEVM = ({ blockchain, address, api })=>{
    return request$1({
      blockchain,
      address,
      api,
      method: 'decimals',
      cache: 86400000, // 1 day
    })
  };

  var ERC1155 = [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ];

  var ERC20 = [
    {
      constant: true,
      inputs: [],
      name: 'name',
      outputs: [{ name: '', type: 'string' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    {
      constant: false,
      inputs: [
        { name: '_spender', type: 'address' },
        { name: '_value', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [{ name: '', type: 'bool' }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      constant: true,
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', type: 'uint256' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    {
      constant: false,
      inputs: [
        { name: '_from', type: 'address' },
        { name: '_to', type: 'address' },
        { name: '_value', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [{ name: '', type: 'bool' }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      constant: true,
      inputs: [],
      name: 'decimals',
      outputs: [{ name: '', type: 'uint8' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    {
      constant: true,
      inputs: [{ name: '_owner', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: 'balance', type: 'uint256' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    {
      constant: true,
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', type: 'string' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    {
      constant: false,
      inputs: [
        { name: '_to', type: 'address' },
        { name: '_value', type: 'uint256' },
      ],
      name: 'transfer',
      outputs: [{ name: '', type: 'bool' }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function',
    },
    {
      constant: true,
      inputs: [
        { name: '_owner', type: 'address' },
        { name: '_spender', type: 'address' },
      ],
      name: 'allowance',
      outputs: [{ name: '', type: 'uint256' }],
      payable: false,
      stateMutability: 'view',
      type: 'function',
    },
    { payable: true, stateMutability: 'payable', type: 'fallback' },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: 'owner', type: 'address' },
        { indexed: true, name: 'spender', type: 'address' },
        { indexed: false, name: 'value', type: 'uint256' },
      ],
      name: 'Approval',
      type: 'event',
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: 'from', type: 'address' },
        { indexed: true, name: 'to', type: 'address' },
        { indexed: false, name: 'value', type: 'uint256' },
      ],
      name: 'Transfer',
      type: 'event',
    },
  ];

  var WETH = [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "guy",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "src",
          "type": "address"
        },
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dst",
          "type": "address"
        },
        {
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "src",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "src",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    }
  ];

  const uriAPI = [{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}];

  const uriToName = (tokenURI)=>{
    return new Promise((resolve)=>{
      if(tokenURI.match(/^ipfs/)) {
        tokenURI = `https://ipfs.io/ipfs/${tokenURI.split('://')[1]}`;
      }
      fetch(tokenURI).then((response) => {
        if (response.ok) { return response.json() }
        resolve();
      })
      .then((responseJson) => {
        if(responseJson) {
          let name = responseJson.name;
          if(name){
            resolve(name);
          } else {
            resolve();
          }
        }
      }).catch(()=>resolve());
    })
  };

  var nameOnEVM = ({ blockchain, address, api, id })=>{

    if(id) {
      return new Promise((resolve)=>{
        request$1({ blockchain, address, api: uriAPI, method: 'uri', params: [id] }).then((uri)=>{
          uri = uri.match('0x{id}') ? uri.replace('0x{id}', id) : uri;
          uriToName(uri).then(resolve);
        }).catch((error)=>{
          console.log('error', error);
          resolve();
        });
      })
    } else {
      return request$1(
        {
          blockchain: blockchain,
          address: address,
          api,
          method: 'name',
          cache: 86400000, // 1 day
        },
      )
    }
  };

  var symbolOnEVM = ({ blockchain, address, api })=>{
    return request$1(
      {
        blockchain,
        address,
        api,
        method: 'symbol',
        cache: 86400000, // 1 day
      }
    )
  };

  const TOKEN_PROGRAM = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
  const ASSOCIATED_TOKEN_PROGRAM = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';

  function _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  var findProgramAddress = async ({ token, owner })=>{

    const [address] = await PublicKey.findProgramAddress(
      [
        (new PublicKey(owner)).toBuffer(),
        (new PublicKey(TOKEN_PROGRAM)).toBuffer(),
        (new PublicKey(token)).toBuffer()
      ],
      new PublicKey(ASSOCIATED_TOKEN_PROGRAM)
    );

    return _optionalChain$4([address, 'optionalAccess', _ => _.toString, 'call', _2 => _2()])
  };

  const MINT_LAYOUT = struct$1([
    u32$2('mintAuthorityOption'),
    publicKey$1('mintAuthority'),
    u64$3('supply'),
    u8$1('decimals'),
    bool$1('isInitialized'),
    u32$2('freezeAuthorityOption'),
    publicKey$1('freezeAuthority')
  ]);

  const KEY_LAYOUT = rustEnum([
    struct$1([], 'uninitialized'),
    struct$1([], 'editionV1'),
    struct$1([], 'masterEditionV1'),
    struct$1([], 'reservationListV1'),
    struct$1([], 'metadataV1'),
    struct$1([], 'reservationListV2'),
    struct$1([], 'masterEditionV2'),
    struct$1([], 'editionMarker'),
  ]);

  const CREATOR_LAYOUT = struct$1([
    publicKey$1('address'),
    bool$1('verified'),
    u8$1('share'),
  ]);

  const DATA_LAYOUT = struct$1([
    str('name'),
    str('symbol'),
    str('uri'),
    u16$1('sellerFeeBasisPoints'),
    option(
      vec(
        CREATOR_LAYOUT.replicate('creators')
      ),
      'creators'
    )
  ]);

  const METADATA_LAYOUT = struct$1([
    KEY_LAYOUT.replicate('key'),
    publicKey$1('updateAuthority'),
    publicKey$1('mint'),
    DATA_LAYOUT.replicate('data'),
    bool$1('primarySaleHappened'),
    bool$1('isMutable'),
    option(u8$1(), 'editionNonce'),
  ]);

  const TRANSFER_LAYOUT = struct$1([
    u8$1('instruction'),
    u64$3('amount'),
  ]);

  const TOKEN_LAYOUT = struct$1([
    publicKey$1('mint'),
    publicKey$1('owner'),
    u64$3('amount'),
    u32$2('delegateOption'),
    publicKey$1('delegate'),
    u8$1('state'),
    u32$2('isNativeOption'),
    u64$3('isNative'),
    u64$3('delegatedAmount'),
    u32$2('closeAuthorityOption'),
    publicKey$1('closeAuthority')
  ]);

  const INITIALIZE_LAYOUT = struct$1([
    u8$1('instruction'),
    publicKey$1('owner')
  ]);

  const CLOSE_LAYOUT = struct$1([
    u8$1('instruction')
  ]);

  const createTransferInstruction = async ({ token, amount, from, to })=>{

    let fromTokenAccount = await findProgramAddress({ token, owner: from });
    let toTokenAccount = await findProgramAddress({ token, owner: to });

    const keys = [
      { pubkey: new PublicKey(fromTokenAccount), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(toTokenAccount), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(from), isSigner: true, isWritable: false }
    ];

    const data = Buffer.alloc(TRANSFER_LAYOUT.span);
    TRANSFER_LAYOUT.encode({
      instruction: 3, // TRANSFER
      amount: new BN(amount)
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(TOKEN_PROGRAM),
      data 
    })
  };

  const createAssociatedTokenAccountInstruction = async ({ token, owner, payer }) => {

    let associatedToken = await findProgramAddress({ token, owner });

    const keys = [
      { pubkey: new PublicKey(payer), isSigner: true, isWritable: true },
      { pubkey: new PublicKey(associatedToken), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(owner), isSigner: false, isWritable: false },
      { pubkey: new PublicKey(token), isSigner: false, isWritable: false },
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: new PublicKey(TOKEN_PROGRAM), isSigner: false, isWritable: false },
    ];

   return new TransactionInstruction({
      keys,
      programId: new PublicKey(ASSOCIATED_TOKEN_PROGRAM),
      data: Buffer.alloc(0)
    })
  };

  const initializeAccountInstruction = ({ account, token, owner })=>{

    const keys = [
      { pubkey: new PublicKey(account), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(token), isSigner: false, isWritable: false },
    ];

    const data = Buffer.alloc(INITIALIZE_LAYOUT.span);
    INITIALIZE_LAYOUT.encode({
      instruction: 18, // InitializeAccount3
      owner: new PublicKey(owner)
    }, data);
    
    return new TransactionInstruction({ keys, programId: new PublicKey(TOKEN_PROGRAM), data })
  };


  const closeAccountInstruction = ({ account, owner })=>{

    const keys = [
      { pubkey: new PublicKey(account), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(owner), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(owner), isSigner: true, isWritable: false }
    ];

    const data = Buffer.alloc(CLOSE_LAYOUT.span);
    CLOSE_LAYOUT.encode({
      instruction: 9 // CloseAccount
    }, data);

    return new TransactionInstruction({ keys, programId: new PublicKey(TOKEN_PROGRAM), data })
  };

  var instructions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createTransferInstruction: createTransferInstruction,
    createAssociatedTokenAccountInstruction: createAssociatedTokenAccountInstruction,
    initializeAccountInstruction: initializeAccountInstruction,
    closeAccountInstruction: closeAccountInstruction
  });

  var balanceOnSolana = async ({ blockchain, address, account, api })=>{

    if(address == Blockchains__default["default"][blockchain].currency.address) {

       return ethers.ethers.BigNumber.from(await request$1(`solana://${account}/balance`))

    } else {

      const tokenAccountAddress = await findProgramAddress({ token: address, owner: account });

      const balance = await request$1(`solana://${tokenAccountAddress}/getTokenAccountBalance`);

      if (balance) {
        return ethers.ethers.BigNumber.from(balance.value.amount)
      } else {
        return ethers.ethers.BigNumber.from('0')
      }
    }
  };

  var decimalsOnSolana = async ({ blockchain, address })=>{
    let data = await request$1({ blockchain, address, api: MINT_LAYOUT });
    return data.decimals
  };

  var findAccount = async ({ token, owner })=>{

    const address = await findProgramAddress({ token, owner });

    const existingAccount = await request$1({
      blockchain: 'solana',
      address,
      api: TOKEN_LAYOUT,
      cache: 1000 // 1s
    });

    return existingAccount
  };

  function _optionalChain$3$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const METADATA_ACCOUNT = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s';

  const METADATA_REPLACE = new RegExp('\u0000', 'g');

  const getMetaDataPDA = async ({ metaDataPublicKey, mintPublicKey }) => {
    let seed = [
      Buffer.from('metadata'),
      metaDataPublicKey.toBuffer(),
      mintPublicKey.toBuffer()  
    ];

    return (await PublicKey.findProgramAddress(seed, metaDataPublicKey))[0]
  };

  const getMetaData = async ({ blockchain, address })=> {

    let mintPublicKey = new PublicKey(address);
    let metaDataPublicKey = new PublicKey(METADATA_ACCOUNT);
    let tokenMetaDataPublicKey = await getMetaDataPDA({ metaDataPublicKey, mintPublicKey });

    let metaData = await request$1({
      blockchain, 
      address: tokenMetaDataPublicKey.toString(),
      api: METADATA_LAYOUT,
      cache: 86400000, // 1 day
    });

    return {
      name: _optionalChain$3$1([metaData, 'optionalAccess', _ => _.data, 'optionalAccess', _2 => _2.name, 'optionalAccess', _3 => _3.replace, 'call', _4 => _4(METADATA_REPLACE, '')]),
      symbol: _optionalChain$3$1([metaData, 'optionalAccess', _5 => _5.data, 'optionalAccess', _6 => _6.symbol, 'optionalAccess', _7 => _7.replace, 'call', _8 => _8(METADATA_REPLACE, '')])
    }
  };

  function _optionalChain$2$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  var nameOnSolana = async ({ blockchain, address })=>{
    let metaData = await getMetaData({ blockchain, address });
    return _optionalChain$2$1([metaData, 'optionalAccess', _ => _.name])
  };

  function _optionalChain$1$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  var symbolOnSolana = async ({ blockchain, address })=>{
    let metaData = await getMetaData({ blockchain, address });
    return _optionalChain$1$2([metaData, 'optionalAccess', _ => _.symbol])
  };

  let supported$2 = ['ethereum', 'bsc', 'polygon', 'solana', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$2.evm = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$2.svm = ['solana'];

  function _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

  class Token {
    
    constructor({ blockchain, address }) {
      this.blockchain = blockchain;
      if(supported$2.evm.includes(this.blockchain)) {
        this.address = ethers.ethers.utils.getAddress(address);
      } else if(supported$2.svm.includes(this.blockchain)) {
        this.address = address;
      }
    }

    async decimals() {
      if (this.address == Blockchains__default["default"].findByName(this.blockchain).currency.address) {
        return Blockchains__default["default"].findByName(this.blockchain).currency.decimals
      }
      let decimals;
      try {
        if(supported$2.evm.includes(this.blockchain)) {

          decimals = await decimalsOnEVM({ blockchain: this.blockchain, address: this.address, api: Token[this.blockchain].DEFAULT });

        } else if(supported$2.svm.includes(this.blockchain)) {

          decimals = await decimalsOnSolana({ blockchain: this.blockchain, address: this.address });

          
        }
      } catch (e) {}
      return decimals
    }

    async symbol() {
      if (this.address == Blockchains__default["default"].findByName(this.blockchain).currency.address) {
        return Blockchains__default["default"].findByName(this.blockchain).currency.symbol
      }
      if(supported$2.evm.includes(this.blockchain)) {

        return await symbolOnEVM({ blockchain: this.blockchain, address: this.address, api: Token[this.blockchain].DEFAULT })

      } else if(supported$2.svm.includes(this.blockchain)) {

        return await symbolOnSolana({ blockchain: this.blockchain, address: this.address })

      }
    }

    async name(args) {
      if (this.address == Blockchains__default["default"].findByName(this.blockchain).currency.address) {
        return Blockchains__default["default"].findByName(this.blockchain).currency.name
      }
      if(supported$2.evm.includes(this.blockchain)) {

        return await nameOnEVM({ blockchain: this.blockchain, address: this.address, api: Token[this.blockchain].DEFAULT, id: _optionalChain$5([args, 'optionalAccess', _ => _.id]) })

      } else if(supported$2.svm.includes(this.blockchain)) {

        return await nameOnSolana({ blockchain: this.blockchain, address: this.address })

      }
    }

    async balance(account, id) {
      if(supported$2.evm.includes(this.blockchain)) {

        return await balanceOnEVM({ blockchain: this.blockchain, account, address: this.address, api: id ? Token[this.blockchain][1155] : Token[this.blockchain].DEFAULT, id })

      } else if(supported$2.svm.includes(this.blockchain)) {

        return await balanceOnSolana({ blockchain: this.blockchain, account, address: this.address, api: Token[this.blockchain].DEFAULT })

      }
    }

    async allowance(owner, spender) {
      if (this.address == Blockchains__default["default"].findByName(this.blockchain).currency.address) {
        return ethers.ethers.BigNumber.from(Blockchains__default["default"].findByName(this.blockchain).maxInt)
      }
      if(supported$2.evm.includes(this.blockchain)) {

        return await allowanceOnEVM({ blockchain: this.blockchain, address: this.address, api: Token[this.blockchain].DEFAULT, owner, spender })

      } else if(supported$2.svm.includes(this.blockchain)) {
        return ethers.ethers.BigNumber.from(Blockchains__default["default"].findByName(this.blockchain).maxInt)
      } 
    }

    async BigNumber(amount) {
      const decimals = await this.decimals();
      if(typeof(amount) != 'string') {
        amount = amount.toString();
      }
      if(amount.match('e')) {
        amount = parseFloat(amount).toFixed(decimals).toString();
      }
      const decimalsMatched = amount.match(/\.(\d+)/);
      if(decimalsMatched && decimalsMatched[1] && decimalsMatched[1].length > decimals) {
        amount = parseFloat(amount).toFixed(decimals).toString();
      }
      return ethers.ethers.utils.parseUnits(
        amount,
        decimals
      )
    }

    async readable(amount) {
      let decimals = await this.decimals();
      let readable = ethers.ethers.utils.formatUnits(amount.toString(), decimals);
      readable = readable.replace(/\.0+$/, '');
      return readable
    }
  }

  Token.BigNumber = async ({ amount, blockchain, address }) => {
    let token = new Token({ blockchain, address });
    return token.BigNumber(amount)
  };

  Token.readable = async ({ amount, blockchain, address }) => {
    let token = new Token({ blockchain, address });
    return token.readable(amount)
  };


  Token.ethereum = { 
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.bsc = { 
    DEFAULT: ERC20,
    BEP20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.polygon = { 
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.fantom = {
    DEFAULT: ERC20,
    FTM20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.arbitrum = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.avalanche = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    ARC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.gnosis = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.optimism = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.base = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.worldchain = {
    DEFAULT: ERC20,
    ERC20: ERC20,
    20: ERC20,
    1155: ERC1155,
    WRAPPED: WETH,
  };

  Token.solana = {
    MINT_LAYOUT,
    METADATA_LAYOUT,
    TRANSFER_LAYOUT,
    METADATA_ACCOUNT,
    TOKEN_PROGRAM,
    TOKEN_LAYOUT,
    ASSOCIATED_TOKEN_PROGRAM,
    findProgramAddress,
    findAccount,
    getMetaData,
    getMetaDataPDA,
    ...instructions
  };

  const getWSolSenderAccountKeypairIfNeeded = async ({ paymentRoute })=> {

    if(
      paymentRoute.fromToken.address === Blockchains__default["default"].solana.currency.address &&
      paymentRoute.toToken.address !== Blockchains__default["default"].solana.currency.address
    ){
      return Keypair.generate()
    }
  };

  const getWSolEscrowAccountKeypairIfNeeded = async ({ paymentRoute })=> {

    if(
      paymentRoute.fromToken.address !== Blockchains__default["default"].solana.currency.address &&
      paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address
    ){
      return Keypair.generate()
    }
  };

  const createWSolSenderAccount = async ({ wSolSenderAccountKeypair, paymentRoute })=>{

    if(!wSolSenderAccountKeypair) {
      return
    }

    const wSolStartAmount = paymentRoute.fromToken.address === Blockchains__default["default"].solana.currency.address ? new BN(paymentRoute.fromAmount) : new BN('0');
    const provider = await getProvider('solana');
    const rent = new BN(await provider.getMinimumBalanceForRentExemption(Token.solana.TOKEN_LAYOUT.span));
    const owner = paymentRoute.fromAddress;
    const lamports = wSolStartAmount.add(rent);

    const createAccountInstruction = SystemProgram.createAccount({
      fromPubkey: new PublicKey(owner),
      newAccountPubkey: wSolSenderAccountKeypair.publicKey,
      programId: new PublicKey(Token.solana.TOKEN_PROGRAM),
      space: Token.solana.TOKEN_LAYOUT.span,
      lamports
    });

    const initializeAccountInstruction = Token.solana.initializeAccountInstruction({
      account: wSolSenderAccountKeypair.publicKey.toString(),
      token: Blockchains__default["default"].solana.wrapped.address,
      owner
    });

    return [
      createAccountInstruction,
      initializeAccountInstruction
    ]
  };

  const createEscrowOutWSolAccount = async ({ wSolEscrowAccountKeypair, paymentRoute })=>{

    if(!wSolEscrowAccountKeypair) {
      return
    }

    const provider = await getProvider('solana');
    const rent = new BN(await provider.getMinimumBalanceForRentExemption(Token.solana.TOKEN_LAYOUT.span));
    const owner = await getEscrowSolAccountPublicKey();

    const createAccountInstruction = SystemProgram.createAccount({
      fromPubkey: new PublicKey(paymentRoute.fromAddress),
      newAccountPubkey: wSolEscrowAccountKeypair.publicKey,
      programId: new PublicKey(Token.solana.TOKEN_PROGRAM),
      space: Token.solana.TOKEN_LAYOUT.span,
      lamports: rent
    });

    const initializeAccountInstruction = Token.solana.initializeAccountInstruction({
      account: wSolEscrowAccountKeypair.publicKey.toString(),
      token: Blockchains__default["default"].solana.wrapped.address,
      owner: owner.toString()
    });

    return [
      createAccountInstruction,
      initializeAccountInstruction
    ]
  };

  const getMiddleToken = ({ paymentRoute })=>{
    let path = [...paymentRoute.exchangeRoutes[0].path];
    if(path.indexOf(Blockchains__default["default"].solana.currency.address) > -1) { path.splice(path.indexOf(Blockchains__default["default"].solana.currency.address), 1); }
    if(path.indexOf(paymentRoute.fromToken.address) > -1) { path.splice(path.indexOf(paymentRoute.fromToken.address), 1); }
    if(path.indexOf(paymentRoute.toToken.address) > -1) { path.splice(path.indexOf(paymentRoute.toToken.address), 1); }

    if(path.length === 2 && path[0] === Blockchains__default["default"].solana.wrapped.address) {
      return path[1]
    } else { 
      return path[0]
    }
  };

  const getMiddleTokenAccountAddress = async ({ paymentRoute })=>{

    return await Token.solana.findProgramAddress({
      token: getMiddleToken({ paymentRoute }),
      owner: paymentRoute.fromAddress
    })
  };

  const getMiddleTokenAccount = async ({ paymentRoute })=> {

    return await request$1({
      blockchain: 'solana',
      address: await getMiddleTokenAccountAddress({ paymentRoute }),
      api: Token.solana.TOKEN_LAYOUT,
      cache: 1000
    })
  };

  const createTokenMiddleAccount = async ({ paymentRoute })=>{

    if(
      paymentRoute.exchangeRoutes.length === 0 ||
      getFixedPath(paymentRoute.exchangeRoutes[0].path).length <= 2
    ) {
      return
    }

    const middleTokenAccount = await getMiddleTokenAccount({ paymentRoute });
    if(middleTokenAccount) {
      return
    }

    return Token.solana.createAssociatedTokenAccountInstruction({
      token: getMiddleToken({ paymentRoute }),
      owner: paymentRoute.fromAddress,
      payer: paymentRoute.fromAddress,
    })
  };

  const closeWSolSenderAccount = async ({ wSolSenderAccountKeypair, paymentRoute })=>{

    if(!wSolSenderAccountKeypair) {
      return
    }
    
    return Token.solana.closeAccountInstruction({
      account: wSolSenderAccountKeypair.publicKey.toString(),
      owner: paymentRoute.fromAddress
    })
  };

  const getPaymentsAccountAddress = async({ from })=>{
    let seeds = [Buffer.from("payments"), new PublicKey(from).toBuffer()];

    let [ pdaPublicKey ] = await PublicKey.findProgramAddress(
      seeds, new PublicKey(routers$2.solana.address)
    );

    return pdaPublicKey
  };

  const getPaymentsAccountData = async({ from })=>{
    let address = (await getPaymentsAccountAddress({ from })).toString();
    return await request$1({
      blockchain: 'solana',
      address,
      api: struct$1([u64$3('anchorDiscriminator'), u64$3('nonce')]),
      cache: 1000
    })
  };

  const createPaymentsAccount = async({ from })=> {

    let paymentsAccountData = await getPaymentsAccountData({ from });
    if(paymentsAccountData) { 
      return
    }
    
    const keys = [
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: new PublicKey(from), isSigner: true, isWritable: true },
      { pubkey: await getPaymentsAccountAddress({ from }), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.createPaymentsAccount.layout.span);
    routers$2.solana.api.createPaymentsAccount.layout.encode({
      anchorDiscriminator: routers$2.solana.api.createPaymentsAccount.anchorDiscriminator
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const getPaymentSenderTokenAccountAddress = async ({ paymentRoute })=> {

    return await Token.solana.findProgramAddress({
      token: paymentRoute.fromToken.address,
      owner: paymentRoute.fromAddress
    })
  };

  const getPaymentReceiverTokenAccountAddress = async ({ paymentRoute })=> {

    return await Token.solana.findProgramAddress({
      token: paymentRoute.toToken.address,
      owner: paymentRoute.toAddress
    })
  };

  const getPaymentReceiverTokenAccount = async ({ paymentRoute })=> {

    return await Token.solana.findAccount({
      token: paymentRoute.toToken.address,
      owner: paymentRoute.toAddress
    })  
  };

  const createPaymentReceiverAccount = async({ paymentRoute })=> {
    
    if(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address) {

      const paymentReceiverBalance = await request$1({ blockchain: 'solana', method: 'balance', address: paymentRoute.toAddress });
      const provider = await getProvider('solana');
      const rent = new BN(await provider.getMinimumBalanceForRentExemption(0));
      const paymentAmount = new BN(paymentRoute.toAmount);

      if(new BN(paymentReceiverBalance).add(paymentAmount).gt(rent)) {
        return
      }
      
      return SystemProgram.transfer({
        fromPubkey: new PublicKey(paymentRoute.fromAddress),
        toPubkey: new PublicKey(paymentRoute.toAddress),
        lamports: rent.sub(paymentAmount)
      })
    
    } else {

      const token = paymentRoute.toToken.address;

      const paymentReceiverTokenAccount = await getPaymentReceiverTokenAccount({ paymentRoute });
      if(paymentReceiverTokenAccount) {
        return
      }

      return Token.solana.createAssociatedTokenAccountInstruction({
        token,
        owner: paymentRoute.toAddress,
        payer: paymentRoute.fromAddress,
      })
    }
  };

  const getFeeReceiverTokenAccountAddress = async ({ paymentRoute })=> {

    return await Token.solana.findProgramAddress({
      token: paymentRoute.toToken.address,
      owner: paymentRoute.fee.receiver
    })  
  };

  const getFeeReceiverTokenAccount = async ({ paymentRoute })=> {

    return await Token.solana.findAccount({
      token: paymentRoute.toToken.address,
      owner: paymentRoute.fee.receiver
    })
  };

  const createFeeReceiverAccount = async({ paymentRoute })=> {
    
    if(!paymentRoute.fee) {
      return
    }
    
    if(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address) {

      const feeReceiverBalance = await request$1({ blockchain: 'solana', method: 'balance', address: paymentRoute.fee.receiver });
      const provider = await getProvider('solana');
      const rent = new BN(await provider.getMinimumBalanceForRentExemption(0));
      const feeAmount = new BN(paymentRoute.feeAmount);

      if(new BN(feeReceiverBalance).add(feeAmount).gt(rent)) {
        return
      }
      
      return SystemProgram.transfer({
        fromPubkey: new PublicKey(paymentRoute.fromAddress),
        toPubkey: new PublicKey(paymentRoute.fee.receiver),
        lamports: rent.sub(feeAmount)
      })
    
    } else {

      const token = paymentRoute.toToken.address;

      const feeReceiverTokenAccount = await getFeeReceiverTokenAccount({ paymentRoute });
      
      if(feeReceiverTokenAccount) {
        return
      }

      return Token.solana.createAssociatedTokenAccountInstruction({
        token,
        owner: paymentRoute.fee.receiver,
        payer: paymentRoute.fromAddress,
      })
    }
  };

  const getEscrowSolAccountPublicKey = async()=>{

    let seeds = [Buffer.from("escrow_sol")];
    
    let [ pdaPublicKey, bump ] = await PublicKey.findProgramAddress(
      seeds, new PublicKey(routers$2.solana.address)
    );

    return pdaPublicKey
  };

  const getEscrowSolAccountData = async({ paymentRoute })=>{
    return await request$1({
      blockchain: 'solana',
      address: (await getEscrowSolAccountPublicKey()).toString(),
      api: struct$1([ u64$3('amount'), publicKey$1('owner') ]),
      cache: 1000
    })
  };

  const getEscrowAccountPublicKey = async({ paymentRoute })=>{

    let seeds = [
      Buffer.from("escrow"),
      new PublicKey(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address ? Blockchains__default["default"].solana.wrapped.address : paymentRoute.toToken.address).toBuffer()
    ];
    
    let [ pdaPublicKey, bump ] = await PublicKey.findProgramAddress(
      seeds, new PublicKey(routers$2.solana.address)
    );

    return pdaPublicKey
  };

  const getEscrowAccountData = async({ paymentRoute })=>{
    return await request$1({
      blockchain: 'solana',
      address: (await getEscrowAccountPublicKey({ paymentRoute })).toString(),
      api: Token.solana.TOKEN_LAYOUT,
      cache: 1000
    })
  };

  const createEscrowOutTokenAccount = async({ paymentRoute })=> {

    if(paymentRoute.exchangeRoutes.length === 0 || paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address) {
      return
    }

    const escrowAccount = await getEscrowAccountData({ paymentRoute });

    if(escrowAccount) {
      return
    }

    const keys = [
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      { pubkey: new PublicKey(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address ? Blockchains__default["default"].solana.wrapped.address : paymentRoute.toToken.address), isSigner: false, isWritable: true },
      { pubkey: await getEscrowAccountPublicKey({ paymentRoute }), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.createEscrowTokenAccount.layout.span);
    routers$2.solana.api.createEscrowTokenAccount.layout.encode({
      anchorDiscriminator: routers$2.solana.api.createEscrowTokenAccount.anchorDiscriminator
    }, data);
    
    return new TransactionInstruction({
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const createEscrowOutSolAccount = async({ paymentRoute })=> {

    if(
      paymentRoute.exchangeRoutes.length === 0 ||
      paymentRoute.toToken.address != Blockchains__default["default"].solana.currency.address
    ) {
      return
    }

    const escrowAccount = await getEscrowSolAccountData({ paymentRoute });

    if(escrowAccount) {
      return
    }

    const keys = [
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      { pubkey: await getEscrowSolAccountPublicKey(), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.createEscrowSolAccount.layout.span);
    routers$2.solana.api.createEscrowSolAccount.layout.encode({
      anchorDiscriminator: routers$2.solana.api.createEscrowSolAccount.anchorDiscriminator
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const getFixedPath = (path)=> path.filter((step)=>step!==Blockchains__default["default"].solana.currency.address);

  const getPaymentMethod = ({ paymentRoute })=>{

    if(
      paymentRoute.fromToken.address === Blockchains__default["default"].solana.currency.address &&
      paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address
    ){

      return 'routeSol'

    } else if (
      paymentRoute.fromToken.address !== Blockchains__default["default"].solana.currency.address &&
      paymentRoute.toToken.address !== Blockchains__default["default"].solana.currency.address &&
      paymentRoute.exchangeRoutes.length === 0
    ) {

      return 'routeToken'

    } else if (
      paymentRoute.exchangeRoutes.length > 0 &&
      getFixedPath(paymentRoute.exchangeRoutes[0].path).length === 2
    ) {

      if(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address) {

        return 'routeOrcaSwapSolOut'

      } else {

        return 'routeOrcaSwap'

      }

    } else if (
      paymentRoute.exchangeRoutes.length > 0 &&
      getFixedPath(paymentRoute.exchangeRoutes[0].path).length > 2
    ) {

      if(paymentRoute.toToken.address === Blockchains__default["default"].solana.currency.address) {

        return 'routeOrcaTwoHopSwapSolOut'

      } else {

        return 'routeOrcaTwoHopSwap'

      }

    } else {

      throw 'Payment method does not exist!'

    }
  };

  const getDeadline = ()=>{
    return Math.ceil(new Date().getTime()/1000)+1800 // 30 Minutes (lower causes wallet simulation issues)
  };

  const getNonce = (paymentsAccountData)=>{
    return paymentsAccountData ? paymentsAccountData.nonce : new BN('0')
  };

  const routeSol = async({ paymentRoute, nonce, deadline }) =>{

    const paymentReceiverPublicKey = new PublicKey(paymentRoute.toAddress);
    const feeReceiverPublicKey = paymentRoute.fee ? new PublicKey(paymentRoute.fee.receiver) : paymentReceiverPublicKey;

    const keys = [
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      { pubkey: paymentReceiverPublicKey, isSigner: false, isWritable: true },
      { pubkey: feeReceiverPublicKey, isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeSol.layout.span);
    routers$2.solana.api.routeSol.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeSol.anchorDiscriminator,
      nonce,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const routeToken = async({ paymentRoute, nonce, deadline }) =>{

    const senderTokenAccountAddress = await getPaymentSenderTokenAccountAddress({ paymentRoute });
    const paymentReceiverTokenAccountAddress = await getPaymentReceiverTokenAccountAddress({ paymentRoute });
    const feeReceiverTokenAccountAddress = paymentRoute.fee ? await getFeeReceiverTokenAccountAddress({ paymentRoute }) : paymentReceiverTokenAccountAddress;

    const keys = [
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(senderTokenAccountAddress), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(paymentReceiverTokenAccountAddress), isSigner: false, isWritable: true },
      { pubkey: new PublicKey(feeReceiverTokenAccountAddress), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeToken.layout.span);
    routers$2.solana.api.routeToken.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeToken.anchorDiscriminator,
      nonce,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data 
    })    
  };

  const routeOrcaSwap = async({ paymentRoute, nonce, wSolSenderAccountKeypair, deadline }) =>{

    const senderTokenAccountAddress = wSolSenderAccountKeypair ? wSolSenderAccountKeypair.publicKey : await getPaymentSenderTokenAccountAddress({ paymentRoute });
    const paymentReceiverTokenAccountAddress = await getPaymentReceiverTokenAccountAddress({ paymentRoute });
    const feeReceiverTokenAccountAddress = paymentRoute.fee ? await getFeeReceiverTokenAccountAddress({ paymentRoute }) : paymentReceiverTokenAccountAddress;
    const escrowOutPublicKey = await getEscrowAccountPublicKey({ paymentRoute });
    const exchangeRouteTransaction = await paymentRoute.exchangeRoutes[0].getTransaction({ account: paymentRoute.fromAddress });
    const exchangeRouteSwapInstruction = exchangeRouteTransaction.instructions.find((instruction)=>instruction.programId.toString() === routers$2.solana.ammProgram);

    const SWAP_LAYOUT = struct$1([
      u64$3("anchorDiscriminator"),
      u64$3("amount"),
      u64$3("otherAmountThreshold"),
      u128("sqrtPriceLimit"),
      bool$1("amountSpecifiedIsInput"),
      bool$1("aToB"),
    ]);
    const exchangeRouteSwapInstructionData = SWAP_LAYOUT.decode(exchangeRouteSwapInstruction.data);

    const keys = [
      // token_program
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      // amm_program
      { pubkey: new PublicKey(routers$2.solana.ammProgram), isSigner: false, isWritable: false },
      // sender
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      // payments
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      // sender_token_account
      { pubkey: new PublicKey(senderTokenAccountAddress), isSigner: false, isWritable: true },
      // whirlpool
      exchangeRouteSwapInstruction.keys[2],
      // token_vault_a
      exchangeRouteSwapInstruction.keys[4],
      // token_vault_b
      exchangeRouteSwapInstruction.keys[6],
      // tick_array_0
      exchangeRouteSwapInstruction.keys[7],
      // tick_array_1
      exchangeRouteSwapInstruction.keys[8],
      // tick_array_2
      exchangeRouteSwapInstruction.keys[9],
      // oracle
      exchangeRouteSwapInstruction.keys[10],
      // escrow_out
      { pubkey: escrowOutPublicKey, isSigner: false, isWritable: true },
      // payment_receiver
      { pubkey: new PublicKey(paymentReceiverTokenAccountAddress), isSigner: false, isWritable: true },
      // fee_receiver
      { pubkey: new PublicKey(feeReceiverTokenAccountAddress), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeOrcaSwap.layout.span);
    routers$2.solana.api.routeOrcaSwap.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeOrcaSwap.anchorDiscriminator,
      nonce,
      amountIn: exchangeRouteSwapInstructionData.amount,
      sqrtPriceLimit: exchangeRouteSwapInstructionData.sqrtPriceLimit,
      amountSpecifiedIsInput: exchangeRouteSwapInstructionData.amountSpecifiedIsInput,
      aToB: exchangeRouteSwapInstructionData.aToB,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const routeOrcaSwapSolOut = async({ paymentRoute, nonce, wSolEscrowAccountKeypair, deadline }) =>{

    const senderTokenAccountAddress = await getPaymentSenderTokenAccountAddress({ paymentRoute });
    const escrowOutWsolPublicKey = wSolEscrowAccountKeypair.publicKey;
    const exchangeRouteTransaction = await paymentRoute.exchangeRoutes[0].getTransaction({ account: paymentRoute.fromAddress });
    const exchangeRouteSwapInstruction = exchangeRouteTransaction.instructions.find((instruction)=>instruction.programId.toString() === routers$2.solana.ammProgram);

    const SWAP_LAYOUT = struct$1([
      u64$3("anchorDiscriminator"),
      u64$3("amount"),
      u64$3("otherAmountThreshold"),
      u128("sqrtPriceLimit"),
      bool$1("amountSpecifiedIsInput"),
      bool$1("aToB"),
    ]);
    const exchangeRouteSwapInstructionData = SWAP_LAYOUT.decode(exchangeRouteSwapInstruction.data);

    const keys = [
      // system_program
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      // token_program
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      // amm_program
      { pubkey: new PublicKey(routers$2.solana.ammProgram), isSigner: false, isWritable: false },
      // sender
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      // payments
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      // sender_token_account
      { pubkey: new PublicKey(senderTokenAccountAddress), isSigner: false, isWritable: true },
      // whirlpool
      exchangeRouteSwapInstruction.keys[2],
      // token_vault_a
      exchangeRouteSwapInstruction.keys[4],
      // token_vault_b
      exchangeRouteSwapInstruction.keys[6],
      // tick_array_0
      exchangeRouteSwapInstruction.keys[7],
      // tick_array_1
      exchangeRouteSwapInstruction.keys[8],
      // tick_array_2
      exchangeRouteSwapInstruction.keys[9],
      // oracle
      exchangeRouteSwapInstruction.keys[10],
      // escrow_out
      { pubkey: escrowOutWsolPublicKey, isSigner: false, isWritable: true },
      // escrow_out_sol
      { pubkey: await getEscrowSolAccountPublicKey(), isSigner: false, isWritable: true },
      // payment_receiver
      { pubkey: new PublicKey(paymentRoute.toAddress), isSigner: false, isWritable: true },
      // fee_receiver
      { pubkey: new PublicKey(paymentRoute.fee ? paymentRoute.fee.receiver : paymentRoute.toAddress), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeOrcaSwapSolOut.layout.span);
    routers$2.solana.api.routeOrcaSwapSolOut.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeOrcaSwapSolOut.anchorDiscriminator,
      nonce,
      amountIn: exchangeRouteSwapInstructionData.amount,
      sqrtPriceLimit: exchangeRouteSwapInstructionData.sqrtPriceLimit,
      amountSpecifiedIsInput: exchangeRouteSwapInstructionData.amountSpecifiedIsInput,
      aToB: exchangeRouteSwapInstructionData.aToB,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const routeOrcaTwoHopSwap = async({ paymentRoute, nonce, wSolSenderAccountKeypair, deadline }) =>{

    const paymentReceiverTokenAccountPublicKey = new PublicKey(await getPaymentReceiverTokenAccountAddress({ paymentRoute }));
    const feeReceiverTokenAccountPublicKey = paymentRoute.fee ? new PublicKey(await getFeeReceiverTokenAccountAddress({ paymentRoute })) : paymentReceiverTokenAccountPublicKey;
    const escrowOutPublicKey = await getEscrowAccountPublicKey({ paymentRoute });
    const middleTokenAccountPublicKey = new PublicKey(await getMiddleTokenAccountAddress({ paymentRoute }));
    const exchangeRouteTransaction = await paymentRoute.exchangeRoutes[0].getTransaction({ account: paymentRoute.fromAddress });
    const exchangeRouteSwapInstruction = exchangeRouteTransaction.instructions.find((instruction)=>instruction.programId.toString() === routers$2.solana.ammProgram);
    const senderTokenAccountPublicKey = wSolSenderAccountKeypair ? wSolSenderAccountKeypair.publicKey : new PublicKey(await getPaymentSenderTokenAccountAddress({ paymentRoute }));

    const SWAP_LAYOUT = struct$1([
      u64$3("anchorDiscriminator"),
      u64$3("amount"),
      u64$3("otherAmountThreshold"),
      bool$1("amountSpecifiedIsInput"),
      bool$1("aToBOne"),
      bool$1("aToBTwo"),
      u128("sqrtPriceLimitOne"),
      u128("sqrtPriceLimitTwo"),
    ]);
    const exchangeRouteSwapInstructionData = SWAP_LAYOUT.decode(exchangeRouteSwapInstruction.data);

    const keys = [
      // token_program
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      // amm_program
      { pubkey: new PublicKey(routers$2.solana.ammProgram), isSigner: false, isWritable: false },
      // sender
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      // payments
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      // whirlpool_one
      exchangeRouteSwapInstruction.keys[2],
      // whirlpool_two
      exchangeRouteSwapInstruction.keys[3],
      // sender_token_account
      { pubkey: senderTokenAccountPublicKey, isSigner: false, isWritable: true },
      // token_vault_one_a
      exchangeRouteSwapInstruction.keys[5],
      // token_vault_one_b
      exchangeRouteSwapInstruction.keys[7],
      // middle_token_account
      { pubkey: middleTokenAccountPublicKey, isSigner: false, isWritable: true },
      // token_vault_two_a
      exchangeRouteSwapInstruction.keys[9],
      // token_vault_two_b
      exchangeRouteSwapInstruction.keys[11],
      // tick_array_one_0
      exchangeRouteSwapInstruction.keys[12],
      // tick_array_one_1
      exchangeRouteSwapInstruction.keys[13],
      // tick_array_one_2
      exchangeRouteSwapInstruction.keys[14],
      // tick_array_two_0
      exchangeRouteSwapInstruction.keys[15],
      // tick_array_two_1
      exchangeRouteSwapInstruction.keys[16],
      // tick_array_two_2
      exchangeRouteSwapInstruction.keys[17],
      // oracle_one
      exchangeRouteSwapInstruction.keys[18],
      // oracle_two
      exchangeRouteSwapInstruction.keys[19],
      // escrow_out
      { pubkey: escrowOutPublicKey, isSigner: false, isWritable: true },
      // payment_receiver
      { pubkey: paymentReceiverTokenAccountPublicKey, isSigner: false, isWritable: true },
      // fee_receiver
      { pubkey: feeReceiverTokenAccountPublicKey, isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeOrcaTwoHopSwap.layout.span);
    routers$2.solana.api.routeOrcaTwoHopSwap.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeOrcaTwoHopSwap.anchorDiscriminator,
      nonce,
      amountIn: exchangeRouteSwapInstructionData.amount,
      amountSpecifiedIsInput: exchangeRouteSwapInstructionData.amountSpecifiedIsInput,
      aToBOne: exchangeRouteSwapInstructionData.aToBOne,
      aToBTwo: exchangeRouteSwapInstructionData.aToBTwo,
      sqrtPriceLimitOne: exchangeRouteSwapInstructionData.sqrtPriceLimitOne,
      sqrtPriceLimitTwo: exchangeRouteSwapInstructionData.sqrtPriceLimitTwo,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const routeOrcaTwoHopSwapSolOut = async({ paymentRoute, nonce, wSolEscrowAccountKeypair, deadline }) =>{

    const middleTokenAccountPublicKey = new PublicKey(await getMiddleTokenAccountAddress({ paymentRoute }));
    const exchangeRouteTransaction = await paymentRoute.exchangeRoutes[0].getTransaction({ account: paymentRoute.fromAddress });
    const exchangeRouteSwapInstruction = exchangeRouteTransaction.instructions.find((instruction)=>instruction.programId.toString() === routers$2.solana.ammProgram);
    const senderTokenAccountPublicKey = new PublicKey(await getPaymentSenderTokenAccountAddress({ paymentRoute }));

    const SWAP_LAYOUT = struct$1([
      u64$3("anchorDiscriminator"),
      u64$3("amount"),
      u64$3("otherAmountThreshold"),
      bool$1("amountSpecifiedIsInput"),
      bool$1("aToBOne"),
      bool$1("aToBTwo"),
      u128("sqrtPriceLimitOne"),
      u128("sqrtPriceLimitTwo"),
    ]);
    const exchangeRouteSwapInstructionData = SWAP_LAYOUT.decode(exchangeRouteSwapInstruction.data);

    const keys = [
      // system_program
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      // token_program
      { pubkey: new PublicKey(Token.solana.TOKEN_PROGRAM), isSigner: false, isWritable: false },
      // amm_program
      { pubkey: new PublicKey(routers$2.solana.ammProgram), isSigner: false, isWritable: false },
      // sender
      { pubkey: new PublicKey(paymentRoute.fromAddress), isSigner: true, isWritable: true },
      // payments
      { pubkey: await getPaymentsAccountAddress({ from: paymentRoute.fromAddress }), isSigner: false, isWritable: true },
      // sender_token_account
      { pubkey: senderTokenAccountPublicKey, isSigner: false, isWritable: true },
      // whirlpool_one
      exchangeRouteSwapInstruction.keys[2],
      // whirlpool_two
      exchangeRouteSwapInstruction.keys[3],
      // token_vault_one_a
      exchangeRouteSwapInstruction.keys[5],
      // token_vault_one_b
      exchangeRouteSwapInstruction.keys[7],
      // middle_token_account
      { pubkey: middleTokenAccountPublicKey, isSigner: false, isWritable: true },
      // token_vault_two_a
      exchangeRouteSwapInstruction.keys[9],
      // token_vault_two_b
      exchangeRouteSwapInstruction.keys[11],
      // tick_array_one_0
      exchangeRouteSwapInstruction.keys[12],
      // tick_array_one_1
      exchangeRouteSwapInstruction.keys[13],
      // tick_array_one_2
      exchangeRouteSwapInstruction.keys[14],
      // tick_array_two_0
      exchangeRouteSwapInstruction.keys[15],
      // tick_array_two_1
      exchangeRouteSwapInstruction.keys[16],
      // tick_array_two_2
      exchangeRouteSwapInstruction.keys[17],
      // oracle_one
      exchangeRouteSwapInstruction.keys[18],
      // oracle_two
      exchangeRouteSwapInstruction.keys[19],
      // escrow_out
      { pubkey: wSolEscrowAccountKeypair.publicKey, isSigner: false, isWritable: true },
      // escrow_out_sol
      { pubkey: await getEscrowSolAccountPublicKey(), isSigner: false, isWritable: true },
      // payment_receiver
      { pubkey: new PublicKey(paymentRoute.toAddress), isSigner: false, isWritable: true },
      // fee_receiver
      { pubkey: new PublicKey(paymentRoute.fee ? paymentRoute.fee.receiver : paymentRoute.toAddress), isSigner: false, isWritable: true },
    ];

    const data = Buffer.alloc(routers$2.solana.api.routeOrcaTwoHopSwapSolOut.layout.span);
    routers$2.solana.api.routeOrcaTwoHopSwapSolOut.layout.encode({
      anchorDiscriminator: routers$2.solana.api.routeOrcaTwoHopSwapSolOut.anchorDiscriminator,
      nonce,
      amountIn: exchangeRouteSwapInstructionData.amount,
      amountSpecifiedIsInput: exchangeRouteSwapInstructionData.amountSpecifiedIsInput,
      aToBOne: exchangeRouteSwapInstructionData.aToBOne,
      aToBTwo: exchangeRouteSwapInstructionData.aToBTwo,
      sqrtPriceLimitOne: exchangeRouteSwapInstructionData.sqrtPriceLimitOne,
      sqrtPriceLimitTwo: exchangeRouteSwapInstructionData.sqrtPriceLimitTwo,
      paymentAmount: new BN(paymentRoute.toAmount.toString()),
      feeAmount: new BN((paymentRoute.feeAmount || '0').toString()),
      deadline: new BN(deadline),
    }, data);
    
    return new TransactionInstruction({ 
      keys,
      programId: new PublicKey(routers$2.solana.address),
      data
    })
  };

  const payment = async({ paymentRoute, wSolSenderAccountKeypair, wSolEscrowAccountKeypair, nonce, deadline })=> {

    const paymentMethod = getPaymentMethod({ paymentRoute });

    switch(paymentMethod){
      
      case 'routeSol':
      return await routeSol({ paymentRoute, nonce, deadline });
      
      case 'routeToken':
      return await routeToken({ paymentRoute, nonce, deadline });

      case 'routeOrcaSwap':
      return await routeOrcaSwap({ paymentRoute, nonce, wSolSenderAccountKeypair, deadline });

      case 'routeOrcaSwapSolOut':
      return await routeOrcaSwapSolOut({ paymentRoute, nonce, wSolEscrowAccountKeypair, deadline });

      case 'routeOrcaTwoHopSwap':
      return await routeOrcaTwoHopSwap({ paymentRoute, nonce, wSolSenderAccountKeypair, deadline });

      case 'routeOrcaTwoHopSwapSolOut':
      return await routeOrcaTwoHopSwapSolOut({ paymentRoute, nonce, wSolEscrowAccountKeypair, deadline });

    }

  };

  const getTransaction$3 = async({ paymentRoute })=> {

    const paymentsAccountData = await getPaymentsAccountData({ from: paymentRoute.fromAddress });
    const deadline = getDeadline();
    const nonce = getNonce(paymentsAccountData);

    const wSolSenderAccountKeypair = await getWSolSenderAccountKeypairIfNeeded({ paymentRoute });
    const wSolEscrowAccountKeypair = await getWSolEscrowAccountKeypairIfNeeded({ paymentRoute });

    let instructions = (
      await Promise.all([
        createPaymentsAccount({ from: paymentRoute.fromAddress }),
        createWSolSenderAccount({ paymentRoute, wSolSenderAccountKeypair }),
        createTokenMiddleAccount({ paymentRoute }),
        createPaymentReceiverAccount({ paymentRoute }),
        createFeeReceiverAccount({ paymentRoute }),
        createEscrowOutSolAccount({ paymentRoute }), // needs to happen before createEscrowOutWSolAccount
        createEscrowOutWSolAccount({ paymentRoute, wSolEscrowAccountKeypair }),
        createEscrowOutTokenAccount({ paymentRoute }),
        payment({ paymentRoute, wSolSenderAccountKeypair, wSolEscrowAccountKeypair, nonce, deadline }),
        closeWSolSenderAccount({ paymentRoute, wSolSenderAccountKeypair }),
      ])
    ).filter(Boolean).flat();

    const transaction = {
      blockchain: paymentRoute.blockchain,
      instructions,
      signers: [wSolSenderAccountKeypair, wSolEscrowAccountKeypair].filter(Boolean),
      alts: [routers$2.solana.alt]
    };

    // debug(transaction, paymentRoute)

    transaction.deadline = deadline;
    transaction.nonce = nonce.toString();

    return transaction
  };

  const API = [{"inputs":[{"internalType":"address","name":"_PERMIT2","type":"address"},{"internalType":"address","name":"_FORWARDER","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ExchangeCallFailed","type":"error"},{"inputs":[],"name":"ExchangeCallMissing","type":"error"},{"inputs":[],"name":"ExchangeNotApproved","type":"error"},{"inputs":[],"name":"ForwardingPaymentFailed","type":"error"},{"inputs":[],"name":"InsufficientBalanceInAfterPayment","type":"error"},{"inputs":[],"name":"InsufficientBalanceOutAfterPayment","type":"error"},{"inputs":[],"name":"NativeFeePaymentFailed","type":"error"},{"inputs":[],"name":"NativePaymentFailed","type":"error"},{"inputs":[],"name":"PaymentDeadlineReached","type":"error"},{"inputs":[],"name":"PaymentToZeroAddressNotAllowed","type":"error"},{"inputs":[],"name":"WrongAmountPaidIn","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"exchange","type":"address"}],"name":"Disabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"exchange","type":"address"}],"name":"Enabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"InternalTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"FORWARDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"exchange","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"}],"name":"enable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"exchanges","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"bool","name":"permit2","type":"bool"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"address","name":"tokenInAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"address","name":"tokenOutAddress","type":"address"},{"internalType":"address","name":"paymentReceiverAddress","type":"address"},{"internalType":"address","name":"feeReceiverAddress","type":"address"},{"internalType":"uint8","name":"exchangeType","type":"uint8"},{"internalType":"uint8","name":"receiverType","type":"uint8"},{"internalType":"bytes","name":"exchangeCallData","type":"bytes"},{"internalType":"bytes","name":"receiverCallData","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct IDePayRouterV2.Payment","name":"payment","type":"tuple"}],"name":"pay","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"bool","name":"permit2","type":"bool"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"address","name":"tokenInAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"address","name":"tokenOutAddress","type":"address"},{"internalType":"address","name":"paymentReceiverAddress","type":"address"},{"internalType":"address","name":"feeReceiverAddress","type":"address"},{"internalType":"uint8","name":"exchangeType","type":"uint8"},{"internalType":"uint8","name":"receiverType","type":"uint8"},{"internalType":"bytes","name":"exchangeCallData","type":"bytes"},{"internalType":"bytes","name":"receiverCallData","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct IDePayRouterV2.Payment","name":"payment","type":"tuple"},{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"},{"internalType":"uint48","name":"nonce","type":"uint48"}],"internalType":"struct IPermit2.PermitDetails","name":"details","type":"tuple"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"sigDeadline","type":"uint256"}],"internalType":"struct IPermit2.PermitSingle","name":"permitSingle","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"pay","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}];

  var routers$1 = {

    ethereum: {
      address: '0x6466F27B169C908Ba8174d80aEfa7173CbC3D0c7',
      api: API
    },

    bsc: {
      address: '0x7ea09401db4692a8AEF4111b75bD32AE758f552A',
      api: API
    },

    polygon: {
      address: '0x50CFAB577623B1359602E11514a9482B061A941e',
      api: API
    },

    fantom: {
      address: '0xFee05C41195985909DDfc9127Db1f94559c46db3',
      api: API
    },

    avalanche: {
      address: '0xFee05C41195985909DDfc9127Db1f94559c46db3',
      api: API
    },

    gnosis: {
      address: '0xFee05C41195985909DDfc9127Db1f94559c46db3',
      api: API
    },

    arbitrum: {
      address: '0xA1cfbeeF344A52e18f748fd6a126f9426A40fbc7',
      api: API
    },

    optimism: {
      address: '0x8698E529E9867eEbcC68b4792daC627cd8870736',
      api: API
    },

    base: {
      address: '0x8B127D169D232D5F3ebE1C3D06CE343FD7C1AA11',
      api: API
    },

    worldchain: {
      address: '0xC9850b32475f4fdE5c972EA6f967982a3c435D10',
      api: [{"inputs":[{"internalType":"address","name":"_PERMIT2","type":"address"},{"internalType":"address","name":"_FORWARDER","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ExchangeCallFailed","type":"error"},{"inputs":[],"name":"ExchangeCallMissing","type":"error"},{"inputs":[],"name":"ExchangeNotApproved","type":"error"},{"inputs":[],"name":"ForwardingPaymentFailed","type":"error"},{"inputs":[],"name":"InsufficientBalanceInAfterPayment","type":"error"},{"inputs":[],"name":"InsufficientBalanceOutAfterPayment","type":"error"},{"inputs":[],"name":"InsufficientProtocolAmount","type":"error"},{"inputs":[],"name":"NativeFeePaymentFailed","type":"error"},{"inputs":[],"name":"NativePaymentFailed","type":"error"},{"inputs":[],"name":"PaymentDeadlineReached","type":"error"},{"inputs":[],"name":"PaymentToZeroAddressNotAllowed","type":"error"},{"inputs":[],"name":"WrongAmountPaidIn","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"exchange","type":"address"}],"name":"Disabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"exchange","type":"address"}],"name":"Enabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"deadline","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"slippageAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"tokenInAddress","type":"address"},{"indexed":false,"internalType":"address","name":"tokenOutAddress","type":"address"},{"indexed":false,"internalType":"address","name":"feeReceiverAddress","type":"address"}],"name":"Payment","type":"event"},{"inputs":[],"name":"FORWARDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"exchange","type":"address"},{"internalType":"bool","name":"enabled","type":"bool"}],"name":"enable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"exchanges","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"protocolAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"address","name":"tokenInAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"address","name":"tokenOutAddress","type":"address"},{"internalType":"address","name":"paymentReceiverAddress","type":"address"},{"internalType":"address","name":"feeReceiverAddress","type":"address"},{"internalType":"uint8","name":"exchangeType","type":"uint8"},{"internalType":"uint8","name":"receiverType","type":"uint8"},{"internalType":"bool","name":"permit2","type":"bool"},{"internalType":"bytes","name":"exchangeCallData","type":"bytes"},{"internalType":"bytes","name":"receiverCallData","type":"bytes"}],"internalType":"structIDePayRouterV3.Payment","name":"payment","type":"tuple"},{"components":[{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"structIPermit2.TokenPermissions","name":"permitted","type":"tuple"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"structIPermit2.PermitTransferFrom","name":"permitTransferFrom","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"structIDePayRouterV3.PermitTransferFromAndSignature","name":"permitTransferFromAndSignature","type":"tuple"}],"name":"pay","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"protocolAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"address","name":"tokenInAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"address","name":"tokenOutAddress","type":"address"},{"internalType":"address","name":"paymentReceiverAddress","type":"address"},{"internalType":"address","name":"feeReceiverAddress","type":"address"},{"internalType":"uint8","name":"exchangeType","type":"uint8"},{"internalType":"uint8","name":"receiverType","type":"uint8"},{"internalType":"bool","name":"permit2","type":"bool"},{"internalType":"bytes","name":"exchangeCallData","type":"bytes"},{"internalType":"bytes","name":"receiverCallData","type":"bytes"}],"internalType":"structIDePayRouterV3.Payment","name":"payment","type":"tuple"}],"name":"pay","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"protocolAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"address","name":"tokenInAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"address","name":"tokenOutAddress","type":"address"},{"internalType":"address","name":"paymentReceiverAddress","type":"address"},{"internalType":"address","name":"feeReceiverAddress","type":"address"},{"internalType":"uint8","name":"exchangeType","type":"uint8"},{"internalType":"uint8","name":"receiverType","type":"uint8"},{"internalType":"bool","name":"permit2","type":"bool"},{"internalType":"bytes","name":"exchangeCallData","type":"bytes"},{"internalType":"bytes","name":"receiverCallData","type":"bytes"}],"internalType":"structIDePayRouterV3.Payment","name":"payment","type":"tuple"},{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"},{"internalType":"uint48","name":"nonce","type":"uint48"}],"internalType":"structIPermit2.PermitDetails","name":"details","type":"tuple"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"sigDeadline","type":"uint256"}],"internalType":"structIPermit2.PermitSingle","name":"permitSingle","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"pay","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]
    },

  };

  let solanaRouters = {};


  var routers = {... routers$1, ...solanaRouters};

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  /** Detect free variable `global` from Node.js. */

  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Built-in value references. */
  _Symbol ? _Symbol.toStringTag : undefined;

  /** Built-in value references. */
  _Symbol ? _Symbol.toStringTag : undefined;

  // lower blockchain cost is better
  const getBlockchainCost = (blockchain) => {
    // in $USD
    switch(blockchain) {
      case 'solana':
        return 0.000125
      case 'worldchain':
        return 0.0043
      case 'gnosis':
        return 0.0090
      case 'base':
        return 0.0095
      case 'optimism':
        return 0.0096
      case 'polygon':
        return 0.011
      case 'fantom':
        return 0.05
      case 'avalanche':
        return 0.10
      case 'arbitrum':
        return 0.11
      case 'bsc':
        return 0.20
      case 'ethereum':
        return 10.0
      default:
        return 100
    }
  };

  let _window;

  let getWindow = () => {
    if(_window) { return _window }
    if (typeof global == 'object') {
      _window = global;
    } else {
      _window = window;
    }
    return _window
  };

  const getConfiguration = () =>{
    if(getWindow()._Web3ClientConfiguration === undefined) {
      getWindow()._Web3ClientConfiguration = {};
    }
    return getWindow()._Web3ClientConfiguration
  };

  function _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const BATCH_INTERVAL = 10;
  const CHUNK_SIZE = 50;
  const MAX_RETRY = 5;

  class StaticJsonRpcBatchProvider extends ethers.ethers.providers.JsonRpcProvider {

    constructor(url, network, endpoints, failover) {
      super(url);
      this._network = network;
      this._endpoint = url;
      this._endpoints = endpoints;
      this._failover = failover;
      this._pendingBatch = [];
    }

    handleError(error, attempt, chunk) {
      if(attempt < MAX_RETRY && error) {
        const index = this._endpoints.indexOf(this._endpoint)+1;
        this._failover();
        this._endpoint = index >= this._endpoints.length ? this._endpoints[0] : this._endpoints[index];
        this.requestChunk(chunk, this._endpoint, attempt+1);
      } else {
        chunk.forEach((inflightRequest) => {
          inflightRequest.reject(error);
        });
      }
    }

    detectNetwork() {
      return Promise.resolve(Blockchains__default["default"].findByName(this._network).id)
    }

    batchRequest(batch, attempt) {
      return new Promise((resolve, reject) => {
        
        if (batch.length === 0) resolve([]); // Do nothing if requests is empty

        fetch(
          this._endpoint,
          {
            method: 'POST',
            body: JSON.stringify(batch),
            headers: { 'Content-Type': 'application/json' },
            signal: _optionalChain$2([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(10000) : undefined  // 10-second timeout
          }
        ).then((response)=>{
          if(response.ok) {
            response.json().then((parsedJson)=>{
              if(parsedJson.find((entry)=>{
                return _optionalChain$2([entry, 'optionalAccess', _2 => _2.error]) && [-32062,-32016].includes(_optionalChain$2([entry, 'optionalAccess', _3 => _3.error, 'optionalAccess', _4 => _4.code]))
              })) {
                if(attempt < MAX_RETRY) {
                  reject('Error in batch found!');
                } else {
                  resolve(parsedJson);
                }
              } else {
                resolve(parsedJson);
              }
            }).catch(reject);
          } else {
            reject(`${response.status} ${response.text}`);
          }
        }).catch(reject);
      })
    }

    requestChunk(chunk, endpoint, attempt) {

      const batch = chunk.map((inflight) => inflight.request);

      try {
        return this.batchRequest(batch, attempt)
          .then((result) => {
            // For each result, feed it to the correct Promise, depending
            // on whether it was a success or error
            chunk.forEach((inflightRequest, index) => {
              const payload = result[index];
              if (_optionalChain$2([payload, 'optionalAccess', _5 => _5.error])) {
                const error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest.reject(error);
              } else if(_optionalChain$2([payload, 'optionalAccess', _6 => _6.result])) {
                inflightRequest.resolve(payload.result);
              } else {
                inflightRequest.reject();
              }
            });
          }).catch((error) => this.handleError(error, attempt, chunk))
      } catch (error){ this.handleError(error, attempt, chunk); }
    }
      
    send(method, params) {

      const request = {
        method: method,
        params: params,
        id: (this._nextId++),
        jsonrpc: "2.0"
      };

      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }

      const inflightRequest = { request, resolve: null, reject: null };

      const promise = new Promise((resolve, reject) => {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });

      this._pendingBatch.push(inflightRequest);

      if (!this._pendingBatchAggregator) {
        // Schedule batch for next event loop + short duration
        this._pendingBatchAggregator = setTimeout(() => {
          // Get the current batch and clear it, so new requests
          // go into the next batch
          const batch = this._pendingBatch;
          this._pendingBatch = [];
          this._pendingBatchAggregator = null;
          // Prepare Chunks of CHUNK_SIZE
          const chunks = [];
          for (let i = 0; i < Math.ceil(batch.length / CHUNK_SIZE); i++) {
            chunks[i] = batch.slice(i*CHUNK_SIZE, (i+1)*CHUNK_SIZE);
          }
          chunks.forEach((chunk)=>{
            // Get the request as an array of requests
            chunk.map((inflight) => inflight.request);
            return this.requestChunk(chunk, this._endpoint, 1)
          });
        }, getConfiguration().batchInterval || BATCH_INTERVAL);
      }

      return promise
    }

  }

  function _optionalChain$1$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  const getAllProviders = ()=> {
    if(getWindow()._Web3ClientProviders == undefined) {
      getWindow()._Web3ClientProviders = {};
    }
    return getWindow()._Web3ClientProviders
  };

  const setProvider$1 = (blockchain, provider)=> {
    if(provider == undefined) { return }
    if(getAllProviders()[blockchain] === undefined) { getAllProviders()[blockchain] = []; }
    const index = getAllProviders()[blockchain].indexOf(provider);
    if(index > -1) {
      getAllProviders()[blockchain].splice(index, 1);
    }
    getAllProviders()[blockchain].unshift(provider);
  };

  const setProviderEndpoints$1 = async (blockchain, endpoints, detectFastest = true)=> {
    
    getAllProviders()[blockchain] = endpoints.map((endpoint, index)=>
      new StaticJsonRpcBatchProvider(endpoint, blockchain, endpoints, ()=>{
        if(getAllProviders()[blockchain].length === 1) {
          setProviderEndpoints$1(blockchain, endpoints, detectFastest);
        } else {
          getAllProviders()[blockchain].splice(index, 1);
        }
      })
    );
    
    let provider;
    let window = getWindow();

    if(
      window.fetch == undefined ||
      (typeof process != 'undefined' && process['env'] && process['env']['NODE_ENV'] == 'test') ||
      (typeof window.cy != 'undefined') ||
      detectFastest === false
    ) {
      provider = getAllProviders()[blockchain][0];
    } else {
      
      let responseTimes = await Promise.all(endpoints.map((endpoint)=>{
        return new Promise(async (resolve)=>{
          let timeout = 900;
          let before = new Date().getTime();
          setTimeout(()=>resolve(timeout), timeout);
          let response;
          try {
            response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              referrer: "",
              referrerPolicy: "no-referrer",
              body: JSON.stringify({ method: 'net_version', id: 1, jsonrpc: '2.0' }),
              signal: _optionalChain$1$1([AbortSignal, 'optionalAccess', _ => _.timeout]) ? AbortSignal.timeout(10000) : undefined  // 10-second timeout
            });
          } catch (e) {}
          if(!_optionalChain$1$1([response, 'optionalAccess', _2 => _2.ok])) { return resolve(999) }
          let after = new Date().getTime();
          resolve(after-before);
        })
      }));

      const fastestResponse = Math.min(...responseTimes);
      const fastestIndex = responseTimes.indexOf(fastestResponse);
      provider = getAllProviders()[blockchain][fastestIndex];
    }
    
    setProvider$1(blockchain, provider);
  };

  const getProvider$1 = async (blockchain)=> {

    let providers = getAllProviders();
    if(providers && providers[blockchain]){ return providers[blockchain][0] }
    
    let window = getWindow();
    if(window._Web3ClientGetProviderPromise && window._Web3ClientGetProviderPromise[blockchain]) { return await window._Web3ClientGetProviderPromise[blockchain] }

    if(!window._Web3ClientGetProviderPromise){ window._Web3ClientGetProviderPromise = {}; }
    window._Web3ClientGetProviderPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$1(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow()._Web3ClientProviders[blockchain][0]);
    });

    return await window._Web3ClientGetProviderPromise[blockchain]
  };

  const getProviders$1 = async(blockchain)=>{

    let providers = getAllProviders();
    if(providers && providers[blockchain]){ return providers[blockchain] }
    
    let window = getWindow();
    if(window._Web3ClientGetProvidersPromise && window._Web3ClientGetProvidersPromise[blockchain]) { return await window._Web3ClientGetProvidersPromise[blockchain] }

    if(!window._Web3ClientGetProvidersPromise){ window._Web3ClientGetProvidersPromise = {}; }
    window._Web3ClientGetProvidersPromise[blockchain] = new Promise(async(resolve)=> {
      await setProviderEndpoints$1(blockchain, Blockchains__default["default"][blockchain].endpoints);
      resolve(getWindow()._Web3ClientProviders[blockchain]);
    });

    return await window._Web3ClientGetProvidersPromise[blockchain]
  };

  var EVM = {
    getProvider: getProvider$1,
    getProviders: getProviders$1,
    setProviderEndpoints: setProviderEndpoints$1,
    setProvider: setProvider$1,
  };

  let supported$1 = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$1.evm = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported$1.svm = [];

  function _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }
  let getCacheStore = () => {
    if (getWindow()._Web3ClientCacheStore == undefined) {
      getWindow()._Web3ClientCacheStore = {};
    }
    return getWindow()._Web3ClientCacheStore
  };

  let getPromiseStore = () => {
    if (getWindow()._Web3ClientPromiseStore == undefined) {
      getWindow()._Web3ClientPromiseStore = {};
    }
    return getWindow()._Web3ClientPromiseStore
  };

  let set = function ({ key, value, expires }) {
    getCacheStore()[key] = {
      expiresAt: Date.now() + expires,
      value,
    };
  };

  let get = function ({ key, expires }) {
    let cachedEntry = getCacheStore()[key];
    if (_optionalChain$3([cachedEntry, 'optionalAccess', _ => _.expiresAt]) > Date.now()) {
      return cachedEntry.value
    }
  };

  let getPromise = function({ key }) {
    return getPromiseStore()[key]
  };

  let setPromise = function({ key, promise }) {
    getPromiseStore()[key] = promise;
    return promise
  };

  let deletePromise = function({ key }) {
    getPromiseStore()[key] = undefined; 
  };

  let cache = function ({ call, key, expires = 0 }) {
    return new Promise((resolve, reject)=>{
      let value;
      key = JSON.stringify(key);
      
      // get existing promise (of a previous pending request asking for the exact same thing)
      let existingPromise = getPromise({ key });
      if(existingPromise) { 
        return existingPromise
          .then(resolve)
          .catch(reject)
      }

      setPromise({ key, promise: new Promise((resolveQueue, rejectQueue)=>{
        if (expires === 0) {
          return call()
            .then((value)=>{
              resolve(value);
              resolveQueue(value);
            })
            .catch((error)=>{
              reject(error);
              rejectQueue(error);
            })
        }
        
        // get cached value
        value = get({ key, expires });
        if (value) {
          resolve(value);
          resolveQueue(value);
          return value
        }

        // set new cache value
        call()
          .then((value)=>{
            if (value) {
              set({ key, value, expires });
            }
            resolve(value);
            resolveQueue(value);
          })
          .catch((error)=>{
            reject(error);
            rejectQueue(error);
          });
        })
      }).then(()=>{
        deletePromise({ key });
      }).catch(()=>{
        deletePromise({ key });
      });
    })
  };

  let paramsToContractArgs = ({ contract, method, params }) => {
    let fragment = contract.interface.fragments.find((fragment) => {
      return fragment.name == method
    });

    return fragment.inputs.map((input, index) => {
      if (Array.isArray(params)) {
        return params[index]
      } else {
        return params[input.name]
      }
    })
  };

  const contractCall = ({ address, api, method, params, provider, block }) => {
    const contract = new ethers.ethers.Contract(address, api, provider);
    const args = paramsToContractArgs({ contract, method, params });
    const fragment = contract.interface.fragments.find((fragment)=>fragment.name === method);
    if(contract[method] === undefined) {
      method = `${method}(${fragment.inputs.map((input)=>input.type).join(',')})`;
    }
    if(fragment && fragment.stateMutability === 'nonpayable') {
      return contract.callStatic[method](...args, { blockTag: block })
    } else {
      return contract[method](...args, { blockTag: block })
    }
  };

  const balance = ({ address, provider }) => {
    return provider.getBalance(address)
  };

  const transactionCount = ({ address, provider }) => {
    return provider.getTransactionCount(address)
  };

  const singleRequest = ({ blockchain, address, api, method, params, block, provider }) =>{
    if (api) {
      return contractCall({ address, api, method, params, provider, block })
    } else if (method === 'latestBlockNumber') {
      return provider.getBlockNumber()
    } else if (method === 'balance') {
      return balance({ address, provider })
    } else if (method === 'transactionCount') {
      return transactionCount({ address, provider })
    }
  };

  var requestEVM = async ({ blockchain, address, api, method, params, block, timeout, strategy }) => {

    strategy = strategy ? strategy : (getConfiguration().strategy || 'failover');
    timeout = timeout ? timeout : (getConfiguration().timeout || undefined);

    if(strategy === 'fastest') {

      const providers = await EVM.getProviders(blockchain);
      
      let allRequestsFailed = [];

      const allRequestsInParallel = providers.map((provider)=>{
        return new Promise((resolve)=>{
          allRequestsFailed.push(
            singleRequest({ blockchain, address, api, method, params, block, provider }).then(resolve)
          );
        })
      });
      
      const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout || 10000));

      allRequestsFailed = Promise.all(allRequestsFailed.map((request)=>{
        return new Promise((resolve)=>{ request.catch(resolve); })
      })).then(()=>{ return });

      return Promise.race([...allRequestsInParallel, timeoutPromise, allRequestsFailed])

    } else { // failover

      const provider = await EVM.getProvider(blockchain);
      const request = singleRequest({ blockchain, address, api, method, params, block, provider });
      
      if(timeout) {
        timeout = new Promise((_, reject)=>setTimeout(()=>{ reject(new Error("Web3ClientTimeout")); }, timeout));
        return Promise.race([request, timeout])
      } else {
        return request
      }
    }
  };

  var parseUrl = (url) => {
    if (typeof url == 'object') {
      return url
    }
    let deconstructed = url.match(/(?<blockchain>\w+):\/\/(?<part1>[\w\d]+)(\/(?<part2>[\w\d]+)*)?/);

    if(deconstructed.groups.part2 == undefined) {
      if(deconstructed.groups.part1.match(/\d/)) {
        return {
          blockchain: deconstructed.groups.blockchain,
          address: deconstructed.groups.part1
        }
      } else {
        return {
          blockchain: deconstructed.groups.blockchain,
          method: deconstructed.groups.part1
        }
      }
    } else {
      return {
        blockchain: deconstructed.groups.blockchain,
        address: deconstructed.groups.part1,
        method: deconstructed.groups.part2
      }
    }
  };

  const request = async function (url, options) {
    
    const { blockchain, address, method } = parseUrl(url);
    const { api, params, cache: cache$1, block, timeout, strategy, cacheKey } = (typeof(url) == 'object' ? url : options) || {};

    return await cache({
      expires: cache$1 || 0,
      key: cacheKey || [blockchain, address, method, params, block],
      call: async()=>{
        if(supported$1.evm.includes(blockchain)) {


          return await requestEVM({ blockchain, address, api, method, params, block, strategy, timeout })


        } else if(supported$1.svm.includes(blockchain)) ; else {
          throw 'Unknown blockchain: ' + blockchain
        }  
      }
    })
  };

  function _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

  const EXCHANGE_PROXIES = {
    'arbitrum': {
      [Blockchains__default["default"].arbitrum.wrapped.address]: '0x7E655088214d0657251A51aDccE9109CFd23B5B5'
    },
    'avalanche': {
      [Blockchains__default["default"].avalanche.wrapped.address]: '0x2d0a6275eaDa0d03226919ce6D93661E589B2d59'
    },
    'base': {
      [Blockchains__default["default"].base.wrapped.address]: '0xD1711710843B125a6a01FfDF9b95fDc3064BeF7A'
    },
    'bsc': {
      [Blockchains__default["default"].bsc.wrapped.address]: '0xeEb80d14abfB058AA78DE38813fe705c3e3b243E'
    },
    'ethereum': {
      [Blockchains__default["default"].ethereum.wrapped.address]: '0x298f4980525594b3b982779cf74ba76819708D43'
    },
    'fantom': {
      [Blockchains__default["default"].fantom.wrapped.address]: '0x2d0a6275eaDa0d03226919ce6D93661E589B2d59'
    },
    'gnosis': {
      [Blockchains__default["default"].gnosis.wrapped.address]: '0x2d0a6275eaDa0d03226919ce6D93661E589B2d59'
    },
    'optimism': {
      [Blockchains__default["default"].optimism.wrapped.address]: '0x69594057e2C0224deb1180c7a5Df9ec9d5B611B5'
    },
    'polygon': {
      [Blockchains__default["default"].polygon.wrapped.address]: '0xaE59C9d3E055BdFAa583E169aA5Ebe395689476a'
    },
    'worldchain': {
      [Blockchains__default["default"].worldchain.wrapped.address]: '0x2CA727BC33915823e3D05fe043d310B8c5b2dC5b'
    },
    'solana': {}
  };

  const getTransaction$2 = async({ paymentRoute, options })=> {

    let deadline;
    if(paymentRoute.blockchain === 'worldchain'){ // protocol V3 deadline
      deadline = Math.ceil(new Date())+3600*1000; // 1 hour in ms
    } else {
      deadline = Math.ceil(new Date()/1000)+3600; // 1 hour in s
    }

    const transaction = {
      blockchain: paymentRoute.blockchain,
      to: transactionAddress({ paymentRoute, options }),
      api: transactionApi({ paymentRoute, options }),
      method: transactionMethod({ paymentRoute, options }),
      params: await transactionParams({ paymentRoute, options, deadline }),
      value: transactionValue({ paymentRoute })
    };

    transaction.deadline = deadline;

    return transaction
  };

  const transactionAddress = ({ paymentRoute, options })=> {
    if(paymentRoute.directTransfer && !paymentRoute.fee && _optionalChain$1([options, 'optionalAccess', _ => _.wallet, 'optionalAccess', _2 => _2.name]) !== 'World App') {
      if(paymentRoute.toToken.address == Blockchains__default["default"][paymentRoute.blockchain].currency.address) {
        return paymentRoute.toAddress
      } else {
        return paymentRoute.toToken.address
      }
    } else {
      return routers$1[paymentRoute.blockchain].address
    }
  };

  const transactionApi = ({ paymentRoute, options })=> {
    if(paymentRoute.directTransfer && !paymentRoute.fee && _optionalChain$1([options, 'optionalAccess', _3 => _3.wallet, 'optionalAccess', _4 => _4.name]) !== 'World App') {
      if(paymentRoute.toToken.address == Blockchains__default["default"][paymentRoute.blockchain].currency.address) {
        return undefined
      } else {
        return Token__default["default"][paymentRoute.blockchain].DEFAULT
      }
    } else {
      return routers$1[paymentRoute.blockchain].api
    }
  };

  const transactionMethod = ({ paymentRoute, options })=> {
    if(paymentRoute.directTransfer && !paymentRoute.fee && _optionalChain$1([options, 'optionalAccess', _5 => _5.wallet, 'optionalAccess', _6 => _6.name]) !== 'World App') {
      if(paymentRoute.toToken.address == Blockchains__default["default"][paymentRoute.blockchain].currency.address) {
        return undefined
      } else { // standard token transfer
        return 'transfer'
      }
    } else {
      return 'pay'
    }
  };

  const getExchangeType = ({ exchangeRoute, blockchain })=> {
    if( typeof exchangeRoute === 'undefined' ) { return 0 }
    if(exchangeRoute.exchange[blockchain].router.address === Blockchains__default["default"][blockchain].wrapped.address) {
      return 2 // push
    } else {
      return 1 // pull
    }
  };

  const getExchangeCallData = ({ exchangeTransaction })=>{
    const contract = new ethers.ethers.Contract(exchangeTransaction.to, exchangeTransaction.api);
    const method = exchangeTransaction.method;
    const params = exchangeTransaction.params;
    
    let contractMethod;
    let fragment;
    fragment = contract.interface.fragments.find((fragment) => {
      return(
        fragment.name == method &&
        (fragment.inputs && params && typeof(params) === 'object' ? fragment.inputs.length == Object.keys(params).length : true)
      )
    });
    let paramsToEncode;
    if(fragment.inputs.length === 1 && fragment.inputs[0].type === 'tuple') {
      contractMethod = method;
      paramsToEncode = [params[fragment.inputs[0].name]];
    } else {
      contractMethod = `${method}(${fragment.inputs.map((input)=>input.type).join(',')})`;
      paramsToEncode = fragment.inputs.map((input) => {
        if(input.type === 'tuple') {
          let tuple = {};
          input.components.forEach((component, index)=>{
            tuple[component.name] = params[input.name][index];
          });
          contractMethod = method;
          return tuple
        } else {
          return params[input.name]
        }
      });
    }
    return contract.interface.encodeFunctionData(contractMethod, paramsToEncode)
  };

  const getPermit2SignatureTransferNonce = async({ address, blockchain })=>{
          
    const getBitmap = (address, word)=>request({
      blockchain: blockchain,
      address: Blockchains__default["default"][blockchain].permit2,
      api: [{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"AllowanceExpired","type":"error"},{"inputs":[],"name":"ExcessiveInvalidation","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"uint256","name":"maxAmount","type":"uint256"}],"name":"InvalidAmount","type":"error"},{"inputs":[],"name":"InvalidContractSignature","type":"error"},{"inputs":[],"name":"InvalidNonce","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"InvalidSignatureLength","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[],"name":"LengthMismatch","type":"error"},{"inputs":[{"internalType":"uint256","name":"signatureDeadline","type":"uint256"}],"name":"SignatureExpired","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint160","name":"amount","type":"uint160"},{"indexed":false,"internalType":"uint48","name":"expiration","type":"uint48"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"spender","type":"address"}],"name":"Lockdown","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint48","name":"newNonce","type":"uint48"},{"indexed":false,"internalType":"uint48","name":"oldNonce","type":"uint48"}],"name":"NonceInvalidation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint160","name":"amount","type":"uint160"},{"indexed":false,"internalType":"uint48","name":"expiration","type":"uint48"},{"indexed":false,"internalType":"uint48","name":"nonce","type":"uint48"}],"name":"Permit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"word","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mask","type":"uint256"}],"name":"UnorderedNonceInvalidation","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"},{"internalType":"uint48","name":"nonce","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint48","name":"newNonce","type":"uint48"}],"name":"invalidateNonces","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"wordPos","type":"uint256"},{"internalType":"uint256","name":"mask","type":"uint256"}],"name":"invalidateUnorderedNonces","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"internalType":"struct IAllowanceTransfer.TokenSpenderPair[]","name":"approvals","type":"tuple[]"}],"name":"lockdown","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"nonceBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"},{"internalType":"uint48","name":"nonce","type":"uint48"}],"internalType":"struct IAllowanceTransfer.PermitDetails[]","name":"details","type":"tuple[]"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"sigDeadline","type":"uint256"}],"internalType":"struct IAllowanceTransfer.PermitBatch","name":"permitBatch","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"uint48","name":"expiration","type":"uint48"},{"internalType":"uint48","name":"nonce","type":"uint48"}],"internalType":"struct IAllowanceTransfer.PermitDetails","name":"details","type":"tuple"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"sigDeadline","type":"uint256"}],"internalType":"struct IAllowanceTransfer.PermitSingle","name":"permitSingle","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ISignatureTransfer.TokenPermissions","name":"permitted","type":"tuple"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct ISignatureTransfer.PermitTransferFrom","name":"permit","type":"tuple"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"requestedAmount","type":"uint256"}],"internalType":"struct ISignatureTransfer.SignatureTransferDetails","name":"transferDetails","type":"tuple"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permitTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ISignatureTransfer.TokenPermissions[]","name":"permitted","type":"tuple[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct ISignatureTransfer.PermitBatchTransferFrom","name":"permit","type":"tuple"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"requestedAmount","type":"uint256"}],"internalType":"struct ISignatureTransfer.SignatureTransferDetails[]","name":"transferDetails","type":"tuple[]"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permitTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ISignatureTransfer.TokenPermissions","name":"permitted","type":"tuple"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct ISignatureTransfer.PermitTransferFrom","name":"permit","type":"tuple"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"requestedAmount","type":"uint256"}],"internalType":"struct ISignatureTransfer.SignatureTransferDetails","name":"transferDetails","type":"tuple"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"witness","type":"bytes32"},{"internalType":"string","name":"witnessTypeString","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permitWitnessTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ISignatureTransfer.TokenPermissions[]","name":"permitted","type":"tuple[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct ISignatureTransfer.PermitBatchTransferFrom","name":"permit","type":"tuple"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"requestedAmount","type":"uint256"}],"internalType":"struct ISignatureTransfer.SignatureTransferDetails[]","name":"transferDetails","type":"tuple[]"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"witness","type":"bytes32"},{"internalType":"string","name":"witnessTypeString","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"permitWitnessTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"address","name":"token","type":"address"}],"internalType":"struct IAllowanceTransfer.AllowanceTransferDetails[]","name":"transferDetails","type":"tuple[]"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint160","name":"amount","type":"uint160"},{"internalType":"address","name":"token","type":"address"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],
      method: 'nonceBitmap',
      params: [address, word]
    });

    const getFirstUnsetBit = (bitmap)=>{
      for (let i = 0; i < 256; i++) {
        if (bitmap.shr(i).and(1).eq(0)) {
          return i
        }
      }
      return -1
    };

    function buildNonce(word, bitPos) {
      return ethers.ethers.BigNumber.from(word).mul(256).add(bitPos)
    }

    let word = 0;

    while(word < 1) {
      const bitmap = await getBitmap(address, word);
      if(bitmap.toString() != Blockchains__default["default"][blockchain].maxInt) {
        const bitPos = getFirstUnsetBit(bitmap);
        if (bitPos >= 0) {
          // Build and return the nonce
          const nonce = buildNonce(word, bitPos);
          return nonce
        }
      }
      word = word+1;
    }
  };

  const transactionParams = async ({ paymentRoute, options, deadline })=> {
    if(paymentRoute.directTransfer && !paymentRoute.fee && _optionalChain$1([options, 'optionalAccess', _7 => _7.wallet, 'optionalAccess', _8 => _8.name]) !== 'World App') {
      if(paymentRoute.toToken.address == Blockchains__default["default"][paymentRoute.blockchain].currency.address) {
        return undefined
      } else { // standard token transfer
        return [paymentRoute.toAddress, paymentRoute.toAmount]
      }
    } else {
      const exchangeRoute = paymentRoute.exchangeRoutes[0];
      const exchangeType = getExchangeType({ exchangeRoute, blockchain: paymentRoute.blockchain });
      const exchangeTransaction = !exchangeRoute ? undefined : await exchangeRoute.getTransaction({
        account: routers$1[paymentRoute.blockchain].address,
        inputTokenPushed: exchangeType === 2
      });
      const exchangeCallData = !exchangeTransaction ? Blockchains__default["default"][paymentRoute.blockchain].zero : getExchangeCallData({ exchangeTransaction });
      let exchangeAddress = Blockchains__default["default"][paymentRoute.blockchain].zero;
      if (exchangeRoute) {
        if(
          paymentRoute.blockchain === 'bsc' &&
          exchangeRoute.exchange.name === 'pancakeswap_v3' &&
          paymentRoute.toToken.address === Blockchains__default["default"][paymentRoute.blockchain].currency.address
        ) {
          // bsc pancakeswap_v3 requries smart router exchange address for converting and paying out BNB/NATIVE
          exchangeAddress = exchangeRoute.exchange[paymentRoute.blockchain].smartRouter.address;
        } else { // proxy exchange or exchange directly
          exchangeAddress = EXCHANGE_PROXIES[exchangeTransaction.blockchain][exchangeRoute.exchange[paymentRoute.blockchain].router.address] || exchangeRoute.exchange[paymentRoute.blockchain].router.address;
        }
      }
      let params;
      if(options && _optionalChain$1([options, 'optionalAccess', _9 => _9.wallet, 'optionalAccess', _10 => _10.name]) === 'World App' && paymentRoute.blockchain === 'worldchain'){
        
        const permitDeadline = Math.floor(Date.now() / 1000) + 30 * 60;
        const nonce = await getPermit2SignatureTransferNonce({ blockchain: paymentRoute.blockchain, address: paymentRoute.fromAddress });
        
        const permitTransfer = {
          permitted: {
            token: paymentRoute.fromToken.address,
            amount: paymentRoute.fromAmount.toString(),
          },
          nonce: nonce.toString(),
          deadline: permitDeadline.toString(),
        };

        params = {
          args: [
            [ // payment
              paymentRoute.fromAmount.toString(), // amountIn
              paymentRoute.toAmount.toString(), // paymentAmount
              (paymentRoute.feeAmount || 0).toString(), // feeAmount
              "0", // protocolAmount
              deadline.toString(), // deadline
              paymentRoute.fromToken.address, // tokenInAddress
              exchangeAddress, // exchangeAddress
              paymentRoute.toToken.address, // tokenOutAddress
              paymentRoute.toAddress, // paymentReceiverAddress
              paymentRoute.fee ? paymentRoute.fee.receiver : Blockchains__default["default"][paymentRoute.blockchain].zero, // feeReceiverAddress
              exchangeType, // exchangeType
              0, // receiverType
              true, // permit2
              exchangeCallData, // exchangeCallData
              '0x', // receiverCallData
            ],
            [ // permitTransferFromAndSignature
              [ // permitTransferFrom
                [ // permitted
                  paymentRoute.fromToken.address, // token
                  paymentRoute.fromAmount.toString() // amount
                ],
                nonce.toString(), // nonce
                permitDeadline.toString() // deadline
              ],
              "PERMIT2_SIGNATURE_PLACEHOLDER_0"
            ]
          ],
          permit2: {
            ...permitTransfer,
            spender: routers$1[paymentRoute.blockchain].address,
          },
        };

      } else if(paymentRoute.blockchain === 'worldchain') {
        params = {
          payment: {
            amountIn: paymentRoute.fromAmount,
            paymentAmount: paymentRoute.toAmount,
            feeAmount: paymentRoute.feeAmount || 0,
            protocolAmount: 0,
            tokenInAddress: paymentRoute.fromToken.address,
            exchangeAddress,
            tokenOutAddress: paymentRoute.toToken.address,
            paymentReceiverAddress: paymentRoute.toAddress,
            feeReceiverAddress: paymentRoute.fee ? paymentRoute.fee.receiver : Blockchains__default["default"][paymentRoute.blockchain].zero,
            exchangeType: exchangeType,
            receiverType: 0,
            exchangeCallData: exchangeCallData,
            receiverCallData: Blockchains__default["default"][paymentRoute.blockchain].zero,
            deadline,
          }
        };
      } else {
        params = {
          payment: {
            amountIn: paymentRoute.fromAmount,
            paymentAmount: paymentRoute.toAmount,
            feeAmount: paymentRoute.feeAmount || 0,
            tokenInAddress: paymentRoute.fromToken.address,
            exchangeAddress,
            tokenOutAddress: paymentRoute.toToken.address,
            paymentReceiverAddress: paymentRoute.toAddress,
            feeReceiverAddress: paymentRoute.fee ? paymentRoute.fee.receiver : Blockchains__default["default"][paymentRoute.blockchain].zero,
            exchangeType: exchangeType,
            receiverType: 0,
            exchangeCallData: exchangeCallData,
            receiverCallData: Blockchains__default["default"][paymentRoute.blockchain].zero,
            deadline,
          }
        };
      }
      return params
    }
  };

  const transactionValue = ({ paymentRoute })=> {
    if(paymentRoute.fromToken.address == Blockchains__default["default"][paymentRoute.blockchain].currency.address) {
      if(!paymentRoute.directTransfer) {
        return paymentRoute.fromAmount.toString()
      } else { // direct payment
        return paymentRoute.toAmount.toString()
      }
    } else {
      return ethers.ethers.BigNumber.from('0').toString()
    }
  };

  let supported = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported.evm = ['ethereum', 'bsc', 'polygon', 'fantom', 'arbitrum', 'avalanche', 'gnosis', 'optimism', 'base', 'worldchain'];
  supported.svm = [];

  let solanaGetTransaction = ()=>{};

  const getTransaction$1 = ({ paymentRoute, fee, options })=>{
    if(supported.evm.includes(paymentRoute.blockchain)) {
      return getTransaction$2({ paymentRoute, fee, options })
    } else if(supported.solana.includes(paymentRoute.blockchain)) {
      return solanaGetTransaction()
    } else {
      throw('Blockchain not supported!')
    }
  };

  function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

  class PaymentRoute {
    constructor({
      blockchain,
      fromAddress,
      fromToken,
      fromAmount,
      fromDecimals,
      fromBalance,
      toToken,
      toAmount,
      toDecimals,
      toAddress,
      fee,
      feeAmount,
      exchangeRoutes,
      approvalRequired,
      currentAllowance,
      approvalTransaction,
      directTransfer,
    }) {
      this.blockchain = blockchain;
      this.fromAddress = fromAddress;
      this.fromToken = fromToken;
      this.fromAmount = _optionalChain([(fromAmount || toAmount), 'optionalAccess', _ => _.toString, 'call', _2 => _2()]);
      this.fromDecimals = fromDecimals;
      this.fromBalance = fromBalance;
      this.toToken = toToken;
      this.toAmount = _optionalChain([toAmount, 'optionalAccess', _3 => _3.toString, 'call', _4 => _4()]);
      this.toDecimals = toDecimals;
      this.toAddress = toAddress;
      this.fee = fee;
      this.feeAmount = feeAmount;
      this.exchangeRoutes = exchangeRoutes || [];
      this.currentAllowance = currentAllowance;
      this.approvalRequired = approvalRequired;
      this.approvalTransaction = approvalTransaction;
      this.directTransfer = directTransfer;
      this.getTransaction = async (options)=> {
        return await getTransaction$1({ paymentRoute: this, options })
      };
    }
  }

  function convertToRoutes({ assets, accept, from }) {
    return Promise.all(assets.map(async (asset)=>{
      let relevantConfigurations = accept.filter((configuration)=>(configuration.blockchain == asset.blockchain));
      let fromToken = new Token__default["default"](asset);
      return Promise.all(relevantConfigurations.map(async (configuration)=>{
        if(configuration.token && configuration.amount) {
          let blockchain = configuration.blockchain;
          let fromDecimals = asset.decimals;
          let toToken = new Token__default["default"]({ blockchain, address: configuration.token });
          let toDecimals = await toToken.decimals();
          let toAmount = (await toToken.BigNumber(configuration.amount)).toString();

          return new PaymentRoute({
            blockchain,
            fromToken,
            fromDecimals,
            toToken,
            toAmount,
            toDecimals,
            fromBalance: asset.balance,
            fromAddress: from[configuration.blockchain],
            toAddress: configuration.toAddress,
            fee: configuration.fee,
          })
        } else if(configuration.fromToken && configuration.fromAmount && fromToken.address.toLowerCase() == configuration.fromToken.toLowerCase()) {
          let blockchain = configuration.blockchain;
          let fromAmount = (await fromToken.BigNumber(configuration.fromAmount)).toString();
          let fromDecimals = asset.decimals;
          let toToken = new Token__default["default"]({ blockchain, address: configuration.toToken });
          let toDecimals = await toToken.decimals();
          
          return new PaymentRoute({
            blockchain,
            fromToken,
            fromDecimals,
            fromAmount,
            toToken,
            toDecimals,
            fromBalance: asset.balance,
            fromAddress: from[configuration.blockchain],
            toAddress: configuration.toAddress,
            fee: configuration.fee,
          })
        }
      }))
    })).then((routes)=> routes.flat().filter(el => el))
  }

  function assetsToRoutes({ assets, blacklist, accept, from }) {
    return Promise.resolve(filterBlacklistedAssets({ assets, blacklist }))
      .then((assets) => convertToRoutes({ assets, accept, from }))
      .then((routes) => addDirectTransferStatus({ routes }))
      .then(addExchangeRoutes)
      .then(filterNotRoutable)
      .then(filterInsufficientBalance)
      .then((routes)=>addRouteAmounts({ routes }))
      .then(addApproval)
      .then(sortPaymentRoutes)
      .then(filterDuplicateFromTokens)
      .then((routes)=>routes.map((route)=>new PaymentRoute(route)))
  }

  function route({ accept, from, whitelist, blacklist, drip }) {
    if(accept.some((accept)=>{ return accept && accept.fee && typeof(accept.fee.amount) == 'string' && accept.fee.amount.match(/\.\d\d+\%/) })) {
      throw('Only up to 1 decimal is supported for fee amounts!')
    }

    return new Promise(async (resolveAll, rejectAll)=>{

      let priority = [];
      let blockchains = [];
      if(whitelist) {
        for (const blockchain in whitelist) {
          (whitelist[blockchain] || []).forEach((address)=>{
            blockchains.push(blockchain);
            priority.push({ blockchain, address });
          });
        }
      } else {
        accept.forEach((accepted)=>{
          blockchains.push(accepted.blockchain);
          priority.push({ blockchain: accepted.blockchain, address: accepted.token || accepted.toToken });
        });
      }

      // add native currency as priority if does not exist already
      [...new Set(blockchains)].forEach((blockchain)=>{
        if(
          !priority.find((priority)=>priority.blockchain === blockchain && priority.address === Blockchains__default["default"][blockchain].currency.address) &&
          (!whitelist || (whitelist && whitelist[blockchain] && whitelist[blockchain].includes(Blockchains__default["default"][blockchain].currency.address)))
        ) {
          priority.push({ blockchain, address: Blockchains__default["default"][blockchain].currency.address });
        }
      });

      priority.sort((a,b)=>{

        // cheaper blockchains are more cost efficient
        if (getBlockchainCost(a.blockchain) < getBlockchainCost(b.blockchain)) {
          return -1 // a wins
        }
        if (getBlockchainCost(b.blockchain) < getBlockchainCost(a.blockchain)) {
          return 1 // b wins
        }

        // NATIVE input token is more cost efficient
        if (a.address.toLowerCase() === Blockchains__default["default"][a.blockchain].currency.address.toLowerCase()) {
          return -1 // a wins
        }
        if (b.address.toLowerCase() === Blockchains__default["default"][b.blockchain].currency.address.toLowerCase()) {
          return 1 // b wins
        }

        return 0
      });

      const sortPriorities = (priorities, a,b)=>{
        if(!priorities || priorities.length === 0) { return 0 }
        let priorityIndexOfA = priorities.indexOf([a.blockchain, a.address.toLowerCase()].join(''));
        let priorityIndexOfB = priorities.indexOf([b.blockchain, b.address.toLowerCase()].join(''));
        
        if(priorityIndexOfA !== -1 && priorityIndexOfB === -1) {
          return -1 // a wins
        }
        if(priorityIndexOfB !== -1 && priorityIndexOfA === -1) {
          return 1 // b wins
        }

        if(priorityIndexOfA < priorityIndexOfB) {
          return -1 // a wins
        }
        if(priorityIndexOfB < priorityIndexOfA) {
          return 1 // b wins
        }
        return 0
      };

      let drippedIndex = 0;
      const dripQueue = [];
      const dripped = [];
      const priorities = priority.map((priority)=>[priority.blockchain, priority.address.toLowerCase()].join(''));
      const thresholdToFirstDripIfNo1PriorityWasNotFirst = 3000;
      const now = ()=>Math.ceil(new Date());
      const time = now();
      setTimeout(()=>{
        dripQueue.forEach((asset)=>dripRoute(route, false));
      }, thresholdToFirstDripIfNo1PriorityWasNotFirst);
      const dripRoute = (route, recursive = true)=>{
        try {
          const asset = { blockchain: route.blockchain, address: route.fromToken.address };
          const assetAsKey = [asset.blockchain, asset.address.toLowerCase()].join('');
          const timeThresholdReached = now()-time > thresholdToFirstDripIfNo1PriorityWasNotFirst;
          if(dripped.indexOf(assetAsKey) > -1) { return }
          if(priorities.indexOf(assetAsKey) === drippedIndex) {
            dripped.push(assetAsKey);
            drip(route);
            drippedIndex += 1;
            if(!recursive){ return }
            dripQueue.forEach((asset)=>dripRoute(route, false));
          } else if(drippedIndex >= priorities.length || timeThresholdReached) {
            if(priorities.indexOf(assetAsKey) === -1) {
              dripped.push(assetAsKey);
              drip(route);
            } else if (drippedIndex >= priorities.length || timeThresholdReached) {
              dripped.push(assetAsKey);
              drip(route);
            }
          } else if(!dripQueue.find((queued)=>queued.blockchain === asset.blockchain && queued.address.toLowerCase() === asset.address.toLowerCase())) {
            dripQueue.push(asset);
            dripQueue.sort((a,b)=>sortPriorities(priorities, a, b));
          }
        } catch (e) {}
      };

      const allAssets = await web3AssetsEvm.dripAssets({
        accounts: from,
        priority,
        only: whitelist,
        exclude: blacklist,
        drip: !drip ? undefined : (asset)=>{
          assetsToRoutes({ assets: [asset], blacklist, accept, from }).then((routes)=>{
            if(_optionalChain([routes, 'optionalAccess', _5 => _5.length])) {
              dripRoute(routes[0]);
            }
          });
        }
      });

      let allPaymentRoutes = (await assetsToRoutes({ assets: allAssets, blacklist, accept, from }) || []);
      allPaymentRoutes.assets = allAssets;
      resolveAll(allPaymentRoutes);
    })
  }

  let filterBlacklistedAssets = ({ assets, blacklist }) => {
    if(blacklist == undefined) {
      return assets
    } else {
      return assets.filter((asset)=> {
        if(blacklist[asset.blockchain] == undefined) {
          return true
        } else {
          return !blacklist[asset.blockchain].find((blacklistedAddress)=>{
            return blacklistedAddress.toLowerCase() == asset.address.toLowerCase()
          })
        }
      })
    }
  };

  let addExchangeRoutes = async (routes) => {
    return await Promise.all(
      routes.map((route) => {
        if(route.directTransfer) { return [] }
        if(route.toToken && route.toAmount) {
          return Exchanges__default["default"].route({
            blockchain: route.blockchain,
            tokenIn: route.fromToken.address,
            tokenOut: route.toToken.address,
            amountOutMin: route.toAmount,
            fromAddress: route.fromAddress,
            toAddress: route.toAddress
          })
        } else if(route.fromToken && route.fromAmount) {
          return Exchanges__default["default"].route({
            blockchain: route.blockchain,
            tokenIn: route.fromToken.address,
            tokenOut: route.toToken.address,
            amountIn: route.fromAmount,
            fromAddress: route.fromAddress,
            toAddress: route.toAddress
          })
        }
      }),
    ).then((exchangeRoutes) => {
      return routes.map((route, index) => {
        route.exchangeRoutes = exchangeRoutes[index];
        return route
      })
    })
  };

  let filterNotRoutable = (routes) => {
    return routes.filter((route) => {
      return (
        route.exchangeRoutes.length != 0 ||
        route.fromToken.address.toLowerCase() == route.toToken.address.toLowerCase() // direct transfer always possible
      )
    })
  };

  let filterInsufficientBalance = async(routes) => {
    return routes.filter((route) => {
      if (route.fromToken.address.toLowerCase() == route.toToken.address.toLowerCase()) {
        return ethers.ethers.BigNumber.from(route.fromBalance).gte(ethers.ethers.BigNumber.from(route.toAmount))
      } else if(route.fromAmount && route.toAmount) {
        return ethers.ethers.BigNumber.from(route.fromBalance).gte(ethers.ethers.BigNumber.from(route.exchangeRoutes[0].amountInMax))
      } else if(route.exchangeRoutes[0] && route.exchangeRoutes[0].amountIn) {
        return ethers.ethers.BigNumber.from(route.fromBalance).gte(ethers.ethers.BigNumber.from(route.exchangeRoutes[0].amountIn))
      }
    })
  };

  let addApproval = (routes) => {
    return Promise.all(routes.map(
      (route) => {
        if(route.blockchain === 'solana') {
          return Promise.resolve(Blockchains__default["default"].solana.maxInt)
        } else {
          return route.fromToken.allowance(route.fromAddress, routers[route.blockchain].address).catch(()=>{})
        }
      }
    )).then(
      (allowances) => {
        routes.map((route, index) => {
          if(
            (
              allowances[index] === undefined ||
              route.directTransfer ||
              route.fromToken.address.toLowerCase() == Blockchains__default["default"][route.blockchain].currency.address.toLowerCase() ||
              route.blockchain === 'solana'
            )
          ) {
            routes[index].approvalRequired = false;
          } else {
            routes[index].currentAllowance = ethers.ethers.BigNumber.from(allowances[index]);
            routes[index].approvalRequired = ethers.ethers.BigNumber.from(route.fromAmount).gte(ethers.ethers.BigNumber.from(allowances[index]));
            if(routes[index].approvalRequired) {
              routes[index].approvalTransaction = {
                blockchain: route.blockchain,
                to: route.fromToken.address,
                api: Token__default["default"][route.blockchain].DEFAULT,
                method: 'approve',
                params: [routers[route.blockchain].address, Blockchains__default["default"][route.blockchain].maxInt]
              };
            }
          }
        });
        return routes
      },
    )
  };

  let addDirectTransferStatus = ({ routes }) => {
    return routes.map((route)=>{
      if(supported.evm.includes(route.blockchain)) {
        route.directTransfer = route.fromToken.address.toLowerCase() == route.toToken.address.toLowerCase() && route.fee == undefined;
      } else if (route.blockchain === 'solana') {
        route.directTransfer = route.fromToken.address.toLowerCase() == route.toToken.address.toLowerCase();
      }
      return route
    })
  };

  let calculateAmounts = ({ paymentRoute, exchangeRoute })=>{
    let fromAmount;
    let toAmount;
    let feeAmount;
    if(exchangeRoute) {
      if(exchangeRoute && exchangeRoute.exchange.wrapper) {
        fromAmount = exchangeRoute.amountIn.toString();
        toAmount = subtractFee({ amount: exchangeRoute.amountOutMin.toString(), paymentRoute });
      } else {
        fromAmount = exchangeRoute.amountIn.toString();
        toAmount = subtractFee({ amount: exchangeRoute.amountOutMin.toString(), paymentRoute });
      }
    } else {
      fromAmount = paymentRoute.fromAmount;
      toAmount = subtractFee({ amount: paymentRoute.fromAmount, paymentRoute });
    }
    if(paymentRoute.fee){
      feeAmount = getFeeAmount({ paymentRoute });
    }
    return { fromAmount, toAmount, feeAmount }
  };

  let subtractFee = ({ amount, paymentRoute })=> {
    if(paymentRoute.fee) {
      let feeAmount = getFeeAmount({ paymentRoute });
      return ethers.ethers.BigNumber.from(amount).sub(feeAmount).toString()
    } else {
      return amount
    }
  };

  let getFeeAmount = ({ paymentRoute })=> {
    if(typeof paymentRoute.fee.amount == 'string' && paymentRoute.fee.amount.match('%')) {
      return ethers.ethers.BigNumber.from(paymentRoute.toAmount).mul(parseFloat(paymentRoute.fee.amount)*10).div(1000).toString()
    } else if(typeof paymentRoute.fee.amount == 'string') {
      return paymentRoute.fee.amount
    } else if(typeof paymentRoute.fee.amount == 'number') {
      return ethers.ethers.utils.parseUnits(paymentRoute.fee.amount.toString(), paymentRoute.toDecimals).toString()
    } else {
      throw('Unknown fee amount type!')
    }
  };

  let addRouteAmounts = ({ routes })=> {
    return routes.map((route)=>{

      if(supported.evm.includes(route.blockchain)) {

        if(route.directTransfer && !route.fee) {
          route.fromAmount = route.toAmount;
        } else {
          let { fromAmount, toAmount, feeAmount } = calculateAmounts({ paymentRoute: route, exchangeRoute: route.exchangeRoutes[0] });
          route.fromAmount = fromAmount;
          route.toAmount = toAmount;
          if(route.fee){
            route.feeAmount = feeAmount;
          }
        }
      } else if (supported.solana.includes(route.blockchain)) {

        let { fromAmount, toAmount, feeAmount } = calculateAmounts({ paymentRoute: route, exchangeRoute: route.exchangeRoutes[0] });
        route.fromAmount = fromAmount;
        route.toAmount = toAmount;
        if(route.fee){
          route.feeAmount = feeAmount;
        }

      }
      
      return route
    })
  };

  let filterDuplicateFromTokens = (routes) => {
    return routes.filter((routeA, indexA)=>{
      let otherMoreEfficientRoute = routes.find((routeB, indexB)=>{
        if(routeA.fromToken.address != routeB.fromToken.address) { return false }
        if(routeA.fromToken.blockchain != routeB.fromToken.blockchain) { return false }
        if(routeB.directTransfer && !routeA.directTransfer) { return true }
        if(ethers.ethers.BigNumber.from(routeB.fromAmount).lt(ethers.ethers.BigNumber.from(routeA.fromAmount)) && !routeA.directTransfer) { return true }
        if(routeB.fromAmount == routeA.fromAmount && indexB < indexA) { return true }
      });

      return otherMoreEfficientRoute == undefined
    })
  };

  let sortPaymentRoutes = (routes) => {
    let aWins = -1;
    let bWins = 1;
    return routes.sort((a, b) => {

      // cheaper blockchains are more cost-efficien
      if (getBlockchainCost(a.fromToken.blockchain) < getBlockchainCost(b.fromToken.blockchain)) {
        return aWins
      }
      if (getBlockchainCost(b.fromToken.blockchain) < getBlockchainCost(a.fromToken.blockchain)) {
        return bWins
      }

      // direct transfer is always more cost-efficient
      if (a.fromToken.address.toLowerCase() == a.toToken.address.toLowerCase()) {
        return aWins
      }
      if (b.fromToken.address.toLowerCase() == b.toToken.address.toLowerCase()) {
        return bWins
      }

      // requiring approval is less cost efficient
      if (a.approvalRequired && !b.approvalRequired) {
        return bWins
      }
      if (b.approvalRequired && !a.approvalRequired) {
        return aWins
      }

      // NATIVE -> WRAPPED is more cost efficient that swapping to another token
      if (JSON.stringify([a.fromToken.address.toLowerCase(), a.toToken.address.toLowerCase()].sort()) == JSON.stringify([Blockchains__default["default"][a.blockchain].currency.address.toLowerCase(), Blockchains__default["default"][a.blockchain].wrapped.address.toLowerCase()].sort())) {
        return aWins
      }
      if (JSON.stringify([b.fromToken.address.toLowerCase(), b.toToken.address.toLowerCase()].sort()) == JSON.stringify([Blockchains__default["default"][b.blockchain].currency.address.toLowerCase(), Blockchains__default["default"][b.blockchain].wrapped.address.toLowerCase()].sort())) {
        return bWins
      }

      // NATIVE input token is more cost efficient
      if (a.fromToken.address.toLowerCase() == Blockchains__default["default"][a.blockchain].currency.address.toLowerCase()) {
        return aWins
      }
      if (b.fromToken.address.toLowerCase() == Blockchains__default["default"][b.blockchain].currency.address.toLowerCase()) {
        return bWins
      }

      if (a.fromToken.address < b.fromToken.address) {
        return aWins
      } else {
        return bWins
      }
    })
  };

  const getTransaction = (paymentRoute)=>{
    if(paymentRoute.blockchain === 'solana') {
      return getTransaction$3({ paymentRoute })
    }
  };

  exports.getTransaction = getTransaction;
  exports.route = route;
  exports.routers = routers;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
